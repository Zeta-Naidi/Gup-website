import type { ExternalToast } from 'vue-sonner/lib/types';
import VSonner from './VSonner.vue';
import type { ToastProps } from './types';
type Options = Omit<ToastProps, 'text'> & Pick<ExternalToast, 'duration' | 'onAutoClose' | 'onDismiss' | 'id' | 'important' | 'promise'>;
declare function toastFunction(text: string, options?: Options): string | number;
export declare const toast: typeof toastFunction & {
    success: (text: string, options?: Options) => string | number;
    error: (text: string, options?: Options) => string | number;
    warning: (text: string, options?: Options) => string | number;
    info: (text: string, options?: Options) => string | number;
    dismiss(toastId?: number | string): string | number | undefined;
    toastOriginal: ((message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number) & {
        success: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
        info: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
        warning: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
        error: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
        custom: (component: import("vue").Component, data?: ExternalToast | undefined) => string | number;
        message: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
        promise: <ToastData>(promise: import("vue-sonner/lib/types").PromiseT<ToastData>, data?: import("vue-sonner/lib/types").PromiseData<ToastData> | undefined) => string | number | undefined;
        dismiss: (id?: string | number | undefined) => string | number | undefined;
        loading: (message: string | import("vue").Component, data?: ExternalToast | undefined) => string | number;
    };
};
export { VSonner, };
