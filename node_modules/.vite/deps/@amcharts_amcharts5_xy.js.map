{
  "version": 3,
  "sources": ["../../src/.internal/charts/xy/XYChartScrollbar.ts", "../../src/.internal/charts/xy/axes/Axis.ts", "../../src/.internal/charts/xy/axes/CategoryAxis.ts", "../../src/.internal/charts/xy/axes/CategoryDateAxis.ts", "../../src/.internal/charts/xy/axes/ValueAxis.ts", "../../src/.internal/charts/xy/axes/DateAxis.ts", "../../src/.internal/charts/xy/axes/GaplessDateAxis.ts", "../../src/.internal/charts/xy/axes/DurationAxis.ts", "../../src/.internal/charts/xy/axes/AxisBullet.ts", "../../src/.internal/charts/xy/axes/AxisRendererX.ts", "../../src/.internal/charts/xy/axes/AxisRendererY.ts", "../../src/.internal/charts/xy/series/Candlestick.ts", "../../src/.internal/charts/xy/series/ColumnSeries.ts", "../../src/.internal/charts/xy/series/CandlestickSeries.ts", "../../src/.internal/charts/xy/series/OHLC.ts", "../../src/.internal/charts/xy/series/OHLCSeries.ts", "../../src/.internal/core/render/MonotoneYTension.ts", "../../src/.internal/charts/xy/series/SmoothedYLineSeries.ts", "../../src/.internal/core/render/MonotoneXTension.ts", "../../src/.internal/charts/xy/series/SmoothedXLineSeries.ts", "../../src/.internal/charts/xy/series/SmoothedXYLineSeries.ts", "../../src/.internal/charts/xy/series/StepLineSeries.ts"],
  "sourcesContent": ["import { Scrollbar, IScrollbarPrivate, IScrollbarSettings } from \"../../core/render/Scrollbar\";\nimport { XYChart } from \"./XYChart\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IXYChartScrollbarSettings extends IScrollbarSettings {\n\n}\n\nexport interface IXYChartScrollbarPrivate extends IScrollbarPrivate {\n}\n\n/**\n * Creates a scrollbar with chart preview in it.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/#Scrollbar_with_chart_preview} for more info\n * @important\n */\nexport class XYChartScrollbar extends Scrollbar {\n\n\tdeclare public _settings: IXYChartScrollbarSettings;\n\tdeclare public _privateSettings: IXYChartScrollbarPrivate;\n\n\tpublic static className: string = \"XYChartScrollbar\";\n\tpublic static classNames: Array<string> = Scrollbar.classNames.concat([XYChartScrollbar.className]);\n\n\t/**\n\t * An instance of an [[XYChart]] that is used to plot chart preview in\n\t * scrollbar.\n\t */\n\tpublic readonly chart: XYChart = this.children.push(XYChart.new(this._root, {\n\t\tthemeTags: [\"chart\"],\n\t\tinteractive: false,\n\t\tinteractiveChildren: false,\n\t\tpanX: false,\n\t\tpanY: false,\n\t\twheelX: \"none\",\n\t\twheelY: \"none\"\n\t}));\n\n\t/**\n\t * A graphics element that is displayed over inactive portion of the\n\t * scrollbarpreview, to dim it down.\n\t */\n\tpublic readonly overlay: Graphics = this.children.push(Graphics.new(this._root, {\n\t\tthemeTags: [\"overlay\"],\n\t\tinteractive: false\n\t}));\n\n\tprotected _afterNew() {\n\t\tthis._addOrientationClass();\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"scrollbar\", \"xy\", \"chart\", this._settings.orientation]);\n\n\t\tconst children = this.children;\n\t\tchildren.moveValue(this.thumb);\n\t\tchildren.moveValue(this.startGrip);\n\t\tchildren.moveValue(this.endGrip);\n\n\t\tthis.thumb.set(\"opacity\", 0);\n\t\tthis.thumb.states.create(\"hover\", { opacity: 0.2 });\n\n\t\tconst plotContainer = this.chart.plotContainer;\n\t\tplotContainer.set(\"interactive\", false);\n\t\tplotContainer.remove(\"background\");\n\t\tplotContainer.children.removeValue(this.chart.zoomOutButton);\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _updateThumb() {\n\t\tsuper._updateThumb();\n\n\t\tthis.overlay.set(\"draw\", (display) => {\n\t\t\tconst startGrip = this.startGrip;\n\t\t\tconst endGrip = this.endGrip;\n\n\t\t\tlet x0 = startGrip.x();\n\t\t\tlet y0 = startGrip.y();\n\n\t\t\tlet x1 = endGrip.x();\n\t\t\tlet y1 = endGrip.y();\n\n\t\t\tconst h = this.height();\n\t\t\tconst w = this.width();\n\n\t\t\tif (x0 > x1) {\n\t\t\t\t[x0, x1] = [x1, x0]\n\t\t\t}\n\n\t\t\tif (y0 > y1) {\n\t\t\t\t[y0, y1] = [y1, y0]\n\t\t\t}\n\n\t\t\tif (this.get(\"orientation\") === \"horizontal\") {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(x0, 0);\n\t\t\t\tdisplay.lineTo(x0, h);\n\t\t\t\tdisplay.lineTo(0, h);\n\t\t\t\tdisplay.lineTo(0, 0);\n\n\t\t\t\tdisplay.moveTo(x1, 0);\n\t\t\t\tdisplay.lineTo(w, 0);\n\t\t\t\tdisplay.lineTo(w, h);\n\t\t\t\tdisplay.lineTo(x1, h);\n\t\t\t\tdisplay.lineTo(x1, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(0, y0);\n\t\t\t\tdisplay.lineTo(w, y0);\n\t\t\t\tdisplay.lineTo(w, 0);\n\t\t\t\tdisplay.lineTo(0, 0);\n\n\t\t\t\tdisplay.moveTo(0, y1);\n\t\t\t\tdisplay.lineTo(0, h);\n\t\t\t\tdisplay.lineTo(w, h);\n\t\t\t\tdisplay.lineTo(w, y1);\n\t\t\t\tdisplay.lineTo(0, y1);\n\t\t\t}\n\t\t})\n\t}\n}\n", "import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport type { XYChart } from \"../XYChart\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport type { Animation } from \"../../../core/util/Entity\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Root } from \"../../../core/Root\";\n\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Component, IComponentSettings, IComponentPrivate, IComponentEvents, IComponentDataItem } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n\n\n\nexport interface IAxisSettings<R extends AxisRenderer> extends IComponentSettings {\n\t/**\n\t * A renderer object which is responsible of rendering visible axis elements.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n\t */\n\trenderer: R;\n\n\t/**\n\t * The initial relative zoom start position of the axis.\n\t *\n\t * E.g. stting it to `0.1` will pre-zoom axis to 10% from the start.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tstart?: number;\n\n\t/**\n\t * The initial relative zoom end position of the axis.\n\t *\n\t * E.g. stting it to `0.9` will pre-zoom axis to 10% from the end.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Pre_zooming_axes} for more info\n\t */\n\tend?: number;\n\n\t/**\n\t * Maximum number of times the scope of the axis could auto-zoom-in.\n\t *\n\t * This is to prevent axis jumping too drastically when scrolling/zooming.\n\t *\n\t * @default 1000\n\t */\n\tmaxZoomFactor?: number | null;\n\n\t/**\n\t * Maximum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed out beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tmaxZoomCount?: number;\n\n\t/**\n\t * Minimum number of axis elements to show at a time.\n\t *\n\t * E.g. for a [[CategoryAxis]] that would be number of categories.\n\t * For a [[DateAxis]] it would be number of `baseInterval`.\n\t *\n\t * The axis will not allow to be zoomed in beyond this number.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Limiting_zoom_scope} for more info\n\t */\n\tminZoomCount?: number;\n\n\t/**\n\t * Base value of the axis.\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * horizontally, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is panned\n\t * vertically, and will keep its current position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tpanY?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * horizontally, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomX?: boolean;\n\n\t/**\n\t * If set to `false` the axis will be exempt when chart is zoomed\n\t * vertically, and will keep its current zoom/position.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Excluding_axes_from_pan_or_zoom} for more info\n\t */\n\tzoomY?: boolean;\n\n\n\t/**\n\t * @todo review\n\t * You can prevent axis to be zoomed if this is false.\n\t */\n\tzoomable?:boolean;\n\n\t/**\n\t * A relative distance the axis is allowed to be zoomed/panned beyond its\n\t * actual scope.\n\t *\n\t * @default 0.1\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Over_zooming} for more info\n\t */\n\tmaxDeviation?: number;\n\n\t/**\n\t * [[Tooltip]] element to use for axis.\n\t */\n\ttooltip?: Tooltip;\n\n\t/**\n\t * `tooltipLocation` indicates\n\t * which relative place to snap to: `0` beginning, `0.5` - middle, `1` - end.\n\t *\n\t * @default 0.5\n\t */\n\ttooltipLocation?: number;\n\n\t/**\n\t * Should tooltip snap to the `tooltipLocation` (`true`) or follow cursor.\n\t *\n\t * @default true\n\t */\n\tsnapTooltip?: boolean;\n\n\t/**\n\t * If set to `true` (default) the axis width will stay constant across all\n\t * zooms, even if actual length of all visible labels changes.\n\t *\n\t * @default true\n\t */\n\tfixAxisSize?: boolean;\n\n\t/**\n\t * A function that will be used to create bullets on each cell.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info\n\t */\n\tbullet?: (root: Root, axis: Axis<AxisRenderer>, dataItem: DataItem<IAxisDataItem>) => AxisBullet;\n}\n\nexport interface IAxisEvents extends IComponentEvents {\n}\n\nexport interface IAxisPrivate extends IComponentPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tname?: \"value\" | \"date\" | \"category\";\n\n\t/**\n\t * @ignore\n\t */\n\tupdateScrollbar?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tmaxZoomFactor?: number | null;\n\n\t/**\n\t * Saves position to which tooltip points.\n\t */\n\ttooltipPosition?: number;\n\n\t/**\n\t * Width in pixels between grid lines (read-only).\n\t * \n\t * It might not be exact, as [[DateAxis]] can have grids at irregular\n\t * intervals.\n\t * \n\t * Could be used to detect when size changes and to adjust labels for them\n\t * not to overlap.\n\t */\n\tcellWidth?: number;\n\n}\n\nexport interface IAxisDataItem extends IComponentDataItem {\n\n\t/**\n\t * Axis label element.\n\t */\n\tlabel?: AxisLabel;\n\n\t/**\n\t * Tick element.\n\t */\n\ttick?: AxisTick;\n\n\t/**\n\t * Grid line element.\n\t */\n\tgrid?: Grid;\n\n\t/**\n\t * Axis fill element.\n\t */\n\taxisFill?: Graphics;\n\n\t/**\n\t * Bullet element.\n\t */\n\tbullet?: AxisBullet;\n\n\t/**\n\t * Indicates if this data item represents an axis range.\n\t */\n\tisRange?: boolean;\n\n\t/**\n\t * If set to `true`, the grid and axis fill of this data item will be drawn\n\t * above series.\n\t *\n\t * NOTE: this needs to be set **before** crating an axis range. Updating this\n\t * dynamically won't have any effect.\n\t *\n\t * NOTE: if you need all grid to be drawn above series, you can brig it to\n\t * front with `chart.gridContainer.toFront();`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/#Grid_fill_above_series} for more info\n\t * @default false\n\t */\n\tabove?: boolean\n\n}\n\n/**\n * A base class for all axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\n */\nexport abstract class Axis<R extends AxisRenderer> extends Component {\n\tpublic static className: string = \"Axis\";\n\tpublic static classNames: Array<string> = Component.classNames.concat([Axis.className]);\n\n\tdeclare public _settings: IAxisSettings<R>;\n\tdeclare public _privateSettings: IAxisPrivate;\n\tdeclare public _dataItemSettings: IAxisDataItem;\n\tdeclare public _events: IAxisEvents;\n\n\tdeclare public _seriesType: XYSeries;\n\n\tprotected _series: Array<this[\"_seriesType\"]> = [];\n\n\tpublic _isPanning: boolean = false;\n\n\t/**\n\t * Array of minor data items.\n\t */\n\tpublic  minorDataItems: Array<DataItem<this[\"_dataItemSettings\"]>> = [];\n\n\t/**\n\t * A [[Container]] that holds all the axis label elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelsContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that holds all the axis grid and fill elements.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly gridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds axis grid elements which goes above the series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly topGridContainer: Container = Container.new(this._root, { width: p100, height: p100 });\n\n\t/**\n\t * A [[Container]] that holds all the axis bullet elements.\n\t *\n\t * @default new Container\n\t */\n\tpublic readonly bulletsContainer: Container = this.children.push(Container.new(this._root, { isMeasured: false, width: p100, height: p100, position: \"absolute\" }));\n\n\t/**\n\t * A referenece to the the chart the axis belongs to.\n\t */\n\tpublic chart: XYChart | undefined;\n\n\tprotected _rangesDirty: Boolean = false;\n\n\tpublic _panStart: number = 0;\n\tpublic _panEnd: number = 1;\n\n\tprotected _sAnimation?: Animation<this[\"_settings\"][\"start\"]>;\n\tprotected _eAnimation?: Animation<this[\"_settings\"][\"end\"]>;\n\n\tpublic _skipSync: boolean = false;\n\n\t/**\n\t * A list of axis ranges.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @default new List()\n\t */\n\tpublic readonly axisRanges: List<DataItem<this[\"_dataItemSettings\"]>> = new List();\n\n\tpublic _seriesAxisRanges: Array<DataItem<this[\"_dataItemSettings\"]>> = [];\n\n\t/**\n\t * A control label that is invisible but is used to keep width the width of\n\t * the axis constant.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info\n\t */\n\tpublic ghostLabel!: AxisLabel;\n\n\tprotected _cursorPosition: number = -1;\n\n\tprotected _snapToSeries?: Array<XYSeries>;\n\n\tpublic _seriesValuesDirty = false;\n\n\t/**\n\t * A container above the axis that can be used to add additional stuff into\n\t * it. For example a legend, label, or an icon.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\n\t * @default new Container\n\t */\n\tpublic axisHeader: Container = this.children.push(Container.new(this._root, {\n\t\tthemeTags: [\"axis\", \"header\"],\n\t\tposition: \"absolute\",\n\t\tbackground: Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"header\", \"background\"],\n\t\t\tfill: this._root.interfaceColors.get(\"background\")\n\t\t})\n\t}));\n\n\tpublic _bullets: { [index: string]: AxisBullet } = {};\n\n\tprotected _dispose() {\n\t\t// these could be in other parents, so disposing just in case\n\t\tthis.gridContainer.dispose();\n\t\tthis.topGridContainer.dispose();\n\t\tthis.bulletsContainer.dispose();\n\t\tthis.labelsContainer.dispose();\n\t\tthis.axisHeader.dispose();\n\t\tsuper._dispose();\n\t}\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.setPrivate(\"updateScrollbar\", true);\n\n\t\tthis._disposers.push(this.axisRanges.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (dataItem) => {\n\t\t\t\t\tthis.disposeDataItem(dataItem);\n\t\t\t\t});\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._processAxisRange(change.newValue, [\"range\"]);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis.disposeDataItem(change.oldValue);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._processAxisRange(change.value, [\"range\"]);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IStreamEvent type\");\n\t\t\t}\n\t\t}))\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\tif (renderer) {\n\t\t\trenderer.axis = this;\n\t\t\trenderer.processAxis();\n\t\t}\n\t\tthis.children.push(renderer);\n\t\tthis.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n\t\tthis.ghostLabel.adapters.disable(\"text\");\n\t\tthis.ghostLabel.setAll({ opacity: 0, tooltipText: undefined, tooltipHTML: undefined, interactive: false });\n\t\tthis.ghostLabel.events.disable();\n\t}\n\n\tprotected _updateFinals(_start: number, _end: number) {\n\n\t}\n\n\t/**\n\t * Zooms the axis to relative locations.\n\t *\n\t * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\n\t *\n\t * @param   start     Relative start\n\t * @param   end       Relative end\n\t * @param   duration  Duration of the zoom animation in milliseconds\n\t * @return            Zoom animation\n\t */\n\tpublic zoom(start: number, end: number, duration?: number, priority?: \"start\" | \"end\"): Animation<this[\"_settings\"][\"start\"]> | Animation<this[\"_settings\"][\"end\"]> | undefined {\n\t\tif(this.get(\"zoomable\", true)){\n\t\t\tthis._updateFinals(start, end);\n\n\t\t\tif (this.get(\"start\") !== start || this.get(\"end\") != end) {\n\t\t\t\tlet sAnimation = this._sAnimation;\n\t\t\t\tlet eAnimation = this._eAnimation;\n\n\t\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\t\tif (start < - maxDeviation) {\n\t\t\t\t\tstart = -maxDeviation;\n\t\t\t\t}\n\n\t\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\t\tend = 1 + maxDeviation;\n\t\t\t\t}\n\n\t\t\t\tif (start > end) {\n\t\t\t\t\t[start, end] = [end, start];\n\t\t\t\t}\n\n\t\t\t\tif (!$type.isNumber(duration)) {\n\t\t\t\t\tduration = this.get(\"interpolationDuration\", 0);\n\t\t\t\t}\n\n\t\t\t\tif (!priority) {\n\t\t\t\t\tpriority = \"end\";\n\t\t\t\t}\n\n\t\t\t\tlet maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n\t\t\t\tlet maxZoomFactorReal = maxZoomFactor;\n\n\t\t\t\tif (end === 1 && start !== 0) {\n\t\t\t\t\tif (start < this.get(\"start\")) {\n\t\t\t\t\t\tpriority = \"start\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tpriority = \"end\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (start === 0 && end !== 1) {\n\t\t\t\t\tif (end > this.get(\"end\")) {\n\t\t\t\t\t\tpriority = \"end\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tpriority = \"start\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet minZoomCount = this.get(\"minZoomCount\");\n\t\t\t\tlet maxZoomCount = this.get(\"maxZoomCount\");\n\n\t\t\t\tif ($type.isNumber(minZoomCount)) {\n\t\t\t\t\tmaxZoomFactor = maxZoomFactorReal / minZoomCount;\n\t\t\t\t}\n\n\t\t\t\tlet minZoomFactor: number = 1;\n\n\t\t\t\tif ($type.isNumber(maxZoomCount)) {\n\t\t\t\t\tminZoomFactor = maxZoomFactorReal / maxZoomCount;\n\t\t\t\t}\n\n\t\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\n\t\t\t\tif (priority === \"start\") {\n\t\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t\t// add to the end\n\t\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\t\tend = start + 1 / minZoomFactor;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add to the end\n\t\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t\t//unless end is > 0\n\t\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t\t//end = 1;\n\t\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// most likely we are dragging right, so we modify left\n\t\t\t\telse {\n\t\t\t\t\tif (maxZoomCount > 0) {\n\t\t\t\t\t\t// add to the end\n\t\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\n\t\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// remove from start\n\t\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\n\t\t\t\t\t\t//start = 0;\n\t\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\n\t\t\t\t}\n\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\n\t\t\t\t}\n\n\t\t\t\tif (maxZoomCount != null && minZoomCount != null && (start == this.get(\"start\") && end == this.get(\"end\"))) {\n\t\t\t\t\tconst chart = this.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\tchart._handleAxisSelection(this, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get(\"start\") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get(\"end\") == end)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tif (duration > 0) {\n\t\t\t\t\tlet easing = this.get(\"interpolationEasing\");\n\t\t\t\t\tlet sAnimation, eAnimation;\n\t\t\t\t\tif (this.get(\"start\") != start) {\n\t\t\t\t\t\tsAnimation = this.animate({ key: \"start\", to: start, duration: duration, easing: easing });\n\t\t\t\t\t}\n\t\t\t\t\tif (this.get(\"end\") != end) {\n\t\t\t\t\t\teAnimation = this.animate({ key: \"end\", to: end, duration: duration, easing: easing });\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._sAnimation = sAnimation;\n\t\t\t\t\tthis._eAnimation = eAnimation;\n\n\t\t\t\t\tif (sAnimation) {\n\t\t\t\t\t\treturn sAnimation;\n\t\t\t\t\t}\n\t\t\t\t\telse if (eAnimation) {\n\t\t\t\t\t\treturn eAnimation;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.set(\"start\", start);\n\t\t\t\t\tthis.set(\"end\", end);\n\t\t\t\t\t// otherwise bullets and line out of sync, as series is not redrawn\n\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\tthis._markDirtyKey(\"start\");\n\t\t\t\t\t\tthis._root._markDirty();\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this._sAnimation) {\n\t\t\t\t\tthis._sAnimation.stop();\n\t\t\t\t}\n\t\t\t\tif (this._eAnimation) {\n\t\t\t\t\tthis._eAnimation.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A list of series using this axis.\n\t *\n\t * @return Series\n\t */\n\tpublic get series(): Array<this[\"_seriesType\"]> {\n\t\treturn this._series;\n\t}\n\n\n\tpublic _processAxisRange(dataItem: DataItem<this[\"_dataItemSettings\"]>, themeTags: Array<string>) {\n\t\tdataItem.setRaw(\"isRange\", true);\n\t\tthis._createAssets(dataItem, themeTags);\n\t\tthis._rangesDirty = true;\n\t\tthis._prepareDataItem(dataItem);\n\n\t\tconst above = dataItem.get(\"above\");\n\t\tconst container = this.topGridContainer;\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (above && grid) {\n\t\t\tcontainer.children.moveValue(grid);\n\t\t}\n\n\t\tconst fill = dataItem.get(\"axisFill\");\n\t\tif (above && fill) {\n\t\t\tcontainer.children.moveValue(fill);\n\t\t}\n\t}\n\n\tpublic _prepareDataItem(_dataItem: DataItem<this[\"_dataItemSettings\"]>, _index?: number) { }\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getX(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getY(_value: any, _location: number, baseValue?: any): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemCoordinateY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionX(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract getDataItemPositionY(_dataItem: DataItem<IXYSeriesDataItem>, _field: string, _cellLocation?: number, _axisLocation?: number): number;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t}\n\n\tpublic _calculateTotals() {\n\t}\n\n\tprotected _updateAxisRanges() {\n\t\tthis._bullets = {};\n\t\tthis.axisRanges.each((axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\n\t\t$array.each(this._seriesAxisRanges, (axisRange) => {\n\t\t\tthis._prepareDataItem(axisRange);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract baseValue(): any;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.get(\"fixAxisSize\")) {\n\t\t\tthis.ghostLabel.set(\"visible\", true);\n\t\t}\n\t\telse {\n\t\t\tthis.ghostLabel.set(\"visible\", false);\n\t\t}\n\n\t\tif (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart._updateCursor();\n\t\t\t}\n\n\t\t\tlet start = this.get(\"start\", 0);\n\t\t\tlet end = this.get(\"end\", 1);\n\n\t\t\tlet maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, (end - start));\n\n\t\t\tif (start < -maxDeviation) {\n\t\t\t\tlet delta = start + maxDeviation;\n\t\t\t\tstart = -maxDeviation;\n\t\t\t\tthis.setRaw(\"start\", start);\n\t\t\t\tif (this.isDirty(\"end\")) {\n\t\t\t\t\tthis.setRaw(\"end\", end - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (end > 1 + maxDeviation) {\n\t\t\t\tlet delta = end - 1 - maxDeviation;\n\t\t\t\tend = 1 + maxDeviation;\n\t\t\t\tthis.setRaw(\"end\", end);\n\n\t\t\t\tif (this.isDirty(\"start\")) {\n\t\t\t\t\tthis.setRaw(\"start\", start - delta);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\trenderer._start = this.get(\"start\")!;\n\t\trenderer._end = this.get(\"end\")!;\n\t\trenderer._inversed = renderer.get(\"inversed\", false);\n\t\trenderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n\t\trenderer._updateLC();\n\n\t\tif (this.isDirty(\"tooltip\")) {\n\t\t\tconst tooltip = this.get(\"tooltip\");\n\t\t\tif (tooltip) {\n\t\t\t\tconst rendererTags = renderer.get(\"themeTags\");\n\t\t\t\ttooltip.addTag(\"axis\");\n\t\t\t\ttooltip.addTag(this.className.toLowerCase());\n\t\t\t\ttooltip._applyThemes();\n\n\t\t\t\tif (rendererTags) {\n\t\t\t\t\ttooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n\t\t\t\t\ttooltip.label._applyThemes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateTooltipBounds() {\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tif (tooltip) {\n\t\t\tthis.get(\"renderer\").updateTooltipBounds(tooltip);\n\t\t}\n\t}\n\n\tpublic _updateBounds() {\n\t\tsuper._updateBounds();\n\t\tthis._updateTooltipBounds();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processChart(chart: XYChart) {\n\t\tthis.chart = chart;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\trenderer.chart = chart;\n\t\tchart.gridContainer.children.push(this.gridContainer);\n\t\tchart.topGridContainer.children.push(this.topGridContainer);\n\n\t\tchart.axisHeadersContainer.children.push(this.axisHeader);\n\n\t\tthis.on(\"start\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\t\tthis.on(\"end\", () => {\n\t\t\tchart._handleAxisSelection(this);\n\t\t});\n\n\t\tchart.plotContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\t\tchart.plotContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t});\n\n\t\tchart.processAxis(this);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic hideDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleFHDataItem(dataItem, true);\n\t\treturn super.hideDataItem(dataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic showDataItem(dataItem: DataItem<IAxisDataItem>): Promise<void> {\n\t\tthis._toggleFHDataItem(dataItem, false);\n\t\treturn super.showDataItem(dataItem);\n\t}\n\n\tpublic _toggleFHDataItem(dataItem: DataItem<IAxisDataItem>, forceHidden: boolean) {\n\t\tconst fh = \"forceHidden\";\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tlabel.set(fh, forceHidden);\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\tgrid.set(fh, forceHidden);\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\ttick.set(fh, forceHidden);\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\taxisFill.set(fh, forceHidden);\n\t\t}\n\n\t\tconst bullet = dataItem.get(\"bullet\");\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.set(fh, forceHidden);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _toggleDataItem(dataItem: DataItem<IAxisDataItem>, visible: boolean) {\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst v = \"visible\";\n\t\tif (label) {\n\t\t\tlabel.setPrivate(v, visible);\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\tgrid.setPrivate(v, visible);\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\ttick.setPrivate(v, visible);\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\taxisFill.setPrivate(v, visible);\n\t\t}\n\n\t\tconst bullet = dataItem.get(\"bullet\");\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setPrivate(v, visible);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract basePosition(): number;\n\n\tpublic _createAssets(dataItem: DataItem<this[\"_dataItemSettings\"]>, tags: Array<string>, minor?: boolean) {\n\t\tconst renderer = this.get(\"renderer\");\n\t\tlet m = \"minor\";\n\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (!label) {\n\t\t\trenderer.makeLabel(dataItem, tags);\n\t\t}\n\t\telse {\n\t\t\tlet themeTags = label.get(\"themeTags\");\n\t\t\tlet remove = false;\n\t\t\tif (minor) {\n\t\t\t\tif (themeTags?.indexOf(m) == -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (themeTags?.indexOf(m) != -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (remove) {\n\t\t\t\tlabel.parent?.children.removeValue(label);\n\t\t\t\trenderer.makeLabel(dataItem, tags);\n\t\t\t\tlabel.dispose();\n\t\t\t\trenderer.labels.removeValue(label);\n\t\t\t}\n\t\t}\n\n\t\tconst grid = dataItem.get(\"grid\");\n\n\t\tif (!grid) {\n\t\t\trenderer.makeGrid(dataItem, tags);\n\t\t}\n\t\telse {\n\t\t\tlet themeTags = grid.get(\"themeTags\");\n\t\t\tlet remove = false;\n\t\t\tif (minor) {\n\t\t\t\tif (themeTags?.indexOf(m) == -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (themeTags?.indexOf(m) != -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (remove) {\n\t\t\t\tgrid.parent?.children.removeValue(grid);\n\t\t\t\trenderer.makeGrid(dataItem, tags);\n\t\t\t\tgrid.dispose();\n\t\t\t\trenderer.grid.removeValue(grid);\n\t\t\t}\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (!tick) {\n\t\t\trenderer.makeTick(dataItem, tags);\n\t\t}\n\t\telse {\n\t\t\tlet remove = false;\n\t\t\tlet themeTags = tick.get(\"themeTags\");\n\t\t\tif (minor) {\n\t\t\t\tif (themeTags?.indexOf(m) == -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (themeTags?.indexOf(m) != -1) {\n\t\t\t\t\tremove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (remove) {\n\t\t\t\ttick.parent?.children.removeValue(tick);\n\t\t\t\trenderer.makeTick(dataItem, tags);\n\t\t\t\ttick.dispose();\n\t\t\t\trenderer.ticks.removeValue(tick);\n\t\t\t}\n\t\t}\n\n\t\tif (!minor && !dataItem.get(\"axisFill\")) {\n\t\t\trenderer.makeAxisFill(dataItem, tags);\n\t\t}\n\n\t\tthis._processBullet(dataItem);\n\t}\n\n\tprotected _processBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tlet bullet = dataItem.get(\"bullet\");\n\t\tlet axisBullet = this.get(\"bullet\");\n\n\t\tif (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n\t\t\tbullet = axisBullet(this._root, this, dataItem);\n\t\t}\n\n\t\tif (bullet) {\n\t\t\tbullet.axis = this;\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tsprite._setDataItem(dataItem);\n\t\t\t\tdataItem.setRaw(\"bullet\", bullet);\n\t\t\t\tif (!sprite.parent) {\n\t\t\t\t\tthis.bulletsContainer.children.push(sprite);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart._updateChartLayout();\n\t\t\tchart.axisHeadersContainer.markDirtySize();\n\t\t}\n\n\t\tthis.get(\"renderer\")._updatePositions();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst renderer = this.get(\"renderer\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\trenderer.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\trenderer.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tconst grid = dataItem.get(\"grid\");\n\t\tif (grid) {\n\t\t\trenderer.grid.removeValue(grid);\n\t\t\tgrid.dispose();\n\t\t}\n\t\tconst axisFill = dataItem.get(\"axisFill\");\n\t\tif (axisFill) {\n\t\t\trenderer.axisFills.removeValue(axisFill);\n\t\t\taxisFill.dispose();\n\t\t}\n\t\tconst bullet = dataItem.get(\"bullet\");\n\n\t\tif (bullet) {\n\t\t\tbullet.dispose();\n\t\t}\n\t}\n\n\tprotected _updateGhost() {\n\t\tthis.setPrivate(\"cellWidth\", this.getCellWidthPosition() * this.get(\"renderer\").axisLength());\n\t\tconst ghostLabel = this.ghostLabel;\n\t\tif (!ghostLabel.isHidden()) {\n\t\t\tconst bounds = ghostLabel.localBounds();\n\t\t\tconst gWidth = Math.ceil(bounds.right - bounds.left);\n\t\t\tlet text = ghostLabel.get(\"text\");\n\t\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label && !label.isHidden()) {\n\t\t\t\t\tconst bounds = label.localBounds();\n\t\t\t\t\tconst w = Math.ceil(bounds.right - bounds.left);\n\n\t\t\t\t\tif (w > gWidth) {\n\t\t\t\t\t\ttext = label.text._getText();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tghostLabel.set(\"text\", text);\n\t\t}\n\t\tlet start = this.get(\"start\", 0);\n\t\tlet end = this.get(\"end\", 1);\n\t\tthis.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n\t}\n\n\tpublic _handleCursorPosition(position: number, snapToSeries?: Array<XYSeries>) {\n\t\tconst renderer = this.get(\"renderer\");\n\t\tposition = renderer.toAxisPosition(position);\n\n\t\tthis._cursorPosition = position;\n\t\tthis._snapToSeries = snapToSeries;\n\n\t\tthis.updateTooltip();\n\t}\n\n\t/**\n\t * Can be called when axis zoom changes and you need to update tooltip\n\t * position.\n\t */\n\tpublic updateTooltip() {\n\t\tconst snapToSeries = this._snapToSeries;\n\t\tlet position = this._cursorPosition;\n\t\tconst tooltip = this.get(\"tooltip\")!;\n\t\tconst renderer = this.get(\"renderer\");\n\n\t\tif ($type.isNumber(position)) {\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tconst dataItem = this.getSeriesItem(series, position!, this.get(\"tooltipLocation\"));\n\t\t\t\t\tseries.setRaw(\"tooltipDataItem\", dataItem);\n\t\t\t\t\tif (snapToSeries && snapToSeries.indexOf(series) != -1) {\n\t\t\t\t\t\tseries.updateLegendMarker(dataItem);\n\t\t\t\t\t\tseries.updateLegendValue(dataItem);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tseries.showDataItemTooltip(dataItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\n\t\t\tif (tooltip) {\n\t\t\t\trenderer.updateTooltipBounds(tooltip);\n\n\t\t\t\tif (this.get(\"snapTooltip\")) {\n\t\t\t\t\tposition = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n\t\t\t\t}\n\t\t\t\tif (!$type.isNaN(position)) {\n\t\t\t\t\tthis.setPrivateRaw(\"tooltipPosition\", position);\n\t\t\t\t\tthis._updateTooltipText(tooltip, position);\n\t\t\t\t\trenderer.positionTooltip(tooltip, position);\n\n\t\t\t\t\tif (position < this.get(\"start\") || position > this.get(\"end\")) {\n\t\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttooltip.show(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttooltip.hide(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTooltipText(tooltip: Tooltip, position: number) {\n\t\ttooltip.label.set(\"text\", this.getTooltipText(position));\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position        Position\n\t * @param   adjustPosition  Adjust position\n\t * @return                  Tooltip text\n\t */\n\tpublic abstract getTooltipText(position: number, adjustPosition?: boolean): string | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, _location: number): number {\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorShow() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic handleCursorHide() {\n\t\tlet tooltip = this.get(\"tooltip\");\n\t\tif (tooltip) {\n\t\t\ttooltip.hide();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(_dataItem: DataItem<IXYSeriesDataItem>, _fields: Array<string>) {\n\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._sizeDirty = false;\n\t\tthis._rangesDirty = false;\n\t}\n\n\t/**\n\t * Converts pixel coordinate to a relative position on axis.\n\t *\n\t * @param   coordinate  Coordinate\n\t * @return              Relative position\n\t */\n\tpublic coordinateToPosition(coordinate: number): number {\n\t\tconst renderer = this.get(\"renderer\");\n\t\treturn renderer.toAxisPosition(coordinate / renderer.axisLength());\n\t}\n\n\t/**\n\t * Converts relative position of the plot area to relative position of the\n\t * axis with zoom taken into account.\n\t *\n\t * @param position Position\n\t * @return Relative position\n\t */\n\tpublic toAxisPosition(position: number): number {\n\t\treturn this.get(\"renderer\").toAxisPosition(position);\n\t}\n\n\t/**\n\t * Converts relative position of the axis to a global position taking current\n\t * zoom into account (opposite to what `toAxisPosition` does).\n\t *\n\t * @since 5.4.2\n\t * @param position Position\n\t * @return Global position\n\t */\n\tpublic toGlobalPosition(position: number): number {\n\t\treturn this.get(\"renderer\").toGlobalPosition(position);\n\t}\n\n\t/**\n\t * Adjusts position with inversed taken into account.\n\t *\n\t * @ignore\n\t */\n\tpublic fixPosition(position: number): number {\n\t\treturn this.get(\"renderer\").fixPosition(position);\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic abstract getSeriesItem(series: XYSeries, position: number, location?: number): DataItem<IXYSeriesDataItem> | undefined\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(_dataItem: DataItem<IXYSeriesDataItem>, _nextItem: DataItem<IXYSeriesDataItem>, _autoGapCount: number, _fieldName: string): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates and returns an axis range object.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\n\t * @param   axisDataItem  Axis data item\n\t * @return                Axis range\n\t */\n\tpublic createAxisRange(axisDataItem: DataItem<IAxisDataItem>): DataItem<this[\"_dataItemSettings\"]> {\n\t\treturn this.axisRanges.push(axisDataItem);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _groupSeriesData(_series: XYSeries) { }\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\treturn 0.05;\n\t}\n}\n", "import type { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport { Axis, IAxisSettings, IAxisPrivate, IAxisDataItem, IAxisEvents } from \"./Axis\";\nimport type { IXYSeriesDataItem, XYSeries } from \"../series/XYSeries\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { populateString } from \"../../../core/util/PopulateString\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\n\nexport interface ICategoryAxisSettings<R extends AxisRenderer> extends IAxisSettings<R> {\n\n\t/**\n\t * A function that can be used to specify how to configure axis fills.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_fills} for more info\n\t */\n\tfillRule?: (dataItem: DataItem<ICategoryAxisDataItem>, index?: number) => void;\n\n\t/**\n\t * A field in data which holds categories.\n\t */\n\tcategoryField: string;\n\n\t/**\n\t * Relative location of where axis cell starts: 0 - beginning, 1 - end.\n\t *\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location of where axis cell ends: 0 - beginning, 1 - end.\n\t *\n\t * @default 1\n\t */\n\tendLocation?: number;\n}\n\nexport interface ICategoryAxisDataItem extends IAxisDataItem {\n\n\t/**\n\t * Named category.\n\t */\n\tcategory?: string;\n\n\t/**\n\t * Named end category (for axis items that span multiple categories, like\n\t * axis ranges).\n\t */\n\tendCategory?: string;\n\n\t/**\n\t * Index of the data item.\n\t */\n\tindex?: number;\n\n\t/**\n\t * Relative location of the category within cell: 0 - start, 1 - end.\n\t */\n\tcategoryLocation?: number;\n\n\t/**\n\t * Relative location of the end category within cell: 0 - start, 1 - end.\n\t */\n\tendCategoryLocation?: number;\n\n\t/**\n\t * A distance to shift data item relative to its original position.\n\t *\n\t * The value is 0 to 1, where 1 is full witdth of the axis.\n\t *\n\t * Can be used to sort data items without modifying order of the actual data.\n\t */\n\tdeltaPosition?: number;\n\n}\n\nexport interface ICategoryAxisPrivate extends IAxisPrivate {\n\n\t/**\n\t * Start index of the current zoom scope.\n\t */\n\tstartIndex?: number;\n\n\t/**\n\t * End index of the current zoom scope.\n\t */\n\tendIndex?: number;\n\n}\n\nexport interface ICategoryAxisEvents extends IAxisEvents {\n\n}\n\n/**\n * Creates a category axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-axis/} for more info\n * @important\n */\nexport class CategoryAxis<R extends AxisRenderer> extends Axis<R> {\n\tpublic static className: string = \"CategoryAxis\";\n\tpublic static classNames: Array<string> = Axis.classNames.concat([CategoryAxis.className]);\n\n\tdeclare public _settings: ICategoryAxisSettings<R>;\n\tdeclare public _privateSettings: ICategoryAxisPrivate;\n\tdeclare public _dataItemSettings: ICategoryAxisDataItem;\n\tdeclare public _events: ICategoryAxisEvents;\n\n\tprotected _frequency: number = 1;\n\n\tprotected _itemMap: { [index: string]: DataItem<ICategoryAxisDataItem> } = {};\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tthis.fields.push(\"category\");\n\t\tthis.setPrivateRaw(\"name\", \"category\");\n\t\tthis.addTag(\"category\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst len = this.dataItems.length;\n\t\tlet i = 0;\n\t\tif (this._valuesDirty) {\n\t\t\tthis._itemMap = {};\n\t\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\t\tdataItem.setRaw(\"index\", i);\n\t\t\t\tthis._itemMap[dataItem.get(\"category\") as string] = dataItem;\n\t\t\t\ti++;\n\t\t\t})\n\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", len);\n\t\t}\n\n\t\tthis.setPrivateRaw(\"startIndex\", Math.max(Math.round(this.get(\"start\", 0) * len), 0));\n\t\tthis.setPrivateRaw(\"endIndex\", Math.min(Math.round(this.get(\"end\", 1) * len), len));\n\n\t\tif (this._sizeDirty || this._valuesDirty || (this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"endIndex\") || this.isPrivateDirty(\"startIndex\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\"))) {\n\t\t\tif (this.dataItems.length > 0) {\n\t\t\t\tthis._handleRangeChange();\n\t\t\t\tthis._prepareAxisItems();\n\t\t\t\tthis._updateAxisRanges();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleRangeChange() {\n\t\t$array.each(this.series, (series) => {\n\t\t\tlet startCategory = this.dataItems[this.startIndex()].get(\"category\");\n\t\t\tlet endCategory = this.dataItems[this.endIndex() - 1].get(\"category\");\n\n\t\t\tlet baseAxis = series.get(\"baseAxis\");\n\t\t\tlet xAxis = series.get(\"xAxis\");\n\t\t\tlet yAxis = series.get(\"yAxis\");\n\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {\n\t\t\t\tseries._markDirtyAxes();\n\t\t\t}\n\t\t\telse if (baseAxis === this) {\n\t\t\t\tlet key: string | undefined;\n\t\t\t\tlet openKey: string | undefined;\n\t\t\t\tlet otherAxis = yAxis;\n\t\t\t\tif (xAxis === baseAxis) {\n\t\t\t\t\tif (series.get(\"categoryXField\")) {\n\t\t\t\t\t\tkey = \"categoryX\";\n\t\t\t\t\t}\n\t\t\t\t\tif (series.get(\"openCategoryXField\")) {\n\t\t\t\t\t\topenKey = \"openCategoryX\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (yAxis === baseAxis) {\n\t\t\t\t\tif (series.get(\"categoryYField\")) {\n\t\t\t\t\t\tkey = \"categoryY\";\n\t\t\t\t\t}\n\t\t\t\t\tif (series.get(\"openCategoryYField\")) {\n\t\t\t\t\t\topenKey = \"openCategoryY\";\n\t\t\t\t\t}\n\t\t\t\t\totherAxis = xAxis;\n\t\t\t\t}\n\n\t\t\t\tif (otherAxis.className == \"ValueAxis\") {\n\n\t\t\t\t\tif (key || openKey) {\n\t\t\t\t\t\tlet startDataItem: DataItem<IXYSeriesDataItem> | undefined;\n\t\t\t\t\t\tlet endDataItem: DataItem<IXYSeriesDataItem> | undefined;\n\n\t\t\t\t\t\tfor (let i = 0, len = series.dataItems.length; i < len; i++) {\n\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\tif (key) {\n\t\t\t\t\t\t\t\tif (dataItem.get(key as any) === startCategory) {\n\t\t\t\t\t\t\t\t\tstartDataItem = dataItem;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (openKey) {\n\t\t\t\t\t\t\t\tif (dataItem.get(openKey as any) === startCategory) {\n\t\t\t\t\t\t\t\t\tstartDataItem = dataItem;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\tif (key) {\n\t\t\t\t\t\t\t\tif (dataItem.get(key as any) === endCategory) {\n\t\t\t\t\t\t\t\t\tendDataItem = dataItem;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (openKey) {\n\t\t\t\t\t\t\t\tif (dataItem.get(openKey as any) === endCategory) {\n\t\t\t\t\t\t\t\t\tendDataItem = dataItem;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet startIndex = 0;\n\t\t\t\t\t\tlet endIndex = series.dataItems.length;\n\n\t\t\t\t\t\tif (startDataItem) {\n\t\t\t\t\t\t\tstartIndex = series.dataItems.indexOf(startDataItem);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (endDataItem) {\n\t\t\t\t\t\t\tendIndex = series.dataItems.indexOf(endDataItem) + 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tseries.setPrivate(\"startIndex\", startIndex);\n\t\t\t\t\t\tseries.setPrivate(\"endIndex\", endIndex);\n\n\t\t\t\t\t\tlet hasValue = false;\n\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\tconst dataItem = series.dataItems[i];\n\n\t\t\t\t\t\t\t$array.each(series.__valueXShowFields, (key) => {\n\t\t\t\t\t\t\t\tlet value = dataItem.get(<any>key);\n\t\t\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\t\t\thasValue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t$array.each(series.__valueYShowFields, (key) => {\n\t\t\t\t\t\t\t\tlet value = dataItem.get(<any>key);\n\t\t\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\t\t\thasValue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\tif (hasValue) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tseries.setPrivate(\"outOfSelection\", !hasValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tseries._markDirtyAxes();\t// must be outside\n\t\t\t}\n\t\t})\n\t}\n\n\n\tprotected _prepareAxisItems() {\n\t\tconst renderer = this.get(\"renderer\");\n\t\tconst len = this.dataItems.length;\n\n\t\tlet startIndex = this.startIndex();\n\t\tif (startIndex > 0) {\n\t\t\tstartIndex--;\n\t\t}\n\n\t\tlet endIndex = this.endIndex();\n\t\tif (endIndex < len) {\n\t\t\tendIndex++;\n\t\t}\n\n\t\tconst minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n\t\tconst minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n\n\t\tlet maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\")!, 1);\n\t\tlet frequency = Math.max(1, Math.min(len, Math.ceil((endIndex - startIndex) / maxCount)));\n\n\t\tstartIndex = Math.floor(startIndex / frequency) * frequency;\n\t\tthis._frequency = frequency;\n\n\t\tfor (let j = 0; j < len; j++) {\n\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t}\n\n\t\tlet f = this.dataItems[startIndex].get(\"index\", 0);\n\n\t\tfor (let i = startIndex; i < endIndex; i = i + frequency) {\n\t\t\tlet dataItem = this.dataItems[i];\n\n\t\t\tthis._createAssets(dataItem, []);\n\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\tlet count = frequency;\n\t\t\tif (minorGridEnabled) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\n\t\t\tthis._prepareDataItem(dataItem, f, count);\n\n\t\t\tf++;\n\t\t}\n\n\t\tif (renderer.get(\"minorGridEnabled\")) {\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tlet dataItem = this.dataItems[i];\n\t\t\t\tif (i % frequency != 0) {\n\t\t\t\t\tthis._createAssets(dataItem, [\"minor\"], true);\n\t\t\t\t\tthis._toggleDataItem(dataItem, true);\n\t\t\t\t\tthis._prepareDataItem(dataItem, 0, 1);\n\n\t\t\t\t\tif (!minorLabelsEnabled) {\n\t\t\t\t\t\tdataItem.get(\"label\")?.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._updateGhost();\n\t}\n\n\n\tpublic _prepareDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, fillIndex?: number, count?: number) {\n\t\tlet renderer = this.get(\"renderer\");\n\n\t\tlet categoryLocation = dataItem.get(\"categoryLocation\", 0);\n\t\tlet endCategoryLocation = dataItem.get(\"endCategoryLocation\", 1);\n\n\t\tlet index: number | undefined = dataItem.get(\"index\");\n\n\t\tif (!$type.isNumber(index)) {\n\t\t\tindex = this.categoryToIndex(dataItem.get(\"category\")!);\n\t\t}\n\n\t\tlet position = this.indexToPosition(index, categoryLocation);\n\n\t\tlet endCategory = dataItem.get(\"endCategory\")!;\n\t\tlet endIndex: number;\n\t\tif (endCategory) {\n\t\t\tendIndex = this.categoryToIndex(endCategory);\n\t\t\tif (!$type.isNumber(endIndex)) {\n\t\t\t\tendIndex = index;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tendIndex = index;\n\t\t}\n\n\t\tlet endPosition = this.indexToPosition(endIndex, endCategoryLocation);\n\n\t\tlet fillEndIndex: number;\n\t\tlet fillEndPosition: number;\n\n\t\tif (dataItem.get(\"isRange\")) {\n\t\t\tfillEndIndex = endIndex;\n\t\t}\n\t\telse {\n\t\t\tfillEndIndex = index + this._frequency - 1;\n\t\t}\n\n\t\tfillEndPosition = this.indexToPosition(fillEndIndex, endCategoryLocation);\n\n\t\trenderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n\t\trenderer.updateGrid(dataItem.get(\"grid\"), position, endPosition);\n\t\trenderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n\t\trenderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n\t\tthis._processBullet(dataItem);\n\t\trenderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n\t\tconst fillRule = this.get(\"fillRule\");\n\t\tif (fillRule) {\n\t\t\tfillRule(dataItem, fillIndex)\n\t\t}\n\t}\n\n\tpublic startIndex() {\n\t\tlet len = this.dataItems.length;\n\t\treturn Math.min(Math.max(this.getPrivate(\"startIndex\", 0), 0), len - 1);\n\t}\n\n\tpublic endIndex() {\n\t\tlet len = this.dataItems.length;\n\t\treturn Math.max(1, Math.min(this.getPrivate(\"endIndex\", len), len));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic baseValue(): any {\n\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic basePosition() {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific category index.\n\t *\n\t * @param   value  Index\n\t * @return         X coordinate\n\t */\n\tpublic getX(value: string): number {\n\t\tlet axisDataItem = this._itemMap[value];\n\t\tif (axisDataItem) {\n\t\t\treturn this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Returns Y coordinate in pixels corresponding to specific category index.\n\t *\n\t * @param   value  Index\n\t * @return         Y coordinate\n\t */\n\tpublic getY(value: string): number {\n\t\tlet axisDataItem = this._itemMap[value];\n\t\tif (axisDataItem) {\n\t\t\treturn this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, _axisLocation?: number): number {\n\t\tconst category = dataItem.get(field as any);\n\t\tconst axisDataItem = this._itemMap[category];\n\n\t\tif (axisDataItem) {\n\t\t\treturn this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, _axisLocation?: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, _axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, _axisLocation?: number): number {\n\t\tconst category = dataItem.get(field as any);\n\t\tconst axisDataItem = this._itemMap[category];\n\t\tif (axisDataItem) {\n\t\t\treturn this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, _axisLocation?: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, _axisLocation));\n\t}\n\n\t/**\n\t * Converts category index to a relative position.\n\t *\n\t * `location` indicates relative position within category: 0 - start, 1 - end.\n\t *\n\t * If not set, will use middle (0.5) of the category.\n\t *\n\t * @param   index     Index\n\t * @param   location  Location\n\t * @return            Index\n\t */\n\tpublic indexToPosition(index: number, location?: number): number {\n\t\tif (!$type.isNumber(location)) {\n\t\t\tlocation = 0.5;\n\t\t}\n\n\t\tlet len = this.dataItems.length;\n\n\t\tlet startLocation = this.get(\"startLocation\", 0);\n\t\tlet endLocation = this.get(\"endLocation\", 1);\n\n\t\tlen -= startLocation;\n\t\tlen -= (1 - endLocation);\n\n\t\tlet position = (index + location - startLocation) / len;\n\n\t\tlet dataItem = this.dataItems[index];\n\t\tif (dataItem) {\n\t\t\tposition += dataItem.get(\"deltaPosition\", 0);\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Returns an index of a category.\n\t *\n\t * @param   category  Category to look up\n\t * @return            Index\n\t */\n\tpublic categoryToIndex(category: string): number {\n\t\tlet dataItem = this._itemMap[category];\n\t\tif (dataItem) {\n\t\t\treturn dataItem.get(\"index\")!;\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic dataItemToPosition(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\treturn this.indexToPosition(dataItem.get(\"index\")!);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, location: number): number {\n\t\tposition += (0.5 - location) / this.dataItems.length;\n\t\treturn this.indexToPosition(this.axisPositionToIndex(position), location);\n\t}\n\n\t/**\n\t * Returns an index of the category that corresponds to specific pixel\n\t * position within axis.\n\t *\n\t * @param position  Position (px)\n\t * @return Category index\n\t */\n\tpublic axisPositionToIndex(position: number): number {\n\t\tlet len = this.dataItems.length;\n\t\treturn $math.fitToRange(Math.floor(position * len), 0, len - 1);//$math.fitToRange(Math.floor((end - start) * len * position + len * start), 0, len - 1);\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number, _adjustPosition?: boolean): string | undefined {\n\t\t//@todo number formatter + tag\n\t\tconst dataItem = this.dataItems[this.axisPositionToIndex(position)];\n\t\tif (dataItem) {\n\t\t\tconst label = dataItem.get(\"label\")\n\t\t\tif (label) {\n\t\t\t\treturn populateString(label, this.get(\"tooltipText\", \"\"));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTooltipText(tooltip: Tooltip, position: number) {\n\t\ttooltip._setDataItem(this.dataItems[this.axisPositionToIndex(position)]);\n\t\ttooltip.label.text.markDirtyText();\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number): DataItem<IXYSeriesDataItem> | undefined {\n\t\tif (this.dataItems.length > 0) {\n\t\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\t\tlet index = this.axisPositionToIndex(position);\n\t\t\t// try simple first\n\t\t\tlet seriesDataItem = series.dataItems[index];\n\t\t\tlet axisDataItem = this.dataItems[index];\n\t\t\tlet category = axisDataItem.get(\"category\");\n\n\t\t\tif (seriesDataItem && axisDataItem) {\n\t\t\t\tif (seriesDataItem.get(fieldName) === category) {\n\t\t\t\t\treturn seriesDataItem;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if not found, try looking\n\t\t\tfor (let i = 0, len = series.dataItems.length; i < len; i++) {\n\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\tif (dataItem.get(fieldName) === category) {\n\t\t\t\t\treturn dataItem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` indexes.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start index\n\t * @param  end       End index\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToIndexes(start: number, end: number, duration?: number) {\n\t\tlet len = this.dataItems.length;\n\t\tthis.zoom(start / len, end / len, duration);\n\t}\n\n\tpublic zoomToCategories(startCategory: string, endCategory: string, duration?: number) {\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1, duration);\n\t}\n\n\t/**\n\t * Returns position span between start and end of a single cell in axis.\n\t *\n\t * @since 5.2.30\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\treturn this._frequency / this.dataItems.length / (this.get(\"end\", 1) - this.get(\"start\", 0));\n\t}\n}\n", "import type { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport { CategoryAxis, ICategoryAxisSettings, ICategoryAxisPrivate, ICategoryAxisDataItem, ICategoryAxisEvents } from \"./CategoryAxis\";\nimport type { ITimeInterval } from \"../../../core/util/Time\";\nimport * as $time from \"../../../core/util/Time\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\n\nexport interface ICategoryDateAxisSettings<R extends AxisRenderer> extends ICategoryAxisSettings<R> {\n\n\t/**\n\t * Indicates granularity of data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Data_granularity} for more info\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * A list of intervals the axis is allowed to show grid/labels on.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Grid_granularity} for more info\n\t */\n\tgridIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * Display \"period change\" labels using different format.\n\t *\n\t * If set to `true`, will use `periodChangeDateFormats` instead\n\t * of `dateFormats` for such labels, e.g. for month start.\n\t *\n\t * @default true\n\t */\n\tmarkUnitChange?: boolean;\n\n\t/**\n\t * Date formats used for intermediate labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tdateFormats?: { [index: string]: string };\n\n\t/**\n\t * Date formats used for \"period change\" labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tperiodChangeDateFormats?: { [index: string]: string };\n\n\t/**\n\t * A date format to use for axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info\n\t */\n\ttooltipDateFormat?: string;\n\n}\n\nexport interface ICategoryDateAxisDataItem extends ICategoryAxisDataItem {\n}\n\nexport interface ICategoryDateAxisPrivate extends ICategoryAxisPrivate {\n\n\t/**\n\t * Current base interval.\n\t */\n\tbaseInterval: ITimeInterval;\n\n}\n\nexport interface ICategoryDateAxisEvents extends ICategoryAxisEvents {\n}\n\n\n/**\n * Category-based date axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-date-axis/} for more info\n * @important\n */\nexport class CategoryDateAxis<R extends AxisRenderer> extends CategoryAxis<R> {\n\tpublic static className: string = \"CategoryDateAxis\";\n\tpublic static classNames: Array<string> = CategoryAxis.classNames.concat([CategoryDateAxis.className]);\n\n\tdeclare public _settings: ICategoryDateAxisSettings<R>;\n\tdeclare public _privateSettings: ICategoryDateAxisPrivate;\n\tdeclare public _dataItemSettings: ICategoryDateAxisDataItem;\n\tdeclare public _events: ICategoryDateAxisEvents;\n\n\tprotected _frequency: number = 1;\n\n\tprotected _itemMap: { [index: string]: DataItem<ICategoryDateAxisDataItem> } = {};\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tthis.fields.push(\"category\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tprotected _prepareAxisItems() {\n\t\t// temp\n\t\tthis.setPrivateRaw(\"baseInterval\", this.get(\"baseInterval\"));\n\n\t\tconst renderer = this.get(\"renderer\");\n\t\tconst len = this.dataItems.length;\n\n\t\tlet startIndex = this.startIndex();\n\t\tif (startIndex > 0) {\n\t\t\tstartIndex--;\n\t\t}\n\n\t\tlet endIndex = this.endIndex();\n\t\tif (endIndex < len) {\n\t\t\tendIndex++;\n\t\t}\n\n\t\tlet maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\")!, 1 / Number.MAX_SAFE_INTEGER);\n\n\t\tlet frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));\n\t\tstartIndex = Math.floor(startIndex / frequency) * frequency;\n\t\tthis._frequency = frequency;\n\n\t\tfor (let j = 0; j < len; j++) {\n\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t}\n\n\t\tlet startTime = Number(this.dataItems[startIndex].get(\"category\"));\n\t\tlet endTime = Number(this.dataItems[endIndex - 1].get(\"category\"));\n\t\tlet realDuration = (endTime - startTime);\n\t\tif (endIndex - startIndex < maxCount) {\n\t\t\trealDuration = (endTime - startTime) - ((endTime - startTime) / this.baseDuration() - (endIndex - startIndex)) * this.baseDuration();\n\t\t}\n\n\t\t// if all items are on axis\n\t\tlet gridInterval = $time.chooseInterval(0, realDuration, maxCount, this.get(\"gridIntervals\")!);\n\n\t\tconst nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\tif ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n\t\t\tgridInterval = { ...baseInterval };\n\t\t}\n\n\t\tconst formats = this.get(\"dateFormats\")!;\n\n\t\tlet previousValue = -Infinity;\n\t\tlet previousIndex = -Infinity;\n\t\tlet previousUnitValue = -Infinity;\n\t\tlet format: string;\n\n\t\tlet selectedItems: Array<{ format: string, dataItem: DataItem<ICategoryDateAxisDataItem> }> = [];\n\t\tlet changed = false;\n\n\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\tlet dataItem = this.dataItems[i];\n\t\t\tlet index = dataItem.get(\"index\")!;\n\t\t\tlet skip = false;\n\n\t\t\tlet value = Number(dataItem.get(\"category\"));\n\t\t\tlet date = new Date(value);\n\t\t\tlet unitValue = $time.getUnitValue(date, gridInterval.timeUnit);\n\n\t\t\tformat = formats[gridInterval.timeUnit];\n\t\t\tlet added = false;\n\n\t\t\tif (gridInterval.timeUnit != \"year\" && gridInterval.timeUnit != \"week\") {\n\t\t\t\tif (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n\n\t\t\t\t\tif ($time.checkChange(value, previousValue, nextGridUnit, this._root.utc)) {\n\t\t\t\t\t\tformat = this.get(\"periodChangeDateFormats\")![gridInterval.timeUnit];\n\n\t\t\t\t\t\tif (index - frequency * 0.5 < previousIndex) {\n\t\t\t\t\t\t\tselectedItems.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselectedItems.push({ format: format, dataItem: dataItem });\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\tadded = true;\n\t\t\t\t\t\tpreviousIndex = index;\n\t\t\t\t\t\tpreviousUnitValue = unitValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet shouldAdd = false;\n\t\t\tif (gridInterval.timeUnit === \"day\" || gridInterval.timeUnit === \"week\") {\n\t\t\t\tif (index - previousIndex >= frequency) {\n\t\t\t\t\tshouldAdd = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (unitValue % gridInterval.count === 0) {\n\t\t\t\t\tif (unitValue != previousUnitValue) {\n\t\t\t\t\t\tshouldAdd = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!added && shouldAdd) {\n\t\t\t\tif (index - frequency * 0.7 < previousIndex) {\n\t\t\t\t\tif (changed) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skip) {\n\t\t\t\t\tselectedItems.push({ format: format, dataItem: dataItem });\n\t\t\t\t\tpreviousIndex = index;\n\t\t\t\t\tpreviousUnitValue = unitValue;\n\t\t\t\t}\n\t\t\t\tchanged = false;\n\n\t\t\t}\n\n\t\t\tpreviousValue = value;\n\n\t\t}\n\n\t\tif (selectedItems.length > 0) {\n\t\t\tlet f = selectedItems[0].dataItem.get(\"index\", 0);\n\n\t\t\t$array.each(selectedItems, (item) => {\n\t\t\t\tconst dataItem = item.dataItem;\n\t\t\t\tconst format = item.format;\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\t\tlet value = Number(dataItem.get(\"category\"));\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", this._root.dateFormatter.format(date, format!));\n\t\t\t\t}\n\t\t\t\tf++;\n\t\t\t\tthis._prepareDataItem(dataItem, f, frequency);\n\t\t\t})\n\n\t\t}\n\t}\n\n\t/**\n\t * Returns a duration of currently active `baseInterval` in milliseconds.\n\t *\n\t * @return Duration\n\t */\n\tpublic baseDuration(): number {\n\t\treturn $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n\t}\n\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number, _adjustPosition?: boolean): string | undefined {\n\t\t//@todo number formatter + tag\n\t\tlet dataItem = this.dataItems[this.axisPositionToIndex(position)];\n\n\t\tif (dataItem) {\n\t\t\tlet format = this.get(\"dateFormats\")![this.getPrivate(\"baseInterval\").timeUnit];\n\t\t\treturn this._root.dateFormatter.format(new Date(dataItem.get(\"category\", 0)), this.get(\"tooltipDateFormat\", format));\n\t\t}\n\t}\n\n\tprotected _updateTooltipText(tooltip: Tooltip, position: number) {\n\t\ttooltip.label.set(\"text\", this.getTooltipText(position));\n\t}\n\n}\n", "import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { IXYSeriesDataItem, XYSeries } from \"../series/XYSeries\";\n\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Axis, IAxisSettings, IAxisPrivate, IAxisDataItem, IAxisEvents } from \"./Axis\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\n\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\n\nexport interface IValueAxisSettings<R extends AxisRenderer> extends IAxisSettings<R> {\n\n\t/**\n\t * Override minimum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the minimum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmin?: number;\n\n\t/**\n\t * Override maximum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the maximum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmax?: number;\n\n\t/**\n\t * Force axis scale to be precisely at values as set in `min` and/or `max`.\n\t *\n\t * In case `min` and/or `max` is not set, the axis will fix its scale to\n\t * precise lowest and highest values available through all of the series\n\t * attached to it.\n\t *\n\t * This effectively locks the axis from auto-zooming itself when chart\n\t * is zoomed in.\n\t *\n\t * If you need to zoom to actual low/high values within currently visible\n\t * scope, use `strictMinMaxSelection` instead.\n\t *\n\t * Use `extraMin` and `extraMax` to add extra \"padding\".\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tstrictMinMax?: boolean;\n\n\t/**\n\t * Force axis to auto-zoom to exact lowest and highest values from attached\n\t * series' data items within ucurrently visible range.\n\t * \n\t * This is a good feature when your series is plotted from derivative values,\n\t * like `valueYChangeSelection` as it helps to avoid frequent jumping of\n\t * series to adjusted min and max of the axis.\n\t * \n\t * Use `extraMin` and `extraMax` to add extra \"padding\".\n\t *\n\t * @since 5.1.11\n\t */\n\tstrictMinMaxSelection?: boolean;\n\n\t/**\n\t * If set to `true` axis will use logarithmic scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\tlogarithmic?: boolean;\n\n\t/**\n\t * Treat zero values as some other value.\n\t *\n\t * Useful in situations where zero would result in error, i.e. logarithmic\n\t * scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\ttreatZeroAs?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated minimum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000` and\n\t * minimum value is `0`, the new minimum value will be `-100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMin?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated maximum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000`, the\n\t * axis will now show maximum value of `1100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMax?: number;\n\n\t/**\n\t * Base value, which indicates the threshold between \"positive\" and \"negative\"\n\t * values.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Base_value} for more info\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * Maximum number of decimals to allow in axis labels.\n\t *\n\t * This setting not only affects formatting of the labels, but also where and\n\t * how many grid/labels are placed on the axis.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tmaxPrecision?: number;\n\n\t/**\n\t * A function that can be used to specify how to configure axis fills.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_fills} for more info\n\t */\n\tfillRule?: (dataItem: DataItem<IValueAxisDataItem>) => void;\n\n\t/**\n\t * Number format to use for axis labels.\n\t *\n\t * If not set, will use format set in global number formatter.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tnumberFormat?: string;\n\n\t/**\n\t * A numeric format used for numbers displayed in axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\ttooltipNumberFormat?: string | Intl.NumberFormatOptions;\n\n\t/**\n\t * If set, will use greater precision for the axis tooltip than the one for\n\t * axis' actual labels.\n\t *\n\t * E.g. if axis displays labels with one decimal (`1.0`, `1.1`, `1.2`) setting\n\t * this setting to `1` would allow two decimals in axis tooltip, e.g. `1.15`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\textraTooltipPrecision?: number;\n\n\t/**\n\t * If your series relies on dynamically calculated values, like value\n\t * changes, percents, or total sums, set this to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Calculated_values} for more info\n\t */\n\tcalculateTotals?: boolean;\n\n\t/**\n\t * This setting can be set to an instance of another [[ValueAxis]].\n\t *\n\t * If set the grid of this axis will be synced with grid of the target axis.\n\t *\n\t * NOTE: this is not 100% guaranteed to work. In some rare cases perfect\n\t * sync might not be possible.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Syncing_grid} for more info\n\t */\n\tsyncWithAxis?: ValueAxis<AxisRenderer>;\n\n\t/**\n\t * If set to `false`, the axis won't be auto-zoomed to a selection (this\n\t * works only if the other axis is a `DateAxis` or a `CategoryAxis`).\n\t * \n\t * IMPORTANT: This setting will be ignored if both X and Y axes are\n\t * a `ValueAxis`.\n\t *\n\t * @since 5.2.20\n\t * @default true\n\t */\n\tautoZoom?: boolean;\n\n}\n\nexport interface IValueAxisDataItem extends IAxisDataItem {\n\n\t/**\n\t * Value of the data item.\n\t */\n\tvalue?: number;\n\n\t/**\n\t * End value for axis items that span multiple values, like axis ranges.\n\t */\n\tendValue?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tlabelEndValue?: number;\n\n\t/**\n\t * If set to `true` the values fo this data item will be factored in when\n\t * calculating scale of the [[ValueAxis]]. Useful for axis ranges.\n\t * \n\t * @since 5.1.4\n\t */\n\taffectsMinMax?: boolean;\n\n}\n\nexport interface IMinMaxStep {\n\tmin: number;\n\tmax: number;\n\tstep: number;\n}\n\nexport interface IValueAxisPrivate extends IAxisPrivate {\n\n\t/**\n\t * Calculated current minimum value of the axis scale.\n\t * \n\t * @readonly\n\t */\n\tmin?: number;\n\n\t/**\n\t * Calculated current maximum value of the axis scale.\n\t * \n\t * @readonly\n\t */\n\tmax?: number;\n\n\t/**\n\t * A minimum value of the axis scale.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `min` is reflecting current intermediate value, whereas `minFinal` will\n\t * show target value.\n\t * \n\t * @readonly\n\t */\n\tminFinal?: number;\n\n\t/**\n\t * A maximum value of the axis scale.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `max` is reflecting current intermediate value, whereas `maxFinal` will\n\t * show target value.\n\t * \n\t * @readonly\n\t */\n\tmaxFinal?: number;\n\n\t/**\n\t * Calculated minimum value of the currently viewable (zoomed) scope.\n\t * \n\t * @readonly\n\t */\n\tselectionMin?: number;\n\n\t/**\n\t * Calculated maximum value of the currently viewable (zoomed) scope.\n\t * \n\t * @readonly\n\t */\n\tselectionMax?: number;\n\n\t/**\n\t * A target minimum value of the viewable value scope.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `selectionMin` is reflecting current intermediate value,\n\t * whereas `selectionMinFinal` will show target value.\n\t * \n\t * @readonly\n\t */\n\tselectionMinFinal?: number;\n\n\t/**\n\t * A target maximum value of the viewable value scope.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `selectionMax` is reflecting current intermediate value,\n\t * whereas `selectionMaxFinal` will show target value.\n\t * \n\t * @readonly\n\t */\n\tselectionMaxFinal?: number;\n\n\t/**\n\t * When selection step changes, it might change during axis zoom animation.\n\t *\n\t * `selectionStepFinal` will show what step will be when animation is\n\t * finished.\n\t * \n\t * @readonly\n\t */\n\tselectionStepFinal?: number;\n\n\t/**\n\t * Value step between grid lines.\n\t * \n\t * @readonly\n\t */\n\tstep?: number;\n\n\t/**\n\t * Decimal places used when formatting axis labels.\n\t * \n\t * @readonly\n\t */\n\tstepDecimalPlaces?: number;\n\n}\n\nexport interface IValueAxisEvents extends IAxisEvents {\n\n}\n\n/**\n * Creates a value axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\n * @important\n */\nexport class ValueAxis<R extends AxisRenderer> extends Axis<R> {\n\tpublic static className: string = \"ValueAxis\";\n\tpublic static classNames: Array<string> = Axis.classNames.concat([ValueAxis.className]);\n\n\tdeclare public _settings: IValueAxisSettings<R>;\n\tdeclare public _privateSettings: IValueAxisPrivate;\n\tdeclare public _dataItemSettings: IValueAxisDataItem;\n\tdeclare public _events: IValueAxisEvents;\n\n\tprotected _dirtyExtremes: boolean = false;\n\tprotected _dirtySelectionExtremes: boolean = false;\n\tprotected _deltaMinMax: number = 1;\n\tprotected _minReal: number | undefined;\n\tprotected _maxReal: number | undefined;\n\n\tprotected _baseValue: number = 0;\n\tprotected _syncDp?: MultiDisposer;\n\tprotected _minLogAdjusted: number = 1;\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t\tthis._dirtyExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t\tthis._dirtySelectionExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tthis.setPrivateRaw(\"name\", \"value\");\n\t\tthis.addTag(\"value\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"syncWithAxis\")) {\n\t\t\tlet previousValue = this._prevSettings.syncWithAxis;\n\t\t\tif (previousValue) {\n\t\t\t\tif (this._syncDp) {\n\t\t\t\t\tthis._syncDp.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tthis._syncDp = new MultiDisposer([\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMinFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t}),\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMaxFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\n\t\tlet someDirty = false;\n\t\tif (this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n\t\t\tsomeDirty = true;\n\t\t\tthis.ghostLabel.set(\"text\", \"\");\n\t\t}\n\n\t\t//if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n\t\tif (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || someDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"strictMinMaxSelection\")) {\n\t\t\tthis._getMinMax();\n\t\t\tthis._dirtyExtremes = false;\n\t\t}\n\n\t\tif (this._dirtySelectionExtremes && !this._isPanning && this.get(\"autoZoom\", true)) {\n\t\t\tthis._getSelectionMinMax();\n\t\t\tthis._dirtySelectionExtremes = false;\n\t\t}\n\n\t\tthis._groupData();\n\n\t\tif (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n\t\t\tthis._handleRangeChange();\n\t\t\tthis._prepareAxisItems();\n\t\t\tthis._updateAxisRanges();\n\t\t}\n\n\t\tthis._baseValue = this.baseValue();\n\n\t}\n\n\tprotected _groupData() {\n\n\t}\n\n\tprotected _formatText(value: number) {\n\t\tconst numberFormat = this.get(\"numberFormat\");\n\t\tconst formatter = this.getNumberFormatter();\n\n\t\tlet text = \"\";\n\n\t\tif (numberFormat) {\n\t\t\ttext = formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\ttext = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n\t\t}\n\t\treturn text;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\n\t\t\tconst logarithmic = this.get(\"logarithmic\");\n\t\t\tconst step = this.getPrivate(\"step\")!;\n\t\t\tconst selectionMin = this.getPrivate(\"selectionMin\")!;\n\t\t\tconst selectionMax = this.getPrivate(\"selectionMax\")! + step;\n\n\t\t\tlet value = selectionMin - step;\n\t\t\tlet differencePower = 1;\n\t\t\tlet minLog = min;\n\n\t\t\tif (logarithmic) {\n\t\t\t\tvalue = this._minLogAdjusted;\n\n\t\t\t\tif (value < selectionMin) {\n\t\t\t\t\twhile (value < selectionMin) {\n\t\t\t\t\t\tvalue += step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tminLog = value;\n\n\t\t\t\tif (minLog <= 0) {\n\t\t\t\t\tminLog = 1;\n\t\t\t\t\tif (step < 1) {\n\t\t\t\t\t\tminLog = step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdifferencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;\n\n\t\t\t\tif (differencePower > 2) {\n\t\t\t\t\tvalue = Math.pow(10, Math.log(minLog) * Math.LOG10E - 5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/// minor grid\n\t\t\tconst renderer = this.get(\"renderer\");\n\t\t\tconst minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n\t\t\tconst minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n\n\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n\t\t\tconst stepAdjusted = Math.round(step / stepPower);\n\n\t\t\tlet minorGridCount = 2;\n\n\t\t\tif ($math.round(stepAdjusted / 5, 10) % 1 == 0) {\n\t\t\t\tminorGridCount = 5;\n\t\t\t}\n\n\t\t\tif ($math.round(stepAdjusted / 10, 10) % 1 == 0) {\n\t\t\t\tminorGridCount = 10;\n\t\t\t}\n\n\t\t\tlet minorStep = step / minorGridCount;\n\n\t\t\t// end of minor grid\n\t\t\tlet i = 0;\n\t\t\tlet m = 0;\n\t\t\tlet previous = -Infinity;\n\n\t\t\twhile (value < selectionMax) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\t\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", this._formatText(value));\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem);\n\n\t\t\t\tlet nextValue = value;\n\t\t\t\tif (!logarithmic) {\n\t\t\t\t\tnextValue += step;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (differencePower > 2) {\n\t\t\t\t\t\tnextValue = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 5);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnextValue += step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// minor grid\n\t\t\t\tif (minorGridEnabled) {\n\t\t\t\t\tlet minorValue = value + minorStep;\n\n\t\t\t\t\tif (logarithmic) {\n\t\t\t\t\t\tif (differencePower > 2) {\n\t\t\t\t\t\t\tlet minorMinMaxStep = this._adjustMinMax(value, nextValue, 10);\n\t\t\t\t\t\t\tminorStep = minorMinMaxStep.step;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminorValue = value + minorStep;\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (minorValue < nextValue - step * 0.00000000001) {\n\t\t\t\t\t\tlet minorDataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\t\t\tif (this.minorDataItems.length < m + 1) {\n\t\t\t\t\t\t\tminorDataItem = new DataItem(this, undefined, {});\n\t\t\t\t\t\t\tthis.minorDataItems.push(minorDataItem);\n\t\t\t\t\t\t\tthis.processDataItem(minorDataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tminorDataItem = this.minorDataItems[m];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._createAssets(minorDataItem, [\"minor\"], true);\n\t\t\t\t\t\tthis._toggleDataItem(minorDataItem, true);\n\t\t\t\t\t\tminorDataItem.setRaw(\"value\", minorValue);\n\n\t\t\t\t\t\tconst minorLabel = minorDataItem.get(\"label\");\n\t\t\t\t\t\tif (minorLabel) {\n\t\t\t\t\t\t\tif (minorLabelsEnabled) {\n\t\t\t\t\t\t\t\tminorLabel.set(\"text\", this._formatText(minorValue));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tminorLabel.setPrivate(\"visible\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._prepareDataItem(minorDataItem);\n\t\t\t\t\t\tminorValue += minorStep;\n\t\t\t\t\t\tm++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvalue = nextValue;\n\n\t\t\t\tif (previous == value) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\t\t\t\tif (stepPower < 1) {\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n\t\t\t\t\t// round value to avoid floating point issues\n\t\t\t\t\tvalue = $math.round(value, decCount);\n\t\t\t\t}\n\t\t\t\ti++;\n\n\t\t\t\tprevious = value;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t\t}\n\n\t\t\tfor (let j = m; j < this.minorDataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.minorDataItems[j], false);\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis._updateGhost();\n\t\t}\n\t}\n\n\n\tpublic _prepareDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, count?: number) {\n\t\tlet renderer = this.get(\"renderer\");\n\t\tlet value = dataItem.get(\"value\")!;\n\t\tlet endValue = dataItem.get(\"endValue\");\n\n\t\tlet position = this.valueToPosition(value);\n\n\t\tlet endPosition = position;\n\t\tlet fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\")!);\n\n\t\tif ($type.isNumber(endValue)) {\n\t\t\tendPosition = this.valueToPosition(endValue);\n\t\t\tfillEndPosition = endPosition;\n\t\t}\n\n\t\tif (dataItem.get(\"isRange\")) {\n\t\t\tif (endValue == null) {\n\t\t\t\tfillEndPosition = position;\n\t\t\t}\n\t\t}\n\n\t\tlet labelEndPosition = endPosition;\t\t\n\n\t\tlet labelEndValue = dataItem.get(\"labelEndValue\");\n\t\tif (labelEndValue != null) {\n\t\t\tlabelEndPosition = this.valueToPosition(labelEndValue);\n\t\t}\t\t\n\n\t\trenderer.updateLabel(dataItem.get(\"label\"), position, labelEndPosition, count);\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\trenderer.updateGrid(grid, position, endPosition);\n\t\tif (grid) {\n\t\t\tif (value == this.get(\"baseValue\", 0)) {\n\t\t\t\tgrid.addTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t\telse if (grid.hasTag(\"base\")) {\n\t\t\t\tgrid.removeTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t}\n\n\t\trenderer.updateTick(dataItem.get(\"tick\"), position, labelEndPosition, count);\n\t\trenderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n\t\tthis._processBullet(dataItem);\n\t\trenderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n\t\tif (!dataItem.get(\"isRange\")) {\n\t\t\tconst fillRule = this.get(\"fillRule\");\n\t\t\tif (fillRule) {\n\t\t\t\tfillRule(dataItem)\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected _handleRangeChange() {\n\t\tlet selectionMin: number = this.positionToValue(this.get(\"start\", 0));\n\t\tlet selectionMax: number = this.positionToValue(this.get(\"end\", 1));\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n\t\tthis.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n\n\t\tselectionMin = $math.round(selectionMin, stepDecimalPlaces);\n\t\tselectionMax = $math.round(selectionMax, stepDecimalPlaces);\n\n\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet step = minMaxStep.step;\n\t\tselectionMin = minMaxStep.min;\n\t\tselectionMax = minMaxStep.max;\n\n\t\tif (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n\t\t\t// do not change to setPrivate, will cause SO\n\t\t\tthis.setPrivateRaw(\"selectionMin\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMax\", selectionMax);\n\n\t\t\tthis.setPrivateRaw(\"step\", step);\n\t\t}\n\t}\n\n\t/**\n\t * Converts a relative position to a corresponding numeric value from axis\n\t * scale.\n\t *\n\t * @param   position  Relative position\n\t * @return            Value\n\t */\n\tpublic positionToValue(position: number): number {\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn position * (max - min) + min;\n\t\t}\n\t\telse {\n\t\t\treturn Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n\t\t}\n\t}\n\n\t/**\n\t * Convers value to a relative position on axis.\n\t *\n\t * @param   value  Value\n\t * @return         Relative position\n\t */\n\tpublic valueToPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic valueToFinalPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"minFinal\")!;\n\t\tconst max = this.getPrivate(\"maxFinal\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getX(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value);\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getY(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value)\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number) {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemX\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemY\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * Returns relative position of axis' `baseValue`.\n\t *\n\t * @return  Base value position\n\t */\n\tpublic basePosition(): number {\n\t\treturn this.valueToPosition(this.baseValue());\n\t}\n\n\t/**\n\t * Base value of the [[ValueAxis]], which determines positive and negative\n\t * values.\n\t *\n\t * @return Base value\n\t */\n\tpublic baseValue(): number {\n\t\tconst min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n\t\tconst max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n\t\tlet baseValue = this.get(\"baseValue\", 0);\n\n\t\tif (baseValue < min) {\n\t\t\tbaseValue = min;\n\t\t}\n\n\t\tif (baseValue > max) {\n\t\t\tbaseValue = max\n\t\t}\n\n\t\treturn baseValue;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic cellEndValue(value: number): number {\n\t\treturn value;\n\t}\n\n\tprotected fixSmallStep(step: number): number {\n\t\t// happens because of floating point error\n\t\tif (1 + step === 1) {\n\t\t\tstep *= 2;\n\t\t\treturn this.fixSmallStep(step);\n\t\t}\n\t\treturn step;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\treturn min;\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\treturn max;\n\t}\n\n\tpublic _calculateTotals() {\n\t\tif (this.get(\"calculateTotals\")) {\n\t\t\tlet series = this.series[0];\n\t\t\tif (series) {\n\t\t\t\tlet startIndex = series.startIndex();\n\n\t\t\t\tif (series.dataItems.length > 0) {\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t}\n\t\t\t\t\tlet endIndex = series.endIndex();\n\t\t\t\t\tif (endIndex < series.dataItems.length) {\n\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet field: string | undefined;\n\t\t\t\t\tlet vc: string | undefined;\n\n\t\t\t\t\tif (series.get(\"yAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueY\";\n\t\t\t\t\t\tvc = \"vcy\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"xAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueX\";\n\t\t\t\t\t\tvc = \"vcx\";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet fieldWorking = field + \"Working\";\n\n\t\t\t\t\tif (field) {\n\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\tlet sum = 0;\n\t\t\t\t\t\t\tlet total = 0;\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNaN(value)) {\n\t\t\t\t\t\t\t\t\t\t\tsum += value;\n\t\t\t\t\t\t\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNaN(value)) {\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Total\") as any, total);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Sum\") as any, sum);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"TotalPercent\") as any, value / total * 100);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _getSelectionMinMax() {\n\t\tconst min = this.getPrivate(\"minFinal\");\n\t\tconst max = this.getPrivate(\"maxFinal\");\n\n\t\tconst minDefined = this.get(\"min\");\n\t\tconst maxDefined = this.get(\"max\");\n\n\t\tlet extraMin = this.get(\"extraMin\", 0);\n\t\tlet extraMax = this.get(\"extraMax\", 0);\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tif (this.get(\"extraMin\") == null) {\n\t\t\t\textraMin = 0.1;\n\t\t\t}\n\t\t\tif (this.get(\"extraMax\") == null) {\n\t\t\t\textraMax = 0.2;\n\t\t\t}\n\t\t}\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\t\tconst selectionStrictMinMax = this.get(\"strictMinMaxSelection\");\n\t\tlet strictMinMax = this.get(\"strictMinMax\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tlet selectionMin = max;\n\t\t\tlet selectionMax = min;\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\t\tconst outOfSelection = series.getPrivate(\"outOfSelection\");\n\n\t\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\t\tif (!outOfSelection) {\n\t\t\t\t\t\t\tlet minX = series.getPrivate(\"minX\");\n\t\t\t\t\t\t\tlet maxX = series.getPrivate(\"maxX\");\n\n\t\t\t\t\t\t\t// solves #90085\n\t\t\t\t\t\t\tif (series.startIndex() != 0 || series.endIndex() != series.dataItems.length) {\n\t\t\t\t\t\t\t\tminX = undefined;\n\t\t\t\t\t\t\t\tmaxX = undefined;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinX\", minX);\n\t\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxX\", maxX);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\t\tif (!outOfSelection) {\n\n\t\t\t\t\t\t\tlet minY = series.getPrivate(\"minY\");\n\t\t\t\t\t\t\tlet maxY = series.getPrivate(\"maxY\");\n\n\t\t\t\t\t\t\t// solves #90085\n\t\t\t\t\t\t\tif (series.startIndex() != 0 || series.endIndex() != series.dataItems.length) {\n\t\t\t\t\t\t\t\tminY = undefined;\n\t\t\t\t\t\t\t\tmaxY = undefined;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinY\", minY);\n\t\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxY\", maxY);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!series.isHidden() && !series.isShowing()) {\n\t\t\t\t\t\tif ($type.isNumber(seriesMin)) {\n\t\t\t\t\t\t\tselectionMin = Math.min(selectionMin, seriesMin);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(seriesMax)) {\n\t\t\t\t\t\t\tselectionMax = Math.max(selectionMax, seriesMax);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.axisRanges.each((range) => {\n\t\t\t\tif (range.get(\"affectsMinMax\")) {\n\t\t\t\t\tlet value = range.get(\"value\");\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tselectionMin = Math.min(selectionMin, value);\n\t\t\t\t\t\tselectionMax = Math.max(selectionMax, value);\n\t\t\t\t\t}\n\t\t\t\t\tvalue = range.get(\"endValue\");\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tselectionMin = Math.min(selectionMin, value);\n\t\t\t\t\t\tselectionMax = Math.max(selectionMax, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (selectionMin > selectionMax) {\n\t\t\t\t[selectionMin, selectionMax] = [selectionMax, selectionMin]\n\t\t\t}\n\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMin = minDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMin = min;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._minReal)) {\n\t\t\t\t\tselectionMin = this._minReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMax = maxDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMax = max;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._maxReal)) {\n\t\t\t\t\tselectionMax = this._maxReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectionMin === selectionMax) {\n\t\t\t\tlet smin = selectionMin;\n\t\t\t\tselectionMin -= this._deltaMinMax;\n\t\t\t\tselectionMax += this._deltaMinMax;\n\n\t\t\t\tif(selectionMin < min){\n\t\t\t\t\tlet d = smin - min;\n\t\t\t\t\tif(d == 0){\n\t\t\t\t\t\td = this._deltaMinMax;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionMin = smin - d;\n\t\t\t\t\tselectionMax = smin + d;\n\n\t\t\t\t\tstrictMinMax = true;\n\t\t\t\t}\n\n\t\t\t\tlet minMaxStep2 = this._adjustMinMax(selectionMin, selectionMax, gridCount, strictMinMax);\n\t\t\t\tselectionMin = minMaxStep2.min;\n\t\t\t\tselectionMax = minMaxStep2.max;\n\t\t\t}\n\n\t\t\tlet selectionMinReal = selectionMin;\n\t\t\tlet selectionMaxReal = selectionMax;\n\n\t\t\tselectionMin -= (selectionMax - selectionMin) * extraMin;\n\t\t\tselectionMax += (selectionMax - selectionMin) * extraMax;\n\n\t\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount);\n\n\t\t\tselectionMin = minMaxStep.min;\n\t\t\tselectionMax = minMaxStep.max;\n\n\t\t\tselectionMin = $math.fitToRange(selectionMin, min, max);\n\t\t\tselectionMax = $math.fitToRange(selectionMax, min, max);\n\n\t\t\t// do it for the second time !important\t\t\t\n\t\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\t\tif (!strictMinMax) {\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tminMaxStep = this._syncAxes(selectionMin, selectionMax, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tif (strictMinMax) {\n\t\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\t\tselectionMin = Math.max(selectionMin, minDefined);\n\t\t\t\t}\n\n\t\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\t\tselectionMax = Math.min(selectionMax, maxDefined);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (selectionStrictMinMax) {\n\t\t\t\tselectionMin = selectionMinReal - (selectionMax - selectionMin) * extraMin;\n\t\t\t\tselectionMax = selectionMaxReal + (selectionMax - selectionMin) * extraMax;\n\t\t\t}\n\n\t\t\tif (this.get(\"logarithmic\")) {\n\n\t\t\t\tif (selectionMin <= 0) {\n\t\t\t\t\tselectionMin = selectionMinReal * (1 - Math.min(extraMin, 0.99));\n\t\t\t\t}\n\n\t\t\t\tif (selectionMin < min) {\n\t\t\t\t\tselectionMin = min;\n\t\t\t\t}\n\t\t\t\tif (selectionMax > max) {\n\t\t\t\t\tselectionMax = max;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet len = Math.min(20, Math.ceil(Math.log(this.getPrivate(\"maxZoomFactor\", 100) + 1) / Math.LN10) + 2);\n\n\t\t\tlet start = $math.round(this.valueToFinalPosition(selectionMin), len);\n\t\t\tlet end = $math.round(this.valueToFinalPosition(selectionMax), len);\n\n\t\t\tthis.setPrivateRaw(\"selectionMinFinal\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMaxFinal\", selectionMax);\n\t\t\tthis.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n\n\t\t\tthis.zoom(start, end);\n\t\t}\n\t}\n\n\n\tprotected _getMinMax() {\n\t\tlet minDefined = this.get(\"min\");\n\t\tlet maxDefined = this.get(\"max\");\n\n\t\tlet min = Infinity;\n\t\tlet max = -Infinity;\n\n\t\tlet extraMin = this.get(\"extraMin\", 0);\n\t\tlet extraMax = this.get(\"extraMax\", 0);\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tif (this.get(\"extraMin\") == null) {\n\t\t\t\textraMin = 0.1;\n\t\t\t}\n\t\t\tif (this.get(\"extraMax\") == null) {\n\t\t\t\textraMax = 0.2;\n\t\t\t}\n\t\t}\n\n\t\tlet minDiff = Infinity;\n\n\t\t$array.each(this.series, (series) => {\n\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minX\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxX\");\n\t\t\t\t}\n\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minY\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxY\");\n\t\t\t\t}\n\n\t\t\t\tif ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n\t\t\t\t\tmin = Math.min(min, seriesMin);\n\t\t\t\t\tmax = Math.max(max, seriesMax);\n\n\t\t\t\t\tlet diff = seriesMax - seriesMin;\n\n\t\t\t\t\tif (diff <= 0) {\n\t\t\t\t\t\tdiff = Math.abs(seriesMax / 100);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff < minDiff) {\n\t\t\t\t\t\tminDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.axisRanges.each((range) => {\n\t\t\tif (range.get(\"affectsMinMax\")) {\n\t\t\t\tlet value = range.get(\"value\");\n\t\t\t\tif (value != null) {\n\t\t\t\t\tmin = Math.min(min, value);\n\t\t\t\t\tmax = Math.max(max, value);\n\t\t\t\t}\n\t\t\t\tvalue = range.get(\"endValue\");\n\t\t\t\tif (value != null) {\n\t\t\t\t\tmin = Math.min(min, value);\n\t\t\t\t\tmax = Math.max(max, value);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\tif (min <= 0) {\n\t\t\t\t\tmin = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (min <= 0) {\n\t\t\t\tnew Error(\"Logarithmic value axis can not have values <= 0.\");\n\t\t\t}\n\t\t}\n\n\t\tif (min === 0 && max === 0) {\n\t\t\tmax = 0.9;\n\t\t\tmin = -0.9;\n\t\t}\n\n\t\tif ($type.isNumber(minDefined)) {\n\t\t\tmin = minDefined;\n\t\t}\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tmax = maxDefined;\n\t\t}\n\n\t\t// meaning no min/max found on series/ranges and no min/max was defined\n\t\tif (min === Infinity || max === -Infinity) {\n\t\t\tthis.setPrivate(\"minFinal\", undefined);\n\t\t\tthis.setPrivate(\"maxFinal\", undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tconst initialMin = min;\n\t\tconst initialMax = max;\n\n\t\t// adapter\n\t\tlet minAdapted = this.adapters.fold(\"min\", min);\n\t\tlet maxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\t// DateAxis does some magic here\n\t\tmin = this._fixMin(min);\n\t\tmax = this._fixMax(max);\n\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\t\t\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\n\t\t\tif (max - min !== 0) {\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._getDelta(max);\n\t\t\t}\n\n\t\t\tmin -= this._deltaMinMax;\n\t\t\tmax += this._deltaMinMax;\n\t\t}\n\n\t\t// add extras\n\t\tmin -= (max - min) * extraMin;\n\t\tmax += (max - min) * extraMax;\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\t// don't let min go below 0 if real min is >= 0\n\t\t\tif (min < 0 && initialMin >= 0) {\n\t\t\t\tmin = 0;\n\t\t\t}\n\t\t\t// don't let max go above 0 if real max is <= 0\n\t\t\tif (max > 0 && initialMax <= 0) {\n\t\t\t\tmax = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis._minReal = min;\n\t\tthis._maxReal = max;\n\t\tlet strictMinMax = this.get(\"strictMinMax\");\n\t\tlet strictMinMaxSelection = this.get(\"strictMinMaxSelection\", false);\n\t\tif (strictMinMaxSelection) {\n\t\t\tstrictMinMax = strictMinMaxSelection;\n\t\t}\n\n\t\tlet strict = strictMinMax;\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tstrict = true;\n\t\t}\n\n\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// do it for the second time with strict true (importat!)\n\t\tminMaxStep = this._adjustMinMax(min, max, gridCount, true);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// return min max if strict\n\t\tif (strictMinMax) {\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tmin = minDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = this._minReal;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tmax = maxDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax = this._maxReal;\n\t\t\t}\n\n\t\t\tif (max - min <= 0.00000001) {\n\t\t\t\tmin -= this._deltaMinMax;\n\t\t\t\tmax += this._deltaMinMax;\n\t\t\t}\n\n\t\t\tmin -= (max - min) * extraMin;\n\t\t\tmax += (max - min) * extraMax;\n\t\t}\n\n\t\tminAdapted = this.adapters.fold(\"min\", min);\n\t\tmaxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\tif (minDiff == Infinity) {\n\t\t\tminDiff = (max - min)\n\t\t}\n\n\t\t// this is to avoid floating point number error\n\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(max - min)) * Math.LOG10E)) + 5;\n\n\t\tmin = $math.round(min, decCount);\n\t\tmax = $math.round(max, decCount);\n\n\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\tif (syncWithAxis) {\n\t\t\tminMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n\t\t\tmin = minMaxStep.min;\n\t\t\tmax = minMaxStep.max;\n\t\t}\n\n\t\tthis.setPrivateRaw(\"maxZoomFactor\", Math.max(1, Math.ceil((max - min) / minDiff * this.get(\"maxZoomFactor\", 100))));\n\t\tthis._fixZoomFactor();\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tthis._minLogAdjusted = min;\n\t\t\tmin = this._minReal;\n\t\t\tmax = this._maxReal;\n\n\t\t\tif (min <= 0) {\n\t\t\t\tmin = initialMin * (1 - Math.min(extraMin, 0.99));\n\t\t\t}\n\t\t}\n\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tif (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n\t\t\t\tthis.setPrivate(\"minFinal\", min);\n\t\t\t\tthis.setPrivate(\"maxFinal\", max);\n\t\t\t\tthis._saveMinMax(min, max);\n\n\t\t\t\tconst duration = this.get(\"interpolationDuration\", 0);\n\t\t\t\tconst easing = this.get(\"interpolationEasing\");\n\n\t\t\t\tthis.animatePrivate({ key: \"min\", to: min, duration, easing });\n\t\t\t\tthis.animatePrivate({ key: \"max\", to: max, duration, easing });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _fixZoomFactor() {\n\t}\n\n\tprotected _getDelta(max: number) {\n\t\t// the number by which we need to raise 10 to get difference\n\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\n\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t// reduce this number by 10 times\n\t\tpower = power / 10;\n\n\t\tthis._deltaMinMax = power;\n\t}\n\n\tprotected _saveMinMax(_min: number, _max: number) {\n\n\t}\n\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\n\t\t// will fail if 0\n\t\tif (gridCount <= 1) {\n\t\t\tgridCount = 1;\n\t\t}\n\n\t\tgridCount = Math.round(gridCount);\n\n\t\tlet initialMin: number = min;\n\t\tlet initialMax: number = max;\n\n\t\tlet difference = max - min;\n\n\t\t// in case min and max is the same, use max\n\t\tif (difference === 0) {\n\t\t\tdifference = Math.abs(max);\n\t\t}\n\n\t\t// the number by which we need to raise 10 to get difference\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\n\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t// reduce this number by 10 times\n\t\tpower = power / 10;\n\n\t\tlet extra: number = power;\n\t\tif (strictMode) {\n\t\t\textra = 0;\n\t\t}\n\n\t\t// round down min\n\t\tif (strictMode) {\n\t\t\tmin = Math.floor(min / power) * power;\n\t\t\t// round up max\n\t\t\tmax = Math.ceil(max / power) * power;\n\t\t}\n\t\telse {\n\t\t\tmin = Math.ceil(min / power) * power - extra;\n\t\t\t// round up max\n\t\t\tmax = Math.floor(max / power) * power + extra;\n\t\t}\n\n\t\t// don't let min go below 0 if real min is >= 0\n\t\tif (min < 0 && initialMin >= 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\t// don't let max go above 0 if real max is <= 0\n\t\tif (max > 0 && initialMax <= 0) {\n\t\t\tmax = 0;\n\t\t}\n\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n\t\tpower = Math.pow(10, Math.floor(exponent));\n\t\tpower = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n\n\t\t// approximate difference between two grid lines\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n\t\t// the step should divide by  2, 5, and 10.\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\n\n\t\tif (stepDivisor > 5) {\n\t\t\tstepDivisor = 10;\n\t\t}\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\n\t\t\tstepDivisor = 5;\n\t\t}\n\n\t\t// now get real step\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n\n\t\tlet maxPrecision = this.get(\"maxPrecision\");\n\t\tif ($type.isNumber(maxPrecision)) {\n\t\t\tlet ceiledStep = $math.ceil(step, maxPrecision);\n\t\t\tif (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n\t\t\t\tstep = ceiledStep;\n\t\t\t}\n\t\t}\n\n\t\tlet decCount: number = 0;\n\t\t// in case numbers are smaller than 1\n\t\tif (stepPower < 1) {\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n\t\t\t// round step\n\t\t\tstep = $math.round(step, decCount);\n\t\t}\n\n\t\t// final min and max\n\t\tlet minCount = Math.floor(min / step);\n\n\t\tmin = $math.round(step * minCount, decCount);\n\n\t\tlet maxCount: number;\n\n\t\tif (!strictMode) {\n\t\t\tmaxCount = Math.ceil(max / step);\n\t\t}\n\t\telse {\n\t\t\tmaxCount = Math.floor(max / step);\n\t\t}\n\n\t\tif (maxCount === minCount) {\n\t\t\tmaxCount++;\n\t\t}\n\n\t\tmax = $math.round(step * maxCount, decCount);\n\n\t\tif (max < initialMax) {\n\t\t\tmax = max + step;\n\t\t}\n\n\t\tif (min > initialMin) {\n\t\t\tmin = min - step;\n\t\t}\n\n\n\t\tstep = this.fixSmallStep(step);\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number, _adjustPosition?: boolean): string | undefined {\n\t\tconst numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n\t\tconst formatter = this.getNumberFormatter();\n\t\tconst extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n\t\tconst decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n\t\tconst value = $math.round(this.positionToValue(position), decimals);\n\n\t\tif (numberFormat) {\n\t\t\treturn formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\treturn formatter.format(value, undefined, decimals);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tlet index: number | undefined = undefined;\n\t\tlet oldDiff: number;\n\t\t$array.each(series.dataItems, (dataItem, i) => {\n\t\t\tconst diff = Math.abs(dataItem.get(fieldName) - value);\n\t\t\tif (index === undefined || diff < oldDiff) {\n\t\t\t\tindex = i;\n\t\t\t\toldDiff = diff;\n\t\t\t}\n\t\t});\n\n\t\tif (index != null) {\n\t\t\treturn series.dataItems[index];\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` values.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start value\n\t * @param  end       End value\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToValues(start: number, end: number, duration?: number) {\n\t\tconst min = this.getPrivate(\"minFinal\", 0);\n\t\tconst max = this.getPrivate(\"maxFinal\", 0);\n\t\tif (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n\t\t\tthis.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n\t\t}\n\t}\n\n\n\t/**\n\t * Syncs with a target axis.\n\t *\n\t * @param  min  Min\n\t * @param  max  Max\n\t * @param  step Step\n\t */\n\tprotected _syncAxes(min: number, max: number, step: number, syncMin: number, syncMax: number, syncStep: number) {\n\t\tlet axis = this.get(\"syncWithAxis\");\n\t\tif (axis) {\n\t\t\tlet count: number = Math.round(syncMax - syncMin) / syncStep;\n\t\t\tlet currentCount = Math.round((max - min) / step);\n\n\t\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\n\t\t\t\tlet synced = false;\n\t\t\t\tlet c = 0\n\t\t\t\tlet diff = (max - min) * 0.01;\n\t\t\t\tlet omin = min;\n\t\t\t\tlet omax = max;\n\t\t\t\tlet ostep = step;\n\n\t\t\t\twhile (synced != true) {\n\t\t\t\t\tsynced = this._checkSync(omin, omax, ostep, count);\n\t\t\t\t\tc++;\n\t\t\t\t\tif (c > 500) {\n\t\t\t\t\t\tsynced = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!synced) {\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\n\t\t\t\t\t\t\tomin = min - diff * c;\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\n\t\t\t\t\t\t\t\tomin = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tomax = max + diff * c;\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\n\t\t\t\t\t\t\t\tomax = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n\t\t\t\t\t\tomin = minMaxStep.min;\n\t\t\t\t\t\tomax = minMaxStep.max;\n\t\t\t\t\t\tostep = minMaxStep.step;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmin = omin;\n\t\t\t\t\t\tmax = omax;\n\t\t\t\t\t\tstep = ostep;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns `true` if axis needs to be resunced with some other axis.\n\t */\n\tprotected _checkSync(min: number, max: number, step: number, count: number): boolean {\n\t\tlet currentCount = (max - min) / step;\n\t\tfor (let i = 1; i < count; i++) {\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\tlet max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n\t\tlet min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n\n\t\tif ($type.isNumber(max) && $type.isNumber(min)) {\n\t\t\treturn this.getPrivate(\"step\", 1) / (max - min);\n\t\t}\n\t\treturn 0.05;\n\t}\n\n}\n", "import { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport { ValueAxis, IValueAxisSettings, IValueAxisPrivate, IValueAxisDataItem, IMinMaxStep, IValueAxisEvents } from \"./ValueAxis\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $order from \"../../../core/util/Order\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $time from \"../../../core/util/Time\";\nimport type { ITimeInterval } from \"../../../core/util/Time\";\nimport type { TimeUnit } from \"../../../core/util/Time\";\n\nexport interface IDateAxisSettings<R extends AxisRenderer> extends IValueAxisSettings<R> {\n\n\t/**\n\t * Indicates granularity of data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Data_granularity} for more info\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Relative location of where axis cell starts: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `startLocation` is not supported by [[GaplessDateAxis]].\n\t *\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location of where axis cell ends: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `endLocation` is not supported by [[GaplessDateAxis]].\n\t * \n\t * @default 1\n\t */\n\tendLocation?: number;\n\n\t/**\n\t * Should axis group data items togeter dynamically?\n\t *\n\t * @default false\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupData?: boolean;\n\n\t/**\n\t * Maximum number of data items in the view before data grouping kicks in.\n\t *\n\t * @default 500\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupCount?: number;\n\n\t/**\n\t * Force data item grouping to specific interval. This interval must be within groupIntervals array for this to work.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * A list of intervals the axis is allowed to group data items into.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * A list of intervals the axis is allowed to show grid/labels on.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Grid_granularity} for more info\n\t */\n\tgridIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * Display \"period change\" labels using different format.\n\t *\n\t * If set to `true`, will use `periodChangeDateFormats` instead\n\t * of `dateFormats` for such labels, e.g. for month start.\n\t *\n\t * @default true\n\t */\n\tmarkUnitChange?: boolean;\n\n\t/**\n\t * Date formats used for intermediate labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tdateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * Date formats used for minor grid labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Minor_grid_formats} for more info\n\t * @since 5.6.0\n\t */\n\tminorDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * Date formats used for \"period change\" labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tperiodChangeDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A date format to use for axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t */\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\n\n\t/**\n\t * Time unit-specific formats to use for axis tooltip.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A value which indicates relative position within axis cell to get timestamp\n\t * for the tooltip from.\n\t *\n\t * Values are from `-1` to `1`.\n\t *\n\t * If not set, it will use `tooltipLocation` value, if `tooltipLocation`` is\n\t * not set, it will use -0.5.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipIntervalOffset?: number;\n}\n\nexport interface IDateAxisDataItem extends IValueAxisDataItem {\n}\n\nexport interface IDateAxisPrivate extends IValueAxisPrivate {\n\n\t/**\n\t * Current group interval.\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * Current base interval.\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Current grid interval.\n\t */\n\tgridInterval: ITimeInterval;\n}\n\nexport interface IDateAxisEvents extends IValueAxisEvents {\n\n\t/**\n\t * Kicks in when data grouping is on, and current group interval changes, e.g. via zooming the chart.\n\t *\n\t * @since 5.2.43\n\t */\n\tgroupintervalchanged: {}\n\n}\n\n/**\n * Creates a date axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info\n * @important\n */\nexport class DateAxis<R extends AxisRenderer> extends ValueAxis<R> {\n\tpublic static className: string = \"DateAxis\";\n\tpublic static classNames: Array<string> = ValueAxis.classNames.concat([DateAxis.className]);\n\n\tdeclare public _settings: IDateAxisSettings<R>;\n\tdeclare public _privateSettings: IDateAxisPrivate;\n\tdeclare public _dataItemSettings: IDateAxisDataItem;\n\tdeclare public _events: IDateAxisEvents;\n\n\tprotected _dataGrouped: boolean = false;\n\tprotected _seriesDataGrouped: boolean = false;\n\tprotected _groupingCalculated: boolean = false;\n\tprotected _intervalDuration: number = 1;\n\tprotected _baseDuration: number = 1;\n\n\tprotected _intervalMax: { [index: string]: number } = {};\n\tprotected _intervalMin: { [index: string]: number } = {};\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tsuper._afterNew();\n\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\tthis.on(\"baseInterval\", () => {\n\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t})\n\t}\n\n\tprotected _setBaseInterval(interval: ITimeInterval) {\n\t\tthis.setPrivateRaw(\"baseInterval\", interval);\n\t\tthis._baseDuration = $time.getIntervalDuration(interval);\n\t}\n\n\tprotected _fixZoomFactor() {\n\t\tconst maxZoomFactor = this.get(\"maxZoomFactor\");\n\t\tif (maxZoomFactor != null && maxZoomFactor != Infinity) {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", maxZoomFactor);\n\t\t}\n\t\telse {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", Math.round((this.getPrivate(\"max\", 0) - this.getPrivate(\"min\", 0)) / this.baseMainDuration()));\n\t\t}\n\t}\n\n\tprotected _groupData() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif (($type.isNumber(min) && $type.isNumber(max))) {\n\n\t\t\tthis._fixZoomFactor();\n\n\t\t\tconst groupInterval = this.getPrivate(\"groupInterval\")!;\n\t\t\tif (groupInterval) {\n\t\t\t\tthis._setBaseInterval(groupInterval);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t\t}\n\n\n\t\t\tif (this.isDirty(\"groupInterval\")) {\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\")!;\n\t\t\t\tif (groupInterval) {\n\t\t\t\t\tthis.setRaw(\"groupIntervals\", [groupInterval]);\n\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isDirty(\"groupData\")) {\n\t\t\t\tif (!this._dataGrouped) {\n\t\t\t\t\tif (this.get(\"groupData\")) {\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tthis._groupSeriesData(series);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\t\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tseries.setDataSet(mainDataSetId);\n\t\t\t\t\t\t\tseries.resetGrouping();\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._setBaseInterval(baseInterval);\n\t\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", undefined);\n\t\t\t\t\t\tthis.markDirtyExtremes();\n\t\t\t\t\t}\n\t\t\t\t\tthis._dataGrouped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _groupSeriesData(series: XYSeries) {\n\t\tif (this.get(\"groupData\") && !series.get(\"groupDataDisabled\")) {\n\n\t\t\tthis._dataGrouped = true; // helps to avoid double grouping\n\n\t\t\tthis._seriesDataGrouped = true;\n\n\t\t\t// make array of intervals which will be used;\n\t\t\tlet intervals: ITimeInterval[] = [];\n\t\t\tlet baseDuration = this.baseMainDuration();\n\n\t\t\tlet groupIntervals = this.get(\"groupIntervals\")!;\n\t\t\tif (groupIntervals) { }\n\t\t\t$array.each(groupIntervals, (interval) => {\n\t\t\t\tlet intervalDuration = $time.getIntervalDuration(interval);\n\t\t\t\tif (intervalDuration > baseDuration) {\n\t\t\t\t\tintervals.push(interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tseries._dataSets = {};\n\n\t\t\tconst key = this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!;\n\t\t\tlet fields: Array<string>;\n\n\t\t\tconst baseAxis = series.get(\"baseAxis\");\n\n\t\t\tif (series.get(\"xAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueYFields;\n\t\t\t}\n\t\t\telse if (series.get(\"yAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueXFields;\n\t\t\t}\n\n\t\t\tlet dataItems = series._mainDataItems;\n\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\n\t\t\tseries._dataSets[mainDataSetId] = dataItems;\n\n\t\t\tconst groupCallback = series.get(\"groupDataCallback\");\n\t\t\tlet groupOriginals = series.get(\"groupDataWithOriginals\", false);\n\t\t\tif (groupCallback) {\n\t\t\t\tgroupOriginals = true;\n\t\t\t}\n\n\t\t\t$array.each(intervals, (interval) => {\n\n\t\t\t\tlet previousTime = -Infinity;\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\n\t\t\t\tseries._dataSets[dataSetId] = [];\n\n\t\t\t\tlet newDataItem: DataItem<IXYSeriesDataItem>;\n\n\t\t\t\tlet sum: { [index: string]: number } = {};\n\t\t\t\tlet count: { [index: string]: number } = {};\n\n\t\t\t\tlet groupFieldValues: { [index: string]: string } = {};\n\t\t\t\tlet workingFields: { [index: string]: string } = {};\n\n\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\tgroupFieldValues[field] = series.get((field + \"Grouped\") as any);\n\t\t\t\t\tworkingFields[field] = field + \"Working\";\n\t\t\t\t})\n\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit);\n\n\t\t\t\tlet firstItem = dataItems[0];\n\t\t\t\tlet firstTime: any;\n\t\t\t\tif (firstItem) {\n\t\t\t\t\tfirstTime = dataItems[0].get(key as any);\n\t\t\t\t}\n\n\t\t\t\tlet prevNewDataItem: DataItem<IXYSeriesDataItem> | undefined;\n\t\t\t\t$array.each(dataItems, (dataItem) => {\n\t\t\t\t\tlet time = dataItem.get(key as any);\n\t\t\t\t\t//let roundedTime = $time.round(new Date(time), interval.timeUnit, interval.count, firstDay, utc, firstDate, timezone).getTime();\n\t\t\t\t\tlet roundedTime = $time.roun(time, interval.timeUnit, interval.count, this._root, firstTime);\n\t\t\t\t\tlet dataContext: any;\n\n\t\t\t\t\tif (previousTime < roundedTime - intervalDuration / 24) {\n\t\t\t\t\t\tdataContext = $object.copy(dataItem.dataContext);\n\n\t\t\t\t\t\tnewDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));\n\t\t\t\t\t\tnewDataItem.setRaw(key as any, roundedTime);\n\n\t\t\t\t\t\tseries._dataSets[dataSetId].push(newDataItem);\n\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\t\t\t\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, value);\n\t\t\t\t\t\t\t\tcount[field] = 1;\n\t\t\t\t\t\t\t\tsum[field] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.set(\"originals\", [dataItem]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprevNewDataItem = newDataItem;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet groupKey = groupFieldValues[field];\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\n\t\t\t\t\t\t\tif (value != null) {\n\n\t\t\t\t\t\t\t\tlet currentValue = newDataItem.get(field as any);\n\n\t\t\t\t\t\t\t\tswitch (groupKey) {\n\t\t\t\t\t\t\t\t\tcase \"close\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, currentValue + value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"open\":\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"low\":\n\t\t\t\t\t\t\t\t\t\tif (value < currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"high\":\n\t\t\t\t\t\t\t\t\t\tif (value > currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"average\":\n\t\t\t\t\t\t\t\t\t\tcount[field]++;\n\t\t\t\t\t\t\t\t\t\tsum[field] += value;\n\t\t\t\t\t\t\t\t\t\tlet average = sum[field] / count[field];\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, average);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"extreme\":\n\t\t\t\t\t\t\t\t\t\tif (Math.abs(value) > Math.abs(currentValue)) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, newDataItem.get(field as any));\n\t\t\t\t\t\t\t\tlet dataContext: any = $object.copy(dataItem.dataContext);\n\t\t\t\t\t\t\t\tdataContext[key as any] = roundedTime;\n\t\t\t\t\t\t\t\tnewDataItem.dataContext = dataContext;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.get(\"originals\")!.push(dataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpreviousTime = roundedTime;\n\t\t\t\t})\n\n\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (series._dataSetId) {\n\t\t\t\tseries.setDataSet(series._dataSetId);\n\t\t\t}\n\t\t\tthis.markDirtySize();\n\t\t}\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._groupingCalculated = false;\n\t\tthis._dataGrouped = false;\n\t}\n\n\t/**\n\t * Returns a time interval axis would group data to for a specified duration.\n\t *\n\t * @since 5.2.1\n\t */\n\tpublic getGroupInterval(duration: number): ITimeInterval {\n\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\tlet groupInterval = $time.chooseInterval(0, duration, this.get(\"groupCount\", Infinity), this.get(\"groupIntervals\")!);\n\t\tif ($time.getIntervalDuration(groupInterval) < $time.getIntervalDuration(baseInterval)) {\n\t\t\tgroupInterval = { ...baseInterval };\n\t\t}\n\t\treturn groupInterval;\n\t}\n\n\t/**\n\t * Return `max` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Max\n\t */\n\tpublic getIntervalMax(interval: ITimeInterval): number {\n\t\treturn this._intervalMax[interval.timeUnit + interval.count];\n\t}\n\n\t/**\n\t * Return `min` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Min\n\t */\n\tpublic getIntervalMin(interval: ITimeInterval): number {\n\t\treturn this._intervalMin[interval.timeUnit + interval.count];\n\t}\n\n\tprotected _handleRangeChange() {\n\t\tsuper._handleRangeChange();\n\n\t\tlet selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\tlet selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\n\t\tif ($type.isNumber(selectionMin) && $type.isNumber(selectionMax)) {\n\n\t\t\tif (this.get(\"endLocation\") == 0) {\n\t\t\t\tselectionMax += 1;\n\t\t\t}\n\n\t\t\tif (this.get(\"groupData\") && !this._groupingCalculated) {\n\t\t\t\tthis._groupingCalculated = true;\n\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\");\n\t\t\t\tlet current = this.getPrivate(\"groupInterval\");\n\n\t\t\t\tlet modifiedDifference = (selectionMax - selectionMin) + (this.get(\"startLocation\", 0) + (1 - this.get(\"endLocation\", 1)) * this.baseDuration());\n\n\t\t\t\tif (current) {\n\t\t\t\t\tlet duration = $time.getIntervalDuration(current);\n\t\t\t\t\tmodifiedDifference = Math.ceil(modifiedDifference / duration) * duration;\n\t\t\t\t}\n\n\t\t\t\tif (!groupInterval) {\n\t\t\t\t\tgroupInterval = this.getGroupInterval(modifiedDifference);\n\t\t\t\t}\n\n\t\t\t\tif (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count) || this._seriesDataGrouped)) {\n\t\t\t\t\tthis._seriesDataGrouped = false;\n\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", groupInterval);\n\t\t\t\t\tthis._setBaseInterval(groupInterval)\n\n\n\t\t\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\n\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\t\t\tseries.setDataSet(newId);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.markDirtyExtremes();\n\n\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\t\tconst type = \"groupintervalchanged\";\n\t\t\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\n\t\t\t\t\tconst start = $array.getFirstSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMin);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet startIndex = start.index;\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex -= 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionMax += this.baseDuration() * (1 - this.get(\"endLocation\", 1));\n\n\t\t\t\t\tconst end = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMax);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet endIndex = end.index;\n\t\t\t\t\tlet endIndex2 = endIndex;\n\n\t\t\t\t\tif (endIndex2 > 1) {\n\t\t\t\t\t\tendIndex2--;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstDataItem = series.dataItems[startIndex];\n\t\t\t\t\tconst lastDataItem = series.dataItems[endIndex2];\n\n\t\t\t\t\tlet lastDate: number | undefined;\n\t\t\t\t\tlet firstDate: number | undefined;\n\t\t\t\t\tif (firstDataItem) {\n\t\t\t\t\t\tfirstDate = firstDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastDataItem) {\n\t\t\t\t\t\tlastDate = lastDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outOfSelection = false;\n\t\t\t\t\tif (lastDate != null && firstDate != null) {\n\t\t\t\t\t\tif (lastDate < selectionMin || firstDate > selectionMax) {\n\t\t\t\t\t\t\toutOfSelection = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tseries.setPrivate(\"outOfSelection\", outOfSelection);\n\t\t\t\t\tseries.setPrivate(\"startIndex\", startIndex);\n\t\t\t\t\tseries.setPrivate(\"endIndex\", endIndex);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, _strictMode?: boolean): IMinMaxStep {\n\t\treturn { min: min, max: max, step: (max - min) / gridCount };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic intervalDuration(): number {\n\t\treturn this._intervalDuration;\n\t}\n\n\tprotected _saveMinMax(min: number, max: number) {\n\t\tlet groupInterval = this.getPrivate(\"groupInterval\");\n\n\t\tif (!groupInterval) {\n\t\t\tgroupInterval = this.get(\"baseInterval\");\n\t\t}\n\n\t\tlet id = groupInterval.timeUnit + groupInterval.count;\n\t\tthis._intervalMin[id] = min;\n\t\tthis._intervalMax[id] = max;\n\t}\n\n\tprotected _getM(timeUnit: TimeUnit) {\n\t\tif (timeUnit == \"month\" || timeUnit == \"year\" || timeUnit == \"day\") {\n\t\t\treturn 1.05;\n\t\t}\n\t\treturn 1.01;\n\t}\n\n\tprotected _getMinorInterval(interval: ITimeInterval): ITimeInterval | undefined {\n\t\tlet minorGridInterval: ITimeInterval | undefined;\n\t\tlet count = interval.count;\n\t\tlet timeUnit = interval.timeUnit;\n\t\tif (count > 1) {\n\t\t\tif (count == 10) {\n\t\t\t\tcount = 5;\n\t\t\t}\n\t\t\telse if (count == 15) {\n\t\t\t\tcount = 5;\n\t\t\t}\n\t\t\telse if (count == 12) {\n\t\t\t\tcount = 2;\n\t\t\t}\n\t\t\telse if (count == 6) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\telse if (count == 30) {\n\t\t\t\tcount = 10;\n\t\t\t}\n\t\t\telse if (count < 10) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tminorGridInterval = { timeUnit: timeUnit, count: count };\n\t\t}\n\t\tif (timeUnit == \"week\") {\n\t\t\tif (this.getPrivate(\"baseInterval\")?.timeUnit != \"week\") {\n\t\t\t\tminorGridInterval = { timeUnit: \"day\", count: 1 };\n\t\t\t}\n\t\t}\n\t\treturn minorGridInterval;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tconst root = this._root;\n\t\t\tconst selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\t\tconst selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\t\t\tconst renderer = this.get(\"renderer\");\n\t\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\t\tlet value = selectionMin;\n\t\t\tlet i = 0;\n\n\t\t\tconst intervals = this.get(\"gridIntervals\")!;\n\t\t\tlet gridInterval = $time.chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);\n\n\t\t\tif ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n\t\t\t\tgridInterval = { ...baseInterval };\n\t\t\t}\n\n\t\t\tconst intervalDuration = $time.getIntervalDuration(gridInterval);\n\t\t\tthis._intervalDuration = intervalDuration;\n\n\t\t\tconst nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n\t\t\tconst utc = root.utc;\n\t\t\tconst timezone = root.timezone;\n\n\t\t\t//value = $time.round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, firstDay, utc, new Date(min), timezone).getTime();\n\t\t\tvalue = $time.roun(selectionMin - intervalDuration, gridInterval.timeUnit, gridInterval.count, root, min);\n\t\t\tlet previousValue = value - intervalDuration;\n\t\t\tlet format: string | Intl.DateTimeFormatOptions;\n\t\t\tconst formats = this.get(\"dateFormats\")!;\n\n\t\t\tthis.setPrivateRaw(\"gridInterval\", gridInterval);\n\n\t\t\tconst minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n\t\t\tconst minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n\n\t\t\tlet minorGridInterval: ITimeInterval | undefined;\n\t\t\tlet minorDuration = 0;\n\n\t\t\tif (minorGridEnabled) {\n\t\t\t\tminorGridInterval = this._getMinorInterval(gridInterval);\n\t\t\t\tminorDuration = $time.getIntervalDuration(minorGridInterval);\n\t\t\t}\n\n\t\t\tlet m = 0;\n\t\t\twhile (value < selectionMax + intervalDuration) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\t\t\t\tdataItem.setRaw(\"labelEndValue\", undefined);\n\n\t\t\t\tlet endValue = value + $time.getDuration(gridInterval.timeUnit, gridInterval.count * this._getM(gridInterval.timeUnit));\n\t\t\t\t//endValue = $time.round(new Date(endValue), gridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\tendValue = $time.roun(endValue, gridInterval.timeUnit, 1, root);\n\n\t\t\t\tdataItem.setRaw(\"endValue\", endValue);\n\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tformat = formats[gridInterval.timeUnit];\n\t\t\t\tif (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n\t\t\t\t\tif (gridInterval.timeUnit != \"year\") {\n\t\t\t\t\t\tif ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\n\t\t\t\t\t\t\tformat = this.get(\"periodChangeDateFormats\")![gridInterval.timeUnit];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", root.dateFormatter.format(date, format!));\n\t\t\t\t}\n\n\t\t\t\tlet count = gridInterval.count;\n\t\t\t\t// so that labels of week would always be at the beginning of the grid\n\t\t\t\tif (gridInterval.timeUnit == \"week\") {\n\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", value);\n\t\t\t\t}\n\n\t\t\t\tif (minorGridEnabled) {\n\t\t\t\t\tcount = 1;\n\t\t\t\t\tlet timeUnit = gridInterval.timeUnit;\n\t\t\t\t\tif (timeUnit == \"week\") {\n\t\t\t\t\t\ttimeUnit = \"day\";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet labelEndValue = value + $time.getDuration(timeUnit, this._getM(timeUnit));\n\t\t\t\t\t//labelEndValue = $time.round(new Date(labelEndValue), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tlabelEndValue = $time.roun(labelEndValue, timeUnit, 1, root);\n\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", labelEndValue);\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem, count);\n\n\t\t\t\tpreviousValue = value;\n\t\t\t\tvalue = endValue;\n\n\t\t\t\t// min grid\n\t\t\t\tif (minorGridInterval) {\n\t\t\t\t\tconst minorTimeUnit = minorGridInterval.timeUnit;\n\t\t\t\t\tconst minorCount = minorGridInterval.count;\n\t\t\t\t\tconst mmm = this._getM(minorTimeUnit);\n\n\t\t\t\t\t//let minorValue = $time.round(new Date(previousValue + minorDuration * this._getM(minorGridInterval.timeUnit)), minorGridInterval.timeUnit, minorGridInterval.count, firstDay, utc, new Date(previousValue), timezone).getTime();\n\t\t\t\t\tlet minorValue = $time.roun(previousValue + minorDuration * mmm, minorTimeUnit, minorCount, root, previousValue);\n\n\t\t\t\t\tlet previousMinorValue: number | undefined;\n\t\t\t\t\tlet minorFormats = this.get(\"minorDateFormats\", this.get(\"dateFormats\"))!;\n\n\t\t\t\t\twhile (minorValue < value - 0.01 * minorDuration) {\n\t\t\t\t\t\tlet minorDataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\t\t\tif (this.minorDataItems.length < m + 1) {\n\t\t\t\t\t\t\tminorDataItem = new DataItem(this, undefined, {});\n\t\t\t\t\t\t\tthis.minorDataItems.push(minorDataItem);\n\t\t\t\t\t\t\tthis.processDataItem(minorDataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tminorDataItem = this.minorDataItems[m];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._createAssets(minorDataItem, [\"minor\"], true);\n\n\t\t\t\t\t\tthis._toggleDataItem(minorDataItem, true);\n\n\t\t\t\t\t\tminorDataItem.setRaw(\"value\", minorValue);\n\n\t\t\t\t\t\tlet minorEndValue = minorValue + $time.getDuration(minorTimeUnit, minorCount * mmm);\n\t\t\t\t\t\t//minorEndValue = $time.round(new Date(minorEndValue), minorGridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\t\tminorEndValue = $time.roun(minorEndValue, minorTimeUnit, 1, root);\n\n\t\t\t\t\t\tminorDataItem.setRaw(\"endValue\", minorEndValue);\n\n\t\t\t\t\t\tlet date = new Date(minorValue);\n\n\t\t\t\t\t\tformat = minorFormats[minorTimeUnit];\n\n\t\t\t\t\t\tconst minorLabel = minorDataItem.get(\"label\");\n\n\t\t\t\t\t\tif (minorLabel) {\n\t\t\t\t\t\t\tif (minorLabelsEnabled) {\n\t\t\t\t\t\t\t\tminorLabel.set(\"text\", root.dateFormatter.format(date, format!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tminorLabel.setPrivate(\"visible\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._prepareDataItem(minorDataItem, 1);\n\n\t\t\t\t\t\tif (minorValue == previousMinorValue) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpreviousMinorValue = minorValue;\n\t\t\t\t\t\tminorValue = minorEndValue;\n\t\t\t\t\t\tm++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value == previousValue) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t\t}\n\n\t\t\tfor (let j = m; j < this.minorDataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.minorDataItems[j], false);\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._updateGhost();\n\t}\n\n\tprotected _updateFinals(start: number, end: number) {\n\t\tthis.setPrivateRaw(\"selectionMinFinal\", this.positionToValue(start));\n\t\tthis.setPrivateRaw(\"selectionMaxFinal\", this.positionToValue(end));\n\t}\n\n\tprotected _getDelta() {\n\t\tthis._deltaMinMax = this.baseDuration() / 2;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t//let startTime = $time.round(new Date(min), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet startTime = $time.roun(min, timeUnit, baseInterval.count, this._root);\n\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\t\treturn startTime + (endTime - startTime) * this.get(\"startLocation\", 0);\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t//let startTime = $time.round(new Date(max), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet startTime = $time.roun(max, timeUnit, baseInterval.count, this._root);\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\n\t\treturn startTime + (endTime - startTime) * this.get(\"endLocation\", 1);\n\t}\n\n\tprotected _updateDates(_date: number, _series: XYSeries) {\n\n\t}\n\n\t/**\n\t * Returns a duration of currently active `baseInterval` in milliseconds.\n\t * \n\t * @return Duration\n\t */\n\tpublic baseDuration(): number {\n\t\treturn this._baseDuration;\n\t\t//return $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n\t}\n\n\t/**\n\t * Returns a duration of user-defined `baseInterval` in milliseconds.\n\t *\n\t * @return Duration\n\t */\n\tpublic baseMainDuration(): number {\n\t\treturn $time.getIntervalDuration(this.get(\"baseInterval\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(dataItem: DataItem<IXYSeriesDataItem>, fields: Array<string>) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\tif (!dataItem.open) {\n\t\t\tdataItem.open = {};\n\t\t}\n\t\tif (!dataItem.close) {\n\t\t\tdataItem.close = {};\n\t\t}\n\n\t\t$array.each(fields, (field) => {\n\t\t\tlet value = dataItem.get(field as any);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet startTime = dataItem.open![field];\n\t\t\t\tlet endTime = dataItem.close![field];\n\t\t\t\t// this is done to save cpu, as rounding is quite expensive, especially with timezone set. \n\t\t\t\t// if value is between prev start and end, it means it didn't change, all is fine.\n\t\t\t\tif (value >= startTime && value <= endTime) {\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\t\t\tconst count = baseInterval.count;\n\t\t\t\t\t//startTime = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tstartTime = $time.roun(value, timeUnit, count, this._root);\n\t\t\t\t\tendTime = startTime + $time.getDuration(timeUnit, count * this._getM(timeUnit));\n\t\t\t\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\n\t\t\t\t\tdataItem.open![field] = startTime;\n\t\t\t\t\tdataItem.close![field] = endTime;\n\t\t\t\t}\n\n\t\t\t\tthis._updateDates(startTime, dataItem.component as XYSeries);\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, location: number): number {\n\t\tlet value = this.positionToValue(position);\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\tif (!$type.isNaN(value)) {\n\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\tconst utc = this._root.utc;\n\t\t\tconst timezone = this._root.timezone;\n\t\t\tconst count = baseInterval.count;\n\n\t\t\t//value = $time.round(new Date(value), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\t\t\tvalue = $time.roun(value, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n\n\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, new Date(value), firstDay, utc, timezone);\n\t\t\tif (timezone) {\n\t\t\t\t//value = $time.round(new Date(value + this.baseDuration() * 0.05), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\t\t\t\tvalue = $time.roun(value + this.baseDuration() * 0.05, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n\t\t\t\tduration = $time.getDateIntervalDuration(baseInterval, new Date(value + duration * location), firstDay, utc, timezone);\n\t\t\t}\n\n\t\t\treturn this.valueToPosition(value + duration * location);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * NOTE: Unless `adjustPosition` (2nd parameter) is set to `false`, the method\n\t * will adjust position by `tooltipIntervalOffset`.\n\t *\n\t * @param  position        Position\n\t * @param  adjustPosition  Adjust position\n\t * @return                 Tooltip text\n\t */\n\tpublic getTooltipText(position: number, adjustPosition?: boolean): string | undefined {\n\t\t//@todo number formatter + tag\n\t\tif (this.getPrivate(\"min\") != null) {\n\t\t\tlet format = this.get(\"tooltipDateFormats\")![this.getPrivate(\"baseInterval\").timeUnit];\n\t\t\tlet value = this.positionToValue(position);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);\n\n\t\t\t\tif (adjustPosition !== false) {\n\t\t\t\t\tdate = new Date(value + this.get(\"tooltipIntervalOffset\", -this.get(\"tooltipLocation\", 0.5)) * duration)\n\t\t\t\t}\n\n\t\t\t\treturn this._root.dateFormatter.format(date, this.get(\"tooltipDateFormat\", format));\n\t\t\t}\n\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number, location?: number, snap?: boolean): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tif (location == null) {\n\t\t\tlocation = 0.5;\n\t\t}\n\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tconst result = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\tlet diValue = 0;\n\t\t\tif (dataItem.open) {\n\t\t\t\tdiValue = dataItem.open[fieldName];\n\t\t\t}\n\n\t\t\treturn $order.compare(diValue, value);\n\t\t});\n\n\t\tif (snap || series.get(\"snapTooltip\")) {\n\t\t\tlet first = series.dataItems[result.index - 1];\n\t\t\tlet second = series.dataItems[result.index];\n\n\t\t\tif (first && second) {\n\t\t\t\tif (first.open && second.close) {\n\t\t\t\t\tlet open = first.open[fieldName];\n\t\t\t\t\tlet close = second.close[fieldName];\n\n\t\t\t\t\tif (Math.abs(value - open) > Math.abs(value - close)) {\n\t\t\t\t\t\treturn second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (first) {\n\t\t\t\treturn first;\n\t\t\t}\n\n\t\t\tif (second) {\n\t\t\t\treturn second;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst dataItem = series.dataItems[result.index - 1];\n\n\t\t\tif (dataItem) {\n\t\t\t\tif (dataItem.open && dataItem.close) {\n\t\t\t\t\tlet open = dataItem.open[fieldName];\n\t\t\t\t\tlet close = dataItem.close[fieldName];\n\n\t\t\t\t\tif (value >= open && value <= close) {\n\t\t\t\t\t\treturn dataItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(dataItem: DataItem<IXYSeriesDataItem>, nextItem: DataItem<IXYSeriesDataItem>, autoGapCount: number, fieldName: string): boolean {\n\t\tconst value1 = dataItem.get(fieldName as any);\n\t\tconst value2 = nextItem.get(fieldName as any);\n\n\t\tif (value2 - value1 > this.baseDuration() * autoGapCount) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` dates.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start Date\n\t * @param  end       End Date\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToDates(start: Date, end: Date, duration?: number) {\n\t\tthis.zoomToValues(start.getTime(), end.getTime(), duration);\n\t}\n\n\t/**\n\t * Returns a `Date` object corresponding to specific position within plot\n\t * area.\n\t *\n\t * @param   position  Pposition\n\t * @return            Date\n\t */\n\tpublic positionToDate(position: number): Date {\n\t\treturn new Date(this.positionToValue(position));\n\t}\n\n\t/**\n\t * Returns a relative position within plot area that corresponds to specific\n\t * date.\n\t *\n\t * @param   date  Date\n\t * @return        Position\n\t */\n\tpublic dateToPosition(date: Date): number {\n\t\treturn this.valueToPosition(date.getTime());\n\t}\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @since 5.2.30\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\tlet max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n\t\tlet min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n\n\t\tif ($type.isNumber(max) && $type.isNumber(min)) {\n\t\t\treturn this._intervalDuration / (max - min);\n\t\t}\n\t\treturn 0.05;\n\t}\n}\n", "import type { AxisRenderer } from \"./AxisRenderer\";\r\n\r\nimport { DateAxis, IDateAxisSettings, IDateAxisPrivate, IDateAxisDataItem, IDateAxisEvents } from \"./DateAxis\";\r\nimport { DataItem } from \"../../../core/render/Component\";\r\nimport type { XYSeries } from \"../../xy/series/XYSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\"\r\nimport * as $order from \"../../../core/util/Order\";\r\nimport * as $time from \"../../../core/util/Time\";\r\nimport * as $type from \"../../../core/util/Type\";\r\nimport * as $math from \"../../../core/util/Math\";\r\nimport type { ITimeInterval } from \"../../../core/util/Time\";\r\n\r\nexport interface IGaplessDateAxisSettings<R extends AxisRenderer> extends IDateAxisSettings<R> {\r\n\r\n}\r\n\r\nexport interface IGaplessDateAxisDataItem extends IDateAxisDataItem {\r\n\r\n\t/**\r\n\t * An index of a data item.\r\n\t */\r\n\tindex?: number\r\n\r\n}\r\n\r\nexport interface IGaplessDateAxisPrivate extends IDateAxisPrivate {\r\n\r\n}\r\n\r\nexport interface IGaplessDateAxisEvents extends IDateAxisEvents {\r\n}\r\n\r\n/**\r\n * A version of a [[DateAxis]] which removes intervals that don't have any data\r\n * items in them.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/gapless-date-axis/} for more info\r\n * @important\r\n */\r\nexport class GaplessDateAxis<R extends AxisRenderer> extends DateAxis<R> {\r\n\tpublic static className: string = \"GaplessDateAxis\";\r\n\tpublic static classNames: Array<string> = DateAxis.classNames.concat([GaplessDateAxis.className]);\r\n\r\n\tdeclare public _settings: IGaplessDateAxisSettings<R>;\r\n\tdeclare public _privateSettings: IGaplessDateAxisPrivate;\r\n\tdeclare public _dataItemSettings: IGaplessDateAxisDataItem;\r\n\tdeclare public _events: IGaplessDateAxisEvents;\r\n\r\n\tprotected _frequency: number = 1;\r\n\tprotected _m: number = 0;\r\n\r\n\tpublic _afterNew() {\r\n\t\tthis.valueFields.push(\"date\");\r\n\t\tsuper._afterNew();\r\n\t}\r\n\r\n\tpublic _dates: Array<number> = [];\r\n\tpublic _customDates?: Array<number>;\r\n\r\n\r\n\tpublic _getDates(): Array<number> {\r\n\t\tif (this._customDates) {\r\n\t\t\treturn this._customDates;\r\n\t\t}\r\n\t\treturn this._dates;\r\n\t}\r\n\r\n\tprotected _updateDates(date: number, series: XYSeries) {\r\n\t\tif (!series.get(\"ignoreMinMax\")) {\r\n\t\t\tconst dates = this._getDates();\r\n\t\t\tconst result = $array.getSortedIndex(dates, (x) => $order.compare(x, date));\r\n\t\t\tif (!result.found) {\r\n\t\t\t\t$array.insertIndex(dates, result.index, date);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _updateAllDates() {\r\n\t\tif (!this._customDates) {\r\n\t\t\tconst dates = this._dates;\r\n\t\t\tdates.length = 0;\r\n\r\n\t\t\t$array.each(this.series, (series) => {\r\n\t\t\t\tlet field = \"valueX\";\r\n\t\t\t\tif (series.get(\"yAxis\") == this) {\r\n\t\t\t\t\tfield = \"valueY\"\r\n\t\t\t\t}\r\n\t\t\t\t$array.each(series.dataItems, (dataItem) => {\r\n\t\t\t\t\tlet value = dataItem.get(field as any);\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tif (dataItem.open) {\r\n\t\t\t\t\t\t\tthis._updateDates(dataItem.open![field], series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tconst extraMax = this.get(\"extraMax\", 0);\r\n\t\t\tconst extraMin = this.get(\"extraMin\", 0);\r\n\r\n\t\t\tlet len = dates.length;\r\n\r\n\t\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\r\n\t\t\tconst baseCount = baseInterval.count;\r\n\t\t\tconst timeUnit = baseInterval.timeUnit;\r\n\r\n\t\t\tif (extraMax > 0) {\r\n\t\t\t\tconst extra = len * extraMax;\r\n\t\t\t\tlet time = dates[len - 1];\r\n\t\t\t\tif ($type.isNumber(time)) {\r\n\t\t\t\t\tfor (let i = len - 1; i < len + extra; i++) {\r\n\t\t\t\t\t\ttime += $time.getDuration(timeUnit, baseCount * this._getM(timeUnit));\r\n\t\t\t\t\t\t//time = $time.round(new Date(time), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\t\t\t\ttime = $time.roun(time, timeUnit, baseCount, this._root);\r\n\t\t\t\t\t\tdates.push(time);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (extraMin > 0) {\r\n\t\t\t\tconst extra = len * extraMin;\r\n\t\t\t\tlet time = dates[0];\r\n\t\t\t\tif ($type.isNumber(time)) {\r\n\t\t\t\t\tfor (let i = 0; i < extra; i++) {\r\n\t\t\t\t\t\ttime -= $time.getDuration(timeUnit, baseCount);\r\n\t\t\t\t\t\t//time = $time.round(new Date(time), timeUnit, baseCount, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\t\t\t\ttime = $time.roun(time, timeUnit, baseCount, this._root);\r\n\t\t\t\t\t\tdates.unshift(time);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convers value to a relative position on axis.\r\n\t *\r\n\t * @param   value  Value\r\n\t * @return         Relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tconst dates = this._getDates();\r\n\t\tconst startLocation = this.get(\"startLocation\", 0);\r\n\t\tconst endLocation = this.get(\"endLocation\", 1);\r\n\t\tconst len = dates.length - startLocation - (1 - endLocation);\r\n\t\tconst result = $array.getSortedIndex(dates, (x) => $order.compare(x, value));\r\n\t\tlet index = result.index;\r\n\r\n\t\tif (result.found) {\r\n\t\t\treturn (index - startLocation) / len;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (index > 0) {\r\n\t\t\t\tindex -= 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet itemValue = dates[index];\r\n\r\n\t\t\tlet d = 0;\r\n\t\t\tif (itemValue > value && value > this.getPrivate(\"min\", 0)) {\r\n\t\t\t\td = itemValue - value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\td = value - itemValue;\r\n\t\t\t}\r\n\r\n\t\t\treturn (index - startLocation) / len + d / this.baseDuration() / len;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value from axis scale to index.\r\n\t * \r\n\t * @param  value  Value\r\n\t * @return        Index\r\n\t */\r\n\tpublic valueToIndex(value: number): number {\r\n\t\tconst dates = this._getDates();\r\n\r\n\t\tconst result = $array.getSortedIndex(dates, (x) => $order.compare(x, value));\r\n\t\tlet index = result.index;\r\n\r\n\t\tif (result.found) {\r\n\t\t\treturn index;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (index > 0) {\r\n\t\t\t\tindex -= 1;\r\n\t\t\t}\r\n\t\t\treturn index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to a corresponding numeric value from axis\r\n\t * scale.\r\n\t *\r\n\t * @param   position  Relative position\r\n\t * @return            Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\t\tconst startLocation = this.get(\"startLocation\", 0);\r\n\t\tconst endLocation = this.get(\"endLocation\", 1);\r\n\t\tconst dates = this._getDates();\r\n\t\tlet len = Math.round(dates.length - startLocation - (1 - endLocation));\r\n\t\tlet index = position * len;\r\n\t\tlet findex = Math.floor(index);\r\n\t\tif (findex < 0) {\r\n\t\t\tfindex = 0;\r\n\t\t}\r\n\r\n\t\tif (findex > len - 1) {\r\n\t\t\tfindex = len - 1\r\n\t\t}\r\n\r\n\t\treturn dates[findex] + (index - findex + startLocation) * this.baseDuration();\r\n\t}\r\n\r\n\tprotected _fixZoomFactor() {\r\n\t\tthis.setPrivateRaw(\"maxZoomFactor\", this._getDates().length - this.get(\"startLocation\", 0) - (1 - this.get(\"endLocation\", 1)));\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific `start` and `end` dates.\r\n\t *\r\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n\t *\r\n\t * @param  start     Start Date\r\n\t * @param  end       End Date\r\n\t * @param  duration  Duration in milliseconds\r\n\t */\r\n\r\n\tpublic zoomToDates(start: Date, end: Date, duration?: number) {\r\n\t\tconst dates = this._getDates();\r\n\t\tconst len = dates.length;\r\n\t\tlet result = $array.getSortedIndex(dates, (x) => $order.compare(x, start.getTime()));\r\n\t\t\r\n\t\tlet startValue = dates[Math.min(result.index, len - 1)];\r\n\r\n\t\tresult = $array.getSortedIndex(dates, (x) => $order.compare(x, end.getTime()));\r\n\t\tlet endValue = dates[result.index];\r\n\r\n\t\tif(result.index >= len){\r\n\t\t\tendValue = dates[len - 1] + this.baseDuration();\r\n\t\t}\r\n\r\n\t\tthis.zoomToValues(startValue, endValue, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific `start` and `end` values.\r\n\t *\r\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n\t *\r\n\t * @param  start     Start value\r\n\t * @param  end       End value\r\n\t * @param  duration  Duration in milliseconds\r\n\t */\r\n\tpublic zoomToValues(start: number, end: number, duration?: number) {\r\n\t\tconst min = this.getPrivate(\"min\", 0);\r\n\t\tconst max = this.getPrivate(\"max\", 0);\r\n\t\tstart = $math.fitToRange(start, min, max);\r\n\t\tend = $math.fitToRange(end, min, max);\r\n\t\tthis.zoom(this.valueToPosition(start), this.valueToPosition(end), duration);\r\n\t}\r\n\r\n\r\n\tprotected _prepareAxisItems() {\r\n\t\tlet startTime = this.getPrivate(\"selectionMin\", 0);\r\n\t\tlet endTime = this.getPrivate(\"selectionMax\", 0);\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\r\n\t\t\tif (this._seriesValuesDirty) {\r\n\t\t\t\tthis._seriesValuesDirty = false;\r\n\t\t\t\tthis._updateAllDates();\r\n\t\t\t}\r\n\r\n\t\t\tconst root = this._root;\r\n\t\t\tconst utc = root.utc;\r\n\t\t\tconst timezone = root.timezone;\r\n\t\t\tconst dates = this._getDates();\r\n\t\t\tconst renderer = this.get(\"renderer\");\r\n\t\t\tconst len = dates.length;\r\n\t\t\tconst baseDuration = this.baseDuration();\r\n\r\n\t\t\tlet startIndex = this.valueToIndex(startTime);\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tstartIndex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet endIndex = this.valueToIndex(endTime);\r\n\t\t\tif (endIndex < len - 1) {\r\n\t\t\t\tendIndex++;\r\n\t\t\t}\r\n\t\t\tlet maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\")!, 1 / Number.MAX_SAFE_INTEGER);\r\n\t\t\tlet frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));\r\n\t\t\tfrequency = Math.max(1, frequency);\r\n\r\n\t\t\tstartIndex = Math.floor(startIndex / frequency) * frequency;\r\n\r\n\t\t\tthis._frequency = frequency;\r\n\r\n\t\t\t$array.each(this.dataItems, (dataItem) => {\r\n\t\t\t\tthis._toggleDataItem(dataItem, false);\r\n\t\t\t})\r\n\r\n\t\t\t$array.each(this.minorDataItems, (dataItem) => {\r\n\t\t\t\tthis._toggleDataItem(dataItem, false);\r\n\t\t\t})\r\n\r\n\t\t\tlet realDuration = (endTime - startTime) - ((endTime - startTime) / baseDuration - (endIndex - startIndex)) * baseDuration;\r\n\r\n\t\t\t// if all items are on axis\r\n\t\t\tlet gridInterval = $time.chooseInterval(0, realDuration, maxCount, this.get(\"gridIntervals\")!);\r\n\r\n\t\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\r\n\t\t\tlet intervalDuration = $time.getIntervalDuration(gridInterval);\r\n\r\n\t\t\tif (intervalDuration < baseDuration) {\r\n\t\t\t\tgridInterval = { ...baseInterval };\r\n\t\t\t\tintervalDuration = $time.getIntervalDuration(gridInterval);\r\n\t\t\t}\r\n\r\n\t\t\tthis._intervalDuration = intervalDuration;\r\n\r\n\t\t\tconst timeUnit = gridInterval.timeUnit;\r\n\t\t\tconst formats = this.get(\"dateFormats\")!;\r\n\r\n\t\t\tlet firstTime = Date.now();\r\n\r\n\t\t\tif (dates[0]) {\r\n\t\t\t\tfirstTime = dates[0];\r\n\t\t\t}\r\n\r\n\t\t\t//let value = $time.round(new Date(this.getPrivate(\"selectionMin\", 0)), timeUnit, gridInterval.count, firstDay, utc, firstDate, timezone).getTime();\r\n\t\t\tlet value = $time.roun(this.getPrivate(\"selectionMin\", 0), timeUnit, gridInterval.count, root, firstTime);\r\n\r\n\t\t\tconst minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\r\n\t\t\tconst minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\r\n\r\n\t\t\tlet minorGridInterval: ITimeInterval | undefined;\r\n\t\t\tlet minorDuration = 0;\r\n\t\t\tlet previousDataItem: DataItem<IGaplessDateAxisDataItem> | undefined;\r\n\r\n\t\t\tif (minorGridEnabled) {\r\n\t\t\t\tminorGridInterval = this._getMinorInterval(gridInterval);\r\n\t\t\t\tminorDuration = $time.getIntervalDuration(minorGridInterval);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet selectedItems: Array<number> = this._getIndexes(value, this.getPrivate(\"selectionMax\", value) + intervalDuration, gridInterval, this.getPrivate(\"min\", value));\r\n\t\t\tif (selectedItems.length > 0) {\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tthis._m = 0;\r\n\t\t\t\tlet previousValue = value - intervalDuration * 10;\r\n\t\t\t\tconst nextGridUnit = $time.getNextUnit(timeUnit);\r\n\r\n\t\t\t\t// MINOR GRID\r\n\t\t\t\tif (minorGridInterval) {\r\n\t\t\t\t\tlet first = dates[selectedItems[0]];\r\n\t\t\t\t\tthis._addMinorGrid(first - intervalDuration, first, minorDuration, minorGridInterval);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minDistance = renderer.axisLength() / renderer.gridCount() * 0.5;\r\n\r\n\t\t\t\t$array.each(selectedItems, (index) => {\r\n\t\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\r\n\t\t\t\t\tif (this.dataItems.length < i + 1) {\r\n\t\t\t\t\t\tdataItem = new DataItem<this[\"_dataItemSettings\"]>(this, undefined, {});\r\n\t\t\t\t\t\tthis._dataItems.push(dataItem);\r\n\t\t\t\t\t\tthis.processDataItem(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tdataItem = this.dataItems[i];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet value = dates[index];\r\n\t\t\t\t\tlet date = new Date(value);\r\n\r\n\t\t\t\t\tlet endValue = value;\r\n\t\t\t\t\tif (i < selectedItems.length - 1) {\r\n\t\t\t\t\t\tendValue = dates[selectedItems[i + 1]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tendValue += intervalDuration;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.setRaw(\"value\", value);\r\n\t\t\t\t\tdataItem.setRaw(\"endValue\", endValue);\r\n\t\t\t\t\tdataItem.setRaw(\"index\", i);\r\n\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", undefined);\r\n\r\n\t\t\t\t\tlet format = formats[timeUnit];\r\n\t\t\t\t\tif (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\r\n\t\t\t\t\t\tif (timeUnit != \"year\") {\r\n\t\t\t\t\t\t\tif ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\r\n\t\t\t\t\t\t\t\tformat = this.get(\"periodChangeDateFormats\")![timeUnit];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._createAssets(dataItem, []);\r\n\r\n\t\t\t\t\tconst label = dataItem.get(\"label\");\r\n\t\t\t\t\tif (label) {\r\n\t\t\t\t\t\tlabel.set(\"text\", root.dateFormatter.format(date, format!));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._toggleDataItem(dataItem, true);\r\n\r\n\t\t\t\t\tlet count = gridInterval.count;\r\n\r\n\t\t\t\t\t// so that labels of week would always be at the beginning of the grid\r\n\t\t\t\t\tif (timeUnit == \"week\") {\r\n\t\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", value);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (minorGridEnabled) {\r\n\t\t\t\t\t\tlet timeUnit2 = gridInterval.timeUnit;\r\n\t\t\t\t\t\tif (timeUnit2 == \"week\") {\r\n\t\t\t\t\t\t\ttimeUnit2 = \"day\";\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (count > 1 || gridInterval.timeUnit == \"week\") {\r\n\t\t\t\t\t\t\t//let labelEndValue = $time.round(new Date(value), timeUnit2, 1, firstDay, utc, undefined, timezone).getTime() + $time.getDuration(timeUnit2, this._getM(timeUnit2));\r\n\t\t\t\t\t\t\tlet labelEndValue = $time.roun(value, timeUnit2, 1, root) + $time.getDuration(timeUnit2, this._getM(timeUnit2));\r\n\t\t\t\t\t\t\tlet index = this.valueToIndex(labelEndValue)\r\n\t\t\t\t\t\t\tlabelEndValue = dates[index];\r\n\t\t\t\t\t\t\tif (labelEndValue == value) {\r\n\t\t\t\t\t\t\t\tlet next = dates[index + 1];\r\n\t\t\t\t\t\t\t\tif (next) {\r\n\t\t\t\t\t\t\t\t\tlabelEndValue = next;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlabelEndValue += minorDuration;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", labelEndValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._prepareDataItem(dataItem, count);\r\n\r\n\t\t\t\t\tif (label && previousDataItem) {\r\n\t\t\t\t\t\tif (renderer.getPrivate(\"letter\") == \"X\") {\r\n\t\t\t\t\t\t\tlet previousLabel = previousDataItem.get(\"label\");\r\n\t\t\t\t\t\t\tif (previousLabel) {\r\n\t\t\t\t\t\t\t\tlet x = label.x();\r\n\t\t\t\t\t\t\t\tlet previousX = previousLabel.x();\r\n\r\n\t\t\t\t\t\t\t\tif (x - previousX < minDistance) {\r\n\t\t\t\t\t\t\t\t\tlet worse = this._pickWorse(previousDataItem, dataItem, gridInterval)\r\n\t\t\t\t\t\t\t\t\tif (worse) {\r\n\t\t\t\t\t\t\t\t\t\tworse.get(\"label\")?.setPrivate(\"visible\", false);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// todo y?\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// MINOR GRID\r\n\t\t\t\t\tif (minorGridInterval) {\r\n\t\t\t\t\t\tthis._addMinorGrid(value, endValue, minorDuration, minorGridInterval);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti++;\r\n\r\n\t\t\t\t\tif (label && label.getPrivate(\"visible\")) {\r\n\t\t\t\t\t\tpreviousDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpreviousValue = value;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t$array.each(this.series, (series) => {\r\n\t\t\t\tif (series.inited) {\r\n\t\t\t\t\tseries._markDirtyAxes();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._updateGhost();\r\n\t}\r\n\r\n\tprotected _pickWorse(dataItemA: DataItem<IGaplessDateAxisDataItem>, dataItemB: DataItem<IGaplessDateAxisDataItem>, interval: ITimeInterval): DataItem<IGaplessDateAxisDataItem> {\r\n\t\tconst timeUnit = interval.timeUnit;\r\n\r\n\t\tconst valueA = dataItemA.get(\"value\", 0);\r\n\t\tconst valueB = dataItemB.get(\"value\", 0);\r\n\r\n\t\tif (timeUnit == \"hour\") {\r\n\t\t\tif (new Date(valueA).getDate() != new Date(valueB).getDate()) {\r\n\t\t\t\treturn dataItemA;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dataItemB;\r\n\t}\r\n\r\n\tprotected _addMinorGrid(startValue: number, endValue: number, minorDuration: number, gridInterval: ITimeInterval) {\r\n\t\tconst minorFormats = this.get(\"minorDateFormats\", this.get(\"dateFormats\"))!;\r\n\t\tconst mTimeUnit = gridInterval.timeUnit;\r\n\t\tlet value = startValue + $time.getDuration(mTimeUnit, this._getM(mTimeUnit));\r\n\t\t//value = $time.round(new Date(value), mTimeUnit, 1, firstDay, utc, undefined, timezone).getTime();\r\n\t\tvalue = $time.roun(value, mTimeUnit, 1, this._root);\r\n\r\n\t\tlet maxValue = endValue - minorDuration * 0.5;\r\n\r\n\t\tlet minorSelectedItems: Array<number> = this._getIndexes(value, maxValue, gridInterval, value);\r\n\t\tconst dates = this._getDates();\r\n\r\n\t\t$array.each(minorSelectedItems, (index) => {\r\n\t\t\tlet minorDataItem: DataItem<this[\"_dataItemSettings\"]>;\r\n\t\t\tif (this.minorDataItems.length < this._m + 1) {\r\n\t\t\t\tminorDataItem = new DataItem<this[\"_dataItemSettings\"]>(this, undefined, {});\r\n\t\t\t\tthis.minorDataItems.push(minorDataItem);\r\n\t\t\t\tthis.processDataItem(minorDataItem);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tminorDataItem = this.minorDataItems[this._m];\r\n\t\t\t}\r\n\r\n\t\t\tvalue = dates[index];\r\n\t\t\tminorDataItem.setRaw(\"value\", value);\r\n\t\t\tminorDataItem.setRaw(\"endValue\", value + minorDuration);\r\n\t\t\tminorDataItem.setRaw(\"index\", index);\r\n\r\n\t\t\tthis._createAssets(minorDataItem, [\"minor\"], true);\r\n\r\n\t\t\tconst label = minorDataItem.get(\"label\");\r\n\t\t\tif (label) {\r\n\t\t\t\tif (this.get(\"renderer\").get(\"minorLabelsEnabled\")) {\r\n\t\t\t\t\tlet date = new Date(value);\r\n\t\t\t\t\tlet format = minorFormats[mTimeUnit];\r\n\t\t\t\t\tlabel.set(\"text\", this._root.dateFormatter.format(date, format!));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabel.setPrivate(\"visible\", false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._toggleDataItem(minorDataItem, true);\r\n\t\t\tthis._prepareDataItem(minorDataItem, 1);\r\n\t\t\tthis._m++;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tprotected _getIndexes(value: number, maxValue: number, interval: ITimeInterval, firstValue: number): Array<number> {\r\n\t\tconst items: Array<number> = [];\r\n\t\tconst timeUnit = interval.timeUnit;\r\n\t\tconst count = interval.count;\r\n\t\tconst mmm = this._getM(timeUnit);\r\n\r\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\r\n\r\n\t\tconst root = this._root;\r\n\t\tconst dates = this._getDates();\r\n\r\n\t\tlet c = count - 1;\r\n\t\tlet previousValue = -Infinity;\r\n\r\n\t\tlet duration = $time.getDuration(timeUnit, mmm);\r\n\t\tlet fullDuration = $time.getDuration(timeUnit, count * mmm);\r\n\t\tlet originalValue = value;\r\n\r\n\t\tif (timeUnit == \"day\") {\r\n\t\t\tvalue = firstValue;\r\n\t\t}\r\n\r\n\t\twhile (value <= maxValue) {\r\n\t\t\t//value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\tvalue = $time.roun(value, timeUnit, count, root);\r\n\r\n\t\t\tlet index = this.valueToIndex(value);\r\n\t\t\tlet realValue = dates[index];\r\n\r\n\t\t\tif (timeUnit == \"day\" && baseInterval.timeUnit == \"day\") {\r\n\t\t\t\tif (this._hasDate(value)) {\r\n\t\t\t\t\tc++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c == count) {\r\n\t\t\t\t\tif (value >= originalValue - fullDuration * 2) {\r\n\t\t\t\t\t\t$array.move(items, index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tc = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvalue += duration;\r\n\t\t\t\t//value = $time.round(new Date(value), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\t\tvalue = $time.roun(value, timeUnit, 1, root);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (realValue < value) {\r\n\t\t\t\t\tfor (let i = index, len = dates.length; i < len; i++) {\r\n\t\t\t\t\t\trealValue = dates[i];\r\n\t\t\t\t\t\tif (realValue >= value) {\r\n\t\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$array.move(items, index);\r\n\r\n\t\t\t\tvalue += fullDuration;\r\n\t\t\t\t//value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\t\tvalue = $time.roun(value, timeUnit, count, root);\r\n\t\t\t}\r\n\r\n\t\t\tif (value == previousValue) {\r\n\t\t\t\tvalue += fullDuration + duration;\r\n\t\t\t\t//value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\r\n\t\t\t\tvalue = $time.roun(value, timeUnit, count, root);\r\n\t\t\t}\r\n\t\t\tif (value == previousValue) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tpreviousValue = value;\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t}\r\n\r\n\tprotected _hasDate(time: number) {\r\n\t\tconst result = $array.getSortedIndex(this._getDates(), (date) => {\r\n\t\t\treturn $order.compareNumber(date, time);\r\n\t\t});\r\n\r\n\t\treturn result.found;\r\n\t}\r\n\r\n}", "import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { TimeUnit } from \"../../../core/util/Time\"\n\nimport { ValueAxis, IValueAxisSettings, IValueAxisPrivate, IValueAxisDataItem, IValueAxisEvents, IMinMaxStep } from \"./ValueAxis\";\n\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $math from \"../../../core/util/Math\";\n\nexport interface IDurationAxisSettings<R extends AxisRenderer> extends IValueAxisSettings<R> {\n\n\t/**\n\t * A base unit (granularity) of data.\n\t *\n\t * Used to indicate what are the base units of your data.\n\t *\n\t * Available options: `\"millisecond\"`, `\"second\"` (default), `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/#Base_unit} for more info\n\t * @default \"second\"\n\t */\n\tbaseUnit?: TimeUnit\n\n}\n\nexport interface IDurationAxisDataItem extends IValueAxisDataItem {\n}\n\nexport interface IDurationAxisPrivate extends IValueAxisPrivate {\n\n\t/**\n\t * A format to used by axis to format its labels.\n\t *\n\t * @readonly\n\t */\n\tdurationFormat: string;\n\n}\n\nexport interface IDurationAxisEvents extends IValueAxisEvents {\n}\n\n/**\n * Creates a duration axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/duration-axis/} for more info\n * @important\n */\nexport class DurationAxis<R extends AxisRenderer> extends ValueAxis<R> {\n\tpublic static className: string = \"DurationAxis\";\n\tpublic static classNames: Array<string> = ValueAxis.classNames.concat([DurationAxis.className]);\n\n\tdeclare public _settings: IDurationAxisSettings<R>;\n\tdeclare public _privateSettings: IDurationAxisPrivate;\n\tdeclare public _dataItemSettings: IDurationAxisDataItem;\n\tdeclare public _events: IDurationAxisEvents;\n\n\tprotected _dataGrouped: boolean = false;\n\tprotected _groupingCalculated: boolean = false;\n\tprotected _intervalDuration: number = 1;\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tsuper._afterNew();\n\t}\n\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\n\t\tlet minMaxStep: IMinMaxStep;\n\n\t\tconst durationFormatter = this.getDurationFormatter();\n\t\tconst baseUnit = this.get(\"baseUnit\");\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\n\t\tthis.setRaw(\"maxPrecision\", 0);\n\n\t\tif (baseUnit == \"millisecond\" || baseUnit == \"second\" || baseUnit == \"minute\" || baseUnit == \"hour\") {\n\t\t\t// will fail if 0\n\t\t\tif (gridCount <= 1) {\n\t\t\t\tgridCount = 1;\n\t\t\t}\n\n\t\t\tgridCount = Math.round(gridCount);\n\n\t\t\t//let initialMin: number = min;\n\t\t\t//let initialMax: number = max;\n\n\t\t\tlet difference = max - min;\n\n\t\t\t// in case min and max is the same, use max\n\t\t\tif (difference === 0) {\n\t\t\t\tdifference = Math.abs(max);\n\t\t\t}\n\n\t\t\tlet step = difference / gridCount;\n\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\n\t\t\tlet realDivisor = 1;\n\n\t\t\tif (baseUnit == \"hour\") {\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\n\t\t\t}\n\n\t\t\tfor (let divisor of divisors) {\n\t\t\t\tif (difference / divisor > gridCount) {\n\t\t\t\t\trealDivisor = divisor;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\n\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\n\t\t\tlet reducedCount = count / power;\n\n\t\t\t// find closest to divisor\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\n\t\t\tcount = closest * power;\n\n\t\t\tstep = realDivisor * count;\n\n\t\t\tmin = Math.floor(min / step) * step;\n\t\t\tmax = Math.ceil(max / step) * step;\n\n\t\t\t/*\n\t\t\tcausese SO with seconds\n\t\t\tif (strictMode) {\n\t\t\t\tmin -= step;\n\t\t\t\tif (min < 0 && initialMin >= 0) {\n\t\t\t\t\tmin = 0;\n\t\t\t\t}\n\t\t\t\tmax += step;\n\n\t\t\t\tif (max > 0 && initialMax <= 0) {\n\t\t\t\t\tmax = 0;\n\t\t\t\t}\n\t\t\t}*/\n\t\t\tminMaxStep = { min: min, max: max, step: step };\n\t\t}\n\t\telse {\n\t\t\tminMaxStep = super._adjustMinMax(min, max, gridCount, strictMode);\n\t\t}\n\n\t\t// choose duration formatter based on step\n\t\tthis.setPrivateRaw(\"durationFormat\", durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, baseUnit));\n\n\t\treturn minMaxStep;\n\t}\n\n\tprotected _formatText(value: number) {\n\t\tconst formatter = this.getDurationFormatter();\n\t\treturn formatter.format(value, this.getPrivate(\"durationFormat\"), this.get(\"baseUnit\"));\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number, _adjustPosition?: boolean): string | undefined {\n\t\tconst formatter = this.getDurationFormatter();\n\t\tconst extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n\t\tconst decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n\t\tconst value = $math.round(this.positionToValue(position), decimals);\n\n\t\treturn formatter.format(value, this.getPrivate(\"durationFormat\"), this.get(\"baseUnit\"));\n\t}\n}\n", "import { Entity, IEntitySettings, IEntityPrivate } from \"../../../core/util/Entity\";\nimport type { Sprite } from \"../../../core/render/Sprite\";\nimport type { Axis } from \"./Axis\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport * as $object from \"../../../core/util/Object\";\n\nexport interface IAxisBulletSettings extends IEntitySettings {\n\n\t/**\n\t * Relative location of the bullet within the cell.\n\t *\n\t * `0` - beginning, `0.5` - middle, `1` - end.\n\t */\n\tlocation?: number;\n\n\t/**\n\t * A visual element of the bullet.\n\t */\n\tsprite: Sprite;\n\n\t/**\n\t * Indicates if the bullet should be stacked on top of another bullet if it's\n\t * on the same position.\n\t * \n\t * Will work on horizontal or vertical axes only.\n\t *\n\t * @since 5.2.28\n\t * @default false\n\t */\n\tstacked?: boolean;\n\n}\n\nexport interface IAxisBulletPrivate extends IEntityPrivate {\n}\n\n/**\n * Draws a bullet on an axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info\n */\nexport class AxisBullet extends Entity {\n\n\t/**\n\t * Target axis object.\n\t */\n\tpublic axis: Axis<AxisRenderer> | undefined;\n\n\tdeclare public _settings: IAxisBulletSettings;\n\tdeclare public _privateSettings: IAxisBulletPrivate;\n\n\tpublic static className: string = \"AxisBullet\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([AxisBullet.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tconst sprite = this.get(\"sprite\");\n\n\t\tif (this.isDirty(\"sprite\")) {\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setAll({ position: \"absolute\", role: \"figure\" });\n\t\t\t\tthis._disposers.push(sprite);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"location\")) {\n\t\t\tconst dataItem = sprite.dataItem;\n\t\t\tif (this.axis && sprite && dataItem) {\n\t\t\t\tthis.axis._prepareDataItem(dataItem as any)\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tconst axis = this.axis;\n\t\tif (axis) {\n\t\t\t$object.each(axis._bullets, (key, bullet) => {\n\t\t\t\tif (bullet.uid == this.uid) {\n\t\t\t\t\tdelete axis._bullets[key];\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n", "import { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport type { IPoint } from \"../../../core/util/IPoint\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Template } from \"../../../core/util/Template\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\n\nexport interface IAxisRendererXSettings extends IAxisRendererSettings {\n\n\t/**\n\t * If set to `true` the axis will be drawn on the opposite side of the plot\n\t * area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_position} for more info\n\t * @default false\n\t */\n\topposite?: boolean;\n\n\t/**\n\t * If set to `true`, all axis elements (ticks, labels) will be drawn inside\n\t * plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels_ticks_inside_plot_area} for more info\n\t * @default false\n\t */\n\tinside?: boolean;\n}\n\nexport interface IAxisRendererXPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Used to render horizontal axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n * @important\n */\nexport class AxisRendererX extends AxisRenderer {\n\n\tpublic static className: string = \"AxisRendererX\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererX.className]);\n\n\tdeclare public _settings: IAxisRendererXSettings;\n\tdeclare public _privateSettings: IAxisRendererXPrivate;\n\n\tdeclare public readonly labelTemplate: Template<AxisLabel>;\n\n\tpublic thumb: Rectangle = Rectangle.new(this._root, { width: p100, isMeasured: false, themeTags: [\"axis\", \"x\", \"thumb\"] });\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\n\t\tconst gridTemplate = this.grid.template;\n\t\tgridTemplate.set(\"height\", p100);\n\t\tgridTemplate.set(\"width\", 0);\n\t\tgridTemplate.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(0, graphics.height());\n\t\t});\n\n\t\tthis.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(graphics.width(), 0);\n\t\t});\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tconst axis = this.axis;\n\t\taxis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n\t\taxis.ghostLabel.set(\"x\", -1000);\n\n\t\tconst opposite = \"opposite\"\n\t\tconst inside = \"inside\";\n\n\t\tif (this.isDirty(opposite) || this.isDirty(inside)) {\n\t\t\tconst chart = this.chart;\n\t\t\tconst axisChildren = axis.children;\n\n\t\t\tif (this.get(inside)) {\n\t\t\t\taxis.addTag(inside);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxis.removeTag(inside);\n\t\t\t}\n\n\t\t\tif (chart) {\n\t\t\t\tif (this.get(opposite)) {\n\t\t\t\t\tconst children = chart.topAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.insertIndex(0, axis);\n\t\t\t\t\t}\n\t\t\t\t\taxis.addTag(opposite);\n\t\t\t\t\taxisChildren.moveValue(this);\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst children = chart.bottomAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.moveValue(axis);\n\t\t\t\t\t}\n\t\t\t\t\taxis.removeTag(opposite);\n\n\t\t\t\t\taxisChildren.moveValue(this, 0);\n\n\t\t\t\t}\n\n\t\t\t\taxis.ghostLabel._applyThemes();\n\t\t\t\tthis.labels.each((label) => {\n\t\t\t\t\tlabel._applyThemes();\n\t\t\t\t})\n\t\t\t\tthis.root._markDirtyRedraw();\n\t\t\t}\n\t\t\taxis.markDirtySize();\n\t\t}\n\n\t\tthis.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n\t}\n\n\n\tprotected _getPan(point1: IPoint, point2: IPoint): number {\n\t\treturn (point2.x - point1.x) / this.width();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic toAxisPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tposition -= this._ls;\n\n\t\tposition = position * (end - start) / this._lc;\n\t\tif (!this.get(\"inversed\")) {\n\t\t\tposition = start + position;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic toGlobalPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tif (!this.get(\"inversed\")) {\n\t\t\tposition = position - start;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\tposition = position / (end - start) * this._lc\n\n\t\tposition += this._ls;\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateLC() {\n\t\tconst axis = this.axis;\n\t\tconst parent = axis.parent;\n\t\tif (parent) {\n\t\t\tconst w = parent.innerWidth();\n\t\t\tthis._lc = this.axisLength() / w;\n\t\t\tthis._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updatePositions() {\n\t\tconst axis = this.axis;\n\t\tconst x = axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent!.get(\"paddingLeft\", 0);\n\t\taxis.gridContainer.set(\"x\", x);\n\t\taxis.topGridContainer.set(\"x\", x);\n\t\taxis.bulletsContainer.set(\"y\", this.y());\n\n\t\tconst chart = axis.chart;\n\t\tif (chart) {\n\t\t\tconst plotContainer = chart.plotContainer;\n\t\t\tconst axisHeader = axis.axisHeader;\n\t\t\tlet width = axis.get(\"marginLeft\", 0);\n\n\t\t\tlet x = axis.x() - width;\n\n\t\t\tconst parent = axis.parent;\n\t\t\tif (parent) {\n\t\t\t\tx -= parent.get(\"paddingLeft\", 0);\n\t\t\t}\n\n\t\t\tif (axisHeader.children.length > 0) {\n\t\t\t\twidth = axis.axisHeader.width();\n\t\t\t\taxis.set(\"marginLeft\", width + 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxisHeader.set(\"width\", width);\n\t\t\t}\n\t\t\taxisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\tif (axis.get(\"width\") == null) {\n\t\t\taxis.set(\"width\", p100);\n\t\t};\n\t\tconst verticalLayout = this._root.verticalLayout;\n\t\taxis.set(\"layout\", verticalLayout);\n\t\taxis.labelsContainer.set(\"width\", p100);\n\t\taxis.axisHeader.setAll({ layout: verticalLayout });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.axis.width();\n\t}\n\n\t/**\n\t * Converts axis relative position to actual coordinate in pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\ttick.set(\"x\", this.positionToCoordinate(position));\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\ttick.set(\"y\", p100);\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttick.set(\"y\", 0);\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(0, length);\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location)\n\t\t\t}\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tconst inside = label.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tconst opposite = this.get(\"opposite\");\n\t\t\tif (opposite) {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t\tlabel.set(\"y\", p100);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlabel.set(\"y\", undefined);\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"y\", 0)\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlabel.set(\"x\", this.positionToCoordinate(position));\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tgrid.set(\"x\", this.positionToCoordinate(position));\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tlet bulletPosition = this.axis.roundAxisPosition(position, location);\n\t\t\t\tlet previousBullet = this.axis._bullets[bulletPosition];\n\t\t\t\tlet d = -1;\n\t\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\t\td = 1;\n\t\t\t\t}\n\n\t\t\t\tif (bullet.get(\"stacked\")) {\n\t\t\t\t\tif (previousBullet) {\n\t\t\t\t\t\tlet previousSprite = previousBullet.get(\"sprite\");\n\t\t\t\t\t\tif (previousSprite) {\n\t\t\t\t\t\t\tsprite.set(\"y\", previousSprite.y() + previousSprite.height() * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsprite.set(\"y\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.axis._bullets[bulletPosition] = bullet;\n\t\t\t\tsprite.set(\"x\", this.positionToCoordinate(position));\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet x0 = this.positionToCoordinate(position);\n\t\t\tlet x1 = this.positionToCoordinate(endPosition);\n\n\t\t\tthis.fillDrawMethod(fill, x0, x1);\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, x0: number, x1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\t//display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n\t\t\t// using for holes, so can not be rectangle\n\t\t\tconst h = this.axis!.gridContainer.height();\n\t\t\tconst w = this.width();\n\n\t\t\tif (x1 < x0) {\n\t\t\t\t[x1, x0] = [x0, x1];\n\t\t\t}\n\t\t\tif (x0 > w || x1 < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\tconst limit = 10000;\n\n\t\t\tx0 = Math.max(-limit, x0);\n\t\t\tx1 = Math.min(limit, x1);\n\t\t\t*/\n\n\t\t\tdisplay.moveTo(x0, 0);\n\t\t\tdisplay.lineTo(x1, 0);\n\t\t\tdisplay.lineTo(x1, h);\n\t\t\tdisplay.lineTo(x0, h);\n\t\t\tdisplay.lineTo(x0, 0);\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tthis._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 })\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(tooltip: Tooltip) {\n\t\tconst inside = this.get(\"inside\");\n\t\tconst num = 100000;\n\n\t\tlet global = this._display.toGlobal({ x: 0, y: 0 });\n\t\tlet x = global.x;\n\t\tlet y = 0;\n\t\tlet w = this.axisLength();\n\t\tlet h = num;\n\n\t\tlet pointerOrientation: \"up\" | \"down\" = \"up\";\n\n\t\tif (this.get(\"opposite\")) {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"down\";\n\t\t\t\ty = global.y - num;\n\t\t\t\th = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"up\";\n\t\t\t\ty = global.y;\n\t\t\t\th = num;\n\t\t\t}\n\t\t}\n\n\t\tconst bounds = { left: x, right: x + w, top: y, bottom: y + h };\n\t\tconst oldBounds = tooltip.get(\"bounds\");\n\n\t\tif (!$utils.sameBounds(bounds, oldBounds)) {\n\t\t\ttooltip.set(\"bounds\", bounds);\n\t\t\ttooltip.set(\"pointerOrientation\", pointerOrientation);\n\t\t}\n\t}\n}\n", "import { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport type { IPoint } from \"../../../core/util/IPoint\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport type { Graphics } from \"../../../core/render/Graphics\";\nimport type { AxisLabel } from \"./AxisLabel\";\nimport type { AxisBullet } from \"./AxisBullet\";\nimport type { Grid } from \"./Grid\";\nimport type { AxisTick } from \"./AxisTick\";\nimport type { Tooltip } from \"../../../core/render/Tooltip\";\nimport type { Template } from \"../../../core/util/Template\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n\nexport interface IAxisRendererYSettings extends IAxisRendererSettings {\n\n\t/**\n\t * If set to `true` the axis will be drawn on the opposite side of the plot\n\t * area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_position} for more info\n\t * @default false\n\t */\n\topposite?: boolean;\n\n\t/**\n\t * If set to `true`, all axis elements (ticks, labels) will be drawn inside\n\t * plot area.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n}\n\nexport interface IAxisRendererYPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Used to render vertical axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\n * @important\n */\nexport class AxisRendererY extends AxisRenderer {\n\n\tpublic static className: string = \"AxisRendererY\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererY.className]);\n\n\tdeclare public _settings: IAxisRendererYSettings;\n\tdeclare public _privateSettings: IAxisRendererYPrivate;\n\n\tdeclare public readonly labelTemplate: Template<AxisLabel>;\n\n\tprotected _downY?: number;\n\n\tpublic thumb: Rectangle = Rectangle.new(this._root, { height: p100, isMeasured: false, themeTags: [\"axis\", \"y\", \"thumb\"] });\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"y\"]);\n\t\tif (this._settings.opposite) {\n\t\t\tthis._settings.themeTags.push(\"opposite\");\n\t\t}\n\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"Y\");\n\n\t\tconst gridTemplate = this.grid.template;\n\t\tgridTemplate.set(\"width\", p100);\n\t\tgridTemplate.set(\"height\", 0);\n\t\tgridTemplate.set(\"draw\", (display, graphics) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(graphics.width(), 0);\n\t\t});\n\n\t\tthis.set(\"draw\", (display, renderer) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(0, renderer.height());\n\t\t});\n\t}\n\n\tprotected _getPan(point1: IPoint, point2: IPoint): number {\n\t\treturn (point1.y - point2.y) / this.height();\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tconst axis = this.axis;\n\t\taxis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n\t\taxis.ghostLabel.set(\"y\", -1000);\n\n\t\tconst thumb = this.thumb;\n\t\tconst opposite = \"opposite\";\n\t\tconst inside = \"inside\";\n\t\tconst chart = this.chart;\n\n\t\tif (this.isDirty(opposite) || this.isDirty(inside)) {\n\n\t\t\tconst axisChildren = axis.children;\n\n\t\t\tif (this.get(inside)) {\n\t\t\t\taxis.addTag(inside);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxis.removeTag(inside);\n\t\t\t}\n\n\t\t\tif (chart) {\n\t\t\t\tif (this.get(opposite)) {\n\t\t\t\t\tconst children = chart.rightAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.moveValue(axis, 0);\n\t\t\t\t\t}\n\t\t\t\t\taxis.addTag(opposite);\n\t\t\t\t\taxisChildren.moveValue(this, 0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst children = chart.leftAxesContainer.children;\n\t\t\t\t\tif (children.indexOf(axis) == -1) {\n\t\t\t\t\t\tchildren.moveValue(axis);\n\t\t\t\t\t}\n\t\t\t\t\taxis.removeTag(opposite);\n\n\t\t\t\t\taxisChildren.moveValue(this);\n\t\t\t\t}\n\n\t\t\t\taxis.ghostLabel._applyThemes();\n\t\t\t\tthis.labels.each((label) => {\n\t\t\t\t\tlabel._applyThemes();\n\t\t\t\t})\n\t\t\t\tthis.root._markDirtyRedraw();\n\t\t\t}\n\t\t\taxis.markDirtySize();\n\t\t}\n\n\t\tconst w = axis.labelsContainer.width();\n\n\t\tif (chart) {\n\t\t\tif (this.get(opposite)) {\n\t\t\t\tthumb.set(\"centerX\", 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthumb.set(\"centerX\", w);\n\t\t\t}\n\t\t}\n\n\t\tthumb.setPrivate(\"width\", w);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\tif (axis.get(\"height\") == null) {\n\t\t\taxis.set(\"height\", p100);\n\t\t}\n\t\tconst horizontalLayout = this._root.horizontalLayout;\n\t\taxis.set(\"layout\", horizontalLayout);\n\t\taxis.labelsContainer.set(\"height\", p100);\n\t\taxis.axisHeader.set(\"layout\", horizontalLayout);\n\t}\n\n\tpublic _updatePositions() {\n\t\tconst axis = this.axis;\n\t\tconst y = axis.y() - $utils.relativeToValue(axis.get(\"centerY\", 0), axis.height());\n\t\taxis.gridContainer.set(\"y\", y);\n\t\taxis.topGridContainer.set(\"y\", y);\n\t\taxis.bulletsContainer.set(\"x\", this.x());\n\n\t\tconst chart = axis.chart;\n\t\tif (chart) {\n\t\t\tconst plotContainer = chart.plotContainer;\n\t\t\tconst axisHeader = axis.axisHeader;\n\t\t\tlet height = axis.get(\"marginTop\", 0);\n\n\t\t\tif (axisHeader.children.length > 0) {\n\t\t\t\theight = axis.axisHeader.height();\n\t\t\t\taxis.set(\"marginTop\", height + 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\taxisHeader.set(\"height\", height);\n\t\t\t}\n\t\t\taxisHeader.setAll({ y: axis.y() - height, x: -1, width: plotContainer.width() + 2 });\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.axis.innerHeight();\n\t}\n\n\t/**\n\t * Converts axis relative position to actual coordinate in pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location)\n\t\t\t}\n\n\t\t\tconst opposite = this.get(\"opposite\");\n\t\t\tconst inside = label.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tif (opposite) {\n\t\t\t\tlabel.set(\"x\", 0);\n\n\t\t\t\tif (inside) {\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (inside) {\n\t\t\t\t\tlabel.set(\"x\", 0);\n\t\t\t\t\tlabel.set(\"position\", \"absolute\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlabel.set(\"x\", undefined);\n\t\t\t\t\tlabel.set(\"position\", \"relative\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlabel.set(\"y\", this.positionToCoordinate(position));\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tgrid.set(\"y\", this.positionToCoordinate(position));\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\ttick.set(\"y\", this.positionToCoordinate(position));\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\", this.get(\"inside\", false));\n\n\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\ttick.set(\"x\", 0);\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\t\t\t}\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(length, 0);\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\tif (sprite) {\n\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\n\t\t\t\tlet bulletPosition = this.axis.roundAxisPosition(position, location);\n\t\t\t\tlet previousBullet = this.axis._bullets[bulletPosition];\n\t\t\t\tlet d = 1;\n\t\t\t\tif (this.get(\"opposite\")) {\n\t\t\t\t\td = -1;\n\t\t\t\t}\n\n\t\t\t\tif (bullet.get(\"stacked\")) {\n\t\t\t\t\tif (previousBullet) {\n\t\t\t\t\t\tlet previousSprite = previousBullet.get(\"sprite\");\n\t\t\t\t\t\tif (previousSprite) {\n\t\t\t\t\t\t\tsprite.set(\"x\", previousSprite.x() + previousSprite.width() * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsprite.set(\"x\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.axis._bullets[bulletPosition] = bullet;\n\n\n\t\t\t\tsprite.set(\"y\", this.positionToCoordinate(position));\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet y0 = this.positionToCoordinate(position);\n\t\t\tlet y1 = this.positionToCoordinate(endPosition);\n\n\t\t\tthis.fillDrawMethod(fill, y0, y1);\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, y0: number, y1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\t// using for holes, so can not be rectangle\n\t\t\tconst w = this.axis!.gridContainer.width();\n\t\t\tconst h = this.height();\n\n\t\t\tif (y1 < y0) {\n\t\t\t\t[y1, y0] = [y0, y1];\n\t\t\t}\n\n\t\t\tif (y0 > h || y1 < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//y0 = Math.max(0, y0);\n\t\t\t//y1 = Math.min(h, y1);\n\n\t\t\tdisplay.moveTo(0, y0);\n\t\t\tdisplay.lineTo(w, y0);\n\t\t\tdisplay.lineTo(w, y1);\n\t\t\tdisplay.lineTo(0, y1);\n\t\t\tdisplay.lineTo(0, y0);\n\t\t})\n\t}\n\n\t/**\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinate (px)\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (!this._inversed) {\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tthis._positionTooltip(tooltip, { x: 0, y: this.positionToCoordinate(position) });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(tooltip: Tooltip) {\n\t\tconst inside = this.get(\"inside\");\n\t\tconst num = 100000;\n\n\t\tlet global = this._display.toGlobal({ x: 0, y: 0 });\n\t\tlet y = global.y;\n\t\tlet x = 0;\n\t\tlet h = this.axisLength();\n\t\tlet w = num;\n\n\t\tlet pointerOrientation: \"left\" | \"right\" = \"right\";\n\n\t\tif (this.get(\"opposite\")) {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"right\";\n\t\t\t\tx = global.x - num;\n\t\t\t\tw = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"left\";\n\t\t\t\tx = global.x;\n\t\t\t\tw = num;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (inside) {\n\t\t\t\tpointerOrientation = \"left\";\n\t\t\t\tx = global.x;\n\t\t\t\tw = num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointerOrientation = \"right\";\n\t\t\t\tx = global.x - num;\n\t\t\t\tw = num;\n\t\t\t}\n\t\t}\n\n\t\tconst bounds = { left: x, right: x + w, top: y, bottom: y + h };\n\t\tconst oldBounds = tooltip.get(\"bounds\");\n\n\t\tif (!$utils.sameBounds(bounds, oldBounds)) {\n\t\t\ttooltip.set(\"bounds\", bounds);\n\t\t\ttooltip.set(\"pointerOrientation\", pointerOrientation);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateLC() {\n\t\tconst axis = this.axis;\n\t\tconst parent = axis.parent;\n\t\tif (parent) {\n\t\t\tconst h = parent.innerHeight();\n\t\t\tthis._lc = this.axisLength() / h;\n\t\t\tthis._ls = axis.y() / h;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic toAxisPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tposition -= this._ls;\n\n\t\tposition = position * (end - start) / this._lc;\n\n\t\tif (this.get(\"inversed\")) {\n\t\t\tposition = start + position;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic toGlobalPosition(position: number): number {\n\t\tconst start = this._start || 0;\n\t\tconst end = this._end || 1;\n\n\t\tif (this.get(\"inversed\")) {\n\t\t\tposition = position - start;\n\t\t}\n\t\telse {\n\t\t\tposition = end - position;\n\t\t}\n\n\t\tposition = position / (end - start) * this._lc\n\n\t\tposition += this._ls;\n\n\t\treturn position;\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fixPosition(position: number) {\n\t\tif (!this.get(\"inversed\")) {\n\t\t\treturn 1 - position;\n\t\t}\n\t\treturn position;\n\t}\n\n}\n", "import { RoundedRectangle, IRoundedRectangleSettings, IRoundedRectanglePrivate } from \"../../../core/render/RoundedRectangle\";\n\n\nexport interface ICandlestickSettings extends IRoundedRectangleSettings {\n\n\t/**\n\t * X0 position of the low value in pixels.\n\t */\n\tlowX0?: number;\n\n\t/**\n\t * Y0 position of the low value in pixels.\n\t */\n\tlowY0?: number;\n\n\t/**\n\t * X2 position of the low value in pixels.\n\t */\n\tlowX1?: number;\n\n\t/**\n\t * Y1 position of the low value in pixels.\n\t */\n\tlowY1?: number;\n\n\t/**\n\t * X0 position of the high value in pixels.\n\t */\n\thighX0?: number;\n\n\t/**\n\t * Y0 position of the high value in pixels.\n\t */\n\thighY0?: number;\n\n\t/**\n\t * Xz position of the high value in pixels.\n\t */\n\thighX1?: number;\n\n\t/**\n\t * Y1 position of the high value in pixels.\n\t */\n\thighY1?: number;\n\n\t/**\n\t * Orientation of the cnadlestick.\n\t */\n\torientation?: \"horizontal\" | \"vertical\"\n\n}\n\nexport interface ICandlestickPrivate extends IRoundedRectanglePrivate {\n}\n\n/**\n * A candle element used in a [[CandlestickSeries]].\n */\nexport class Candlestick extends RoundedRectangle {\n\n\tdeclare public _settings: ICandlestickSettings;\n\tdeclare public _privateSettings: ICandlestickPrivate;\n\n\tpublic static className: string = \"Candlestick\";\n\tpublic static classNames: Array<string> = RoundedRectangle.classNames.concat([Candlestick.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"lowX0\") || this.isDirty(\"lowY0\") || this.isDirty(\"lowX1\") || this.isDirty(\"lowY1\") || this.isDirty(\"highX0\") || this.isDirty(\"highX1\") || this.isDirty(\"highY0\") || this.isDirty(\"highY1\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _draw() {\n\t\tsuper._draw();\n\n\t\tconst display = this._display;\n\n\t\tdisplay.moveTo(this.get(\"lowX0\", 0), this.get(\"lowY0\", 0));\n\t\tdisplay.lineTo(this.get(\"lowX1\", 0), this.get(\"lowY1\", 0));\n\n\t\tdisplay.moveTo(this.get(\"highX0\", 0), this.get(\"highY0\", 0));\n\t\tdisplay.lineTo(this.get(\"highX1\", 0), this.get(\"highY1\", 0));\n\t}\n}\n", "import type { DataItem } from \"../../../core/render/Component\";\r\n\r\nimport { BaseColumnSeries, IBaseColumnSeriesPrivate, IBaseColumnSeriesSettings, IBaseColumnSeriesDataItem, IBaseColumnSeriesAxisRange } from \"./BaseColumnSeries\";\r\nimport { Template } from \"../../../core/util/Template\";\r\nimport { ListTemplate } from \"../../../core/util/List\";\r\nimport { RoundedRectangle } from \"../../../core/render/RoundedRectangle\";\r\n\r\nimport * as $utils from \"../../../core/util/Utils\";\r\n\r\nexport interface IColumnSeriesDataItem extends IBaseColumnSeriesDataItem { }\r\n\r\nexport interface IColumnSeriesSettings extends IBaseColumnSeriesSettings { }\r\n\r\nexport interface IColumnSeriesPrivate extends IBaseColumnSeriesPrivate { }\r\n\r\nexport interface IColumnSeriesAxisRange extends IBaseColumnSeriesAxisRange {\r\n\t/**\r\n\t * A list of actual columns in a range.\r\n\t */\r\n\tcolumns: ListTemplate<RoundedRectangle>\r\n}\r\n\r\nexport class ColumnSeries extends BaseColumnSeries {\r\n\r\n\tdeclare public _settings: IColumnSeriesSettings;\r\n\tdeclare public _privateSettings: IColumnSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IColumnSeriesDataItem;\r\n\tdeclare public _axisRangeType: IColumnSeriesAxisRange;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<RoundedRectangle>): RoundedRectangle {\r\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\r\n\t\tcolumn._setDataItem(dataItem);\r\n\t\tlistTemplate.push(column);\r\n\t\treturn column;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[TemplateList]] of all columns in series.\r\n\t *\r\n\t * `columns.template` can be used to set default settings for all columns,\r\n\t * or to change on existing ones.\r\n\t */\r\n\tpublic readonly columns: ListTemplate<RoundedRectangle> = new ListTemplate(\r\n\t\tTemplate.new({}),\r\n\t\t() => RoundedRectangle._new(this._root, {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"series\", \"column\"])\r\n\t\t}, [this.columns.template])\r\n\t);\r\n\r\n\tpublic static className: string = \"ColumnSeries\";\r\n\tpublic static classNames: Array<string> = BaseColumnSeries.classNames.concat([ColumnSeries.className]);\r\n\r\n\r\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\r\n\t\tsuper._processAxisRange(axisRange);\r\n\t\taxisRange.columns = new ListTemplate(\r\n\t\t\tTemplate.new({}),\r\n\t\t\t() => RoundedRectangle._new(this._root, {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"series\", \"column\"]),\r\n\t\t\t}, [this.columns.template, axisRange.columns.template])\r\n\t\t);\r\n\t}\r\n}\r\n", "import type { DataItem } from \"../../../core/render/Component\";\n\nimport { ColumnSeries, IColumnSeriesPrivate, IColumnSeriesSettings, IColumnSeriesDataItem, IColumnSeriesAxisRange } from \"./ColumnSeries\";\nimport { Candlestick } from \"./Candlestick\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\n\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $array from \"../../../core/util/Array\";\n\nexport interface ICandlestickSeriesDataItem extends IColumnSeriesDataItem {\n}\n\nexport interface ICandlestickSeriesSettings extends IColumnSeriesSettings {\n}\n\nexport interface ICandlestickSeriesPrivate extends IColumnSeriesPrivate {\n}\n\nexport interface ICandlestickSeriesAxisRange extends IColumnSeriesAxisRange {\n\n\t/**\n\t * A list of [[Candlestick]] element in series.\n\t *\n\t * @readonly\n\t */\n\tcolumns: ListTemplate<Candlestick>\n\n}\n\n/**\n * Candlestick series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info\n * @important\n */\nexport class CandlestickSeries extends ColumnSeries {\n\n\tdeclare public _settings: ICandlestickSeriesSettings;\n\tdeclare public _privateSettings: ICandlestickSeriesPrivate;\n\tdeclare public _dataItemSettings: ICandlestickSeriesDataItem;\n\tdeclare public _axisRangeType: ICandlestickSeriesAxisRange;\n\n\tpublic static className: string = \"CandlestickSeries\";\n\tpublic static classNames: Array<string> = ColumnSeries.classNames.concat([CandlestickSeries.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<Candlestick>): Candlestick {\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\n\t\tcolumn._setDataItem(dataItem);\n\t\tlistTemplate.push(column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * A list of candles in the series.\n\t *\n\t * `columns.template` can be used to configure candles.\n\t *\n\t * @default new ListTemplate<Candlestick>\n\t */\n\tpublic readonly columns: ListTemplate<Candlestick> = new ListTemplate(\n\t\tTemplate.new({\n\t\t\tthemeTags: [\"autocolor\"]\n\t\t}),\n\t\t() => Candlestick._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"])\n\t\t}, [this.columns.template])\n\t);\n\n\tprotected _updateGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, previousDataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._updateGraphics(dataItem, previousDataItem);\n\n\t\tconst xAxis = this.getRaw(\"xAxis\");\n\t\tconst yAxis = this.getRaw(\"yAxis\");\n\t\tconst baseAxis = this.getRaw(\"baseAxis\");\n\n\t\tlet vcy = this.get(\"vcy\", 1);\n\t\tlet vcx = this.get(\"vcx\", 1);\n\n\t\tlet lx0: number;\n\t\tlet lx1: number;\n\t\tlet ly0: number;\n\t\tlet ly1: number;\n\n\t\tlet hx0: number;\n\t\tlet hx1: number;\n\t\tlet hy0: number;\n\t\tlet hy1: number;\n\n\t\tlet locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\tlet locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\tlet openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n\t\tlet openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n\n\t\tlet orientation: \"horizontal\" | \"vertical\";\n\n\t\tif (yAxis === baseAxis) {\n\t\t\tlet open = xAxis.getDataItemPositionX(dataItem, this._xOpenField, 1, vcx);\n\t\t\tlet close = xAxis.getDataItemPositionX(dataItem, this._xField, 1, vcx);\n\n\t\t\tlx1 = xAxis.getDataItemPositionX(dataItem, this._xLowField, 1, vcx);\n\t\t\thx1 = xAxis.getDataItemPositionX(dataItem, this._xHighField, 1, vcx);\n\n\t\t\thx0 = Math.max(open, close);\n\t\t\tlx0 = Math.min(open, close);\n\n\t\t\tlet startLocation = this._aLocationY0 + openLocationY - 0.5;\n\t\t\tlet endLocation = this._aLocationY1 + locationY - 0.5;\n\n\t\t\tly0 = yAxis.getDataItemPositionY(dataItem, this._yField, startLocation + (endLocation - startLocation) / 2, vcy);\n\t\t\tly1 = ly0;\n\t\t\thy0 = ly0;\n\t\t\thy1 = ly0;\n\n\t\t\torientation = \"horizontal\";\n\t\t}\n\t\telse {\n\t\t\tlet open = yAxis.getDataItemPositionY(dataItem, this._yOpenField, 1, vcy);\n\t\t\tlet close = yAxis.getDataItemPositionY(dataItem, this._yField, 1, vcy);\n\n\t\t\tly1 = yAxis.getDataItemPositionY(dataItem, this._yLowField, 1, vcy);\n\t\t\thy1 = yAxis.getDataItemPositionY(dataItem, this._yHighField, 1, vcy);\n\n\t\t\thy0 = Math.max(open, close);\n\t\t\tly0 = Math.min(open, close);\n\n\t\t\tlet startLocation = this._aLocationX0 + openLocationX - 0.5;\n\t\t\tlet endLocation = this._aLocationX1 + locationX - 0.5;\n\n\t\t\tlx0 = xAxis.getDataItemPositionX(dataItem, this._xField, startLocation + (endLocation - startLocation) / 2, vcx);\n\t\t\tlx1 = lx0;\n\t\t\thx0 = lx0;\n\t\t\thx1 = lx0;\n\n\t\t\torientation = \"vertical\";\n\t\t}\n\n\t\tthis._updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation)\n\t}\n\n\tprotected _updateCandleGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, lx0: number, lx1: number, ly0: number, ly1: number, hx0: number, hx1: number, hy0: number, hy1: number, orientation: \"horizontal\" | \"vertical\") {\n\t\tlet column = dataItem.get(\"graphics\") as Candlestick;\n\n\t\tif (column) {\n\t\t\tlet pl0 = this.getPoint(lx0, ly0);\n\t\t\tlet pl1 = this.getPoint(lx1, ly1);\n\n\t\t\tlet ph0 = this.getPoint(hx0, hy0);\n\t\t\tlet ph1 = this.getPoint(hx1, hy1);\n\n\t\t\tlet x = column.x();\n\t\t\tlet y = column.y();\n\n\t\t\tcolumn.set(\"lowX0\", pl0.x - x);\n\t\t\tcolumn.set(\"lowY0\", pl0.y - y);\n\n\t\t\tcolumn.set(\"lowX1\", pl1.x - x);\n\t\t\tcolumn.set(\"lowY1\", pl1.y - y);\n\n\t\t\tcolumn.set(\"highX0\", ph0.x - x);\n\t\t\tcolumn.set(\"highY0\", ph0.y - y);\n\n\t\t\tcolumn.set(\"highX1\", ph1.x - x);\n\t\t\tcolumn.set(\"highY1\", ph1.y - y);\n\n\t\t\tcolumn.set(\"orientation\", orientation);\n\n\t\t\tlet rangeGraphics = dataItem.get(\"rangeGraphics\")!;\n\t\t\tif (rangeGraphics) {\n\t\t\t\t$array.each(rangeGraphics, (column: any) => {\n\t\t\t\t\tcolumn.set(\"lowX0\", pl0.x - x);\n\t\t\t\t\tcolumn.set(\"lowY0\", pl0.y - y);\n\n\t\t\t\t\tcolumn.set(\"lowX1\", pl1.x - x);\n\t\t\t\t\tcolumn.set(\"lowY1\", pl1.y - y);\n\n\t\t\t\t\tcolumn.set(\"highX0\", ph0.x - x);\n\t\t\t\t\tcolumn.set(\"highY0\", ph0.y - y);\n\n\t\t\t\t\tcolumn.set(\"highX1\", ph1.x - x);\n\t\t\t\t\tcolumn.set(\"highY1\", ph1.y - y);\n\n\t\t\t\t\tcolumn.set(\"orientation\", orientation);\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.columns = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Candlestick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"]),\n\t\t\t}, [this.columns.template, axisRange.columns.template])\n\t\t);\n\t}\n}\n", "import { Candlestick, ICandlestickSettings, ICandlestickPrivate } from \"./Candlestick\";\n\n\nexport interface IOHLCSettings extends ICandlestickSettings {\n}\n\nexport interface IOHLCPrivate extends ICandlestickPrivate {\n}\n\nexport class OHLC extends Candlestick {\n\n\tdeclare public _settings: IOHLCSettings;\n\tdeclare public _privateSettings: IOHLCPrivate;\n\n\tpublic static className: string = \"OHLC\";\n\tpublic static classNames: Array<string> = Candlestick.classNames.concat([OHLC.className]);\n\n\tpublic _draw() {\n\n\t\tconst display = this._display;\n\n\t\tdisplay.moveTo(this.get(\"lowX1\", 0), this.get(\"lowY1\", 0));\n\t\tdisplay.lineTo(this.get(\"highX1\", 0), this.get(\"highY1\", 0));\n\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\n\t\t\tlet lY = h;\n\t\t\tlet hY = 0;\n\t\t\tdisplay.moveTo(0, lY);\n\t\t\tdisplay.lineTo(w / 2, lY);\n\n\t\t\tdisplay.moveTo(w / 2, hY);\n\t\t\tdisplay.lineTo(w, hY);\n\t\t}\n\t\telse {\n\t\t\tlet lX = 0;\n\t\t\tlet hX = w;\n\n\t\t\tdisplay.moveTo(lX, 0);\n\t\t\tdisplay.lineTo(lX, h / 2);\n\n\t\t\tdisplay.moveTo(hX, h / 2);\n\t\t\tdisplay.lineTo(hX, h);\n\t\t}\n\t}\n}\n", "import type { DataItem } from \"../../../core/render/Component\";\n\nimport { CandlestickSeries, ICandlestickSeriesPrivate, ICandlestickSeriesSettings, ICandlestickSeriesDataItem, ICandlestickSeriesAxisRange } from \"./CandlestickSeries\";\nimport { OHLC } from \"./OHLC\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\n\nimport * as $utils from \"../../../core/util/Utils\";\n\nexport interface IOHLCSeriesDataItem extends ICandlestickSeriesDataItem {\n}\n\nexport interface IOHLCSeriesSettings extends ICandlestickSeriesSettings {\n}\n\nexport interface IOHLCSeriesPrivate extends ICandlestickSeriesPrivate {\n}\n\nexport interface IOHLCSeriesAxisRange extends ICandlestickSeriesAxisRange {\n\n\t/**\n\t * List of [[OHLC]] columns in a range.\n\t */\n\tcolumns: ListTemplate<OHLC>\n\n}\n\n/**\n * OHLC series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info\n * @important\n */\nexport class OHLCSeries extends CandlestickSeries {\n\n\tdeclare public _settings: IOHLCSeriesSettings;\n\tdeclare public _privateSettings: IOHLCSeriesPrivate;\n\tdeclare public _dataItemSettings: IOHLCSeriesDataItem;\n\tdeclare public _axisRangeType: IOHLCSeriesAxisRange;\n\n\tpublic static className: string = \"OHLCSeries\";\n\tpublic static classNames: Array<string> = CandlestickSeries.classNames.concat([OHLCSeries.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<OHLC>): OHLC {\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\n\t\tcolumn._setDataItem(dataItem);\n\t\tlistTemplate.push(column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * A list of OHLC bars in the series.\n\t *\n\t * `columns.template` can be used to configure OHLC bars.\n\t *\n\t * @default new ListTemplate<OHLC>\n\t */\n\tpublic readonly columns: ListTemplate<OHLC> = new ListTemplate(\n\t\tTemplate.new({\n\t\t\tthemeTags: [\"autocolor\"]\n\t\t}),\n\t\t() => OHLC._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"ohlc\", \"series\", \"column\"])\n\t\t}, [this.columns.template])\n\t);\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.columns = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => OHLC._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"ohlc\", \"series\", \"column\"]),\n\t\t\t}, [this.columns.template, axisRange.columns.template])\n\t\t);\n\t}\n}\n", "/**\n * @ignore\n */\nexport class MonotoneYTension {\n\n  constructor(context: any, tension: number) {\n    this._context = context;\n    this._tension = tension;\n  }\n\n  public _line = 0;\n  public _point = 0;\n  public _context: any;\n  public _x0 = 0;\n  public _x1 = 0;\n  public _y0 = 0;\n  public _y1 = 0;\n  public _t0 = 0;\n\n  public _tension: number = 0;\n\n  public areaStart() {\n    this._line = 0;\n  }\n\n  public areaEnd() {\n    this._line = NaN;\n  }\n\n  public lineStart() {\n    this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n    this._point = 0;\n  }\n\n  public lineEnd() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n\n  public point(x: number, y: number) {\n\n    [x, y] = [y, x]\n\n    let t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\n/**\n * @ignore\n */\nexport function curveMonotoneYTension(tension: number) {\n\n  function monotoneYTension(context: any) {\n    return new MonotoneYTension(context, tension);\n  }\n\n  monotoneYTension.tension = function(tension: number) {\n    return curveMonotoneYTension(+tension);\n  };\n\n  return monotoneYTension;\n}\n\n\n/**\n * @ignore\n */\nfunction sign(x: number) {\n  return x < 0 ? -1 : 1;\n}\n\n/**\n * @ignore\n */\nfunction slope3(that: MonotoneYTension, x2: number, y2: number) {\n  let h0 = (that._x1 - that._x0) as any;\n  let h1 = (x2 - that._x1) as any;\n  let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\n  let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\n  let p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n/**\n * @ignore\n */\nfunction slope2(that: MonotoneYTension, t: number) {\n  let h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n/**\n * @ignore\n */\nfunction point(that: MonotoneYTension, t0: number, t1: number) {\n  let x0 = that._x0,\n    y0 = that._y0,\n    x1 = that._x1,\n    y1 = that._y1,\n    dx = (x1 - x0) / 1.5 * (1 - that._tension);\n  that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);\n}", "import { LineSeries, ILineSeriesSettings, ILineSeriesPrivate, ILineSeriesDataItem } from \"./LineSeries\";\nimport { curveMonotoneYTension } from \"../../../core/render/MonotoneYTension\";\n\nexport interface ISmoothedYLineSeriesDataItem extends ILineSeriesDataItem {\n\n}\n\nexport interface ISmoothedYLineSeriesSettings extends ILineSeriesSettings {\n\n\t/**\n\t * A tension force for the smoothing (0-1). The smaller the value the more\n\t * curvy the line will be.\n\t *\n\t * @default 0.5\n\t */\n\ttension?: number;\n\n}\n\nexport interface ISmoothedYLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\n/**\n * Smoothed line series suitable for vertical plots.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\n */\nexport class SmoothedYLineSeries extends LineSeries {\n\tpublic static className: string = \"SmoothedYLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([SmoothedYLineSeries.className]);\n\n\tdeclare public _settings: ISmoothedYLineSeriesSettings;\n\tdeclare public _privateSettings: ISmoothedYLineSeriesPrivate;\n\tdeclare public _dataItemSettings: ISmoothedYLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveMonotoneYTension(this.get(\"tension\", 0.5)) as any);\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _updateChildren() {\n\t\tif (this.isDirty(\"tension\")) {\n\t\t\tthis.set(\"curveFactory\", curveMonotoneYTension(this.get(\"tension\", 0.5)) as any);\n\t\t\tthis._valuesDirty = true;\n\t\t}\n\n\t\tsuper._updateChildren();\n\t}\n}\n", "/**\n * @ignore\n */\nexport class MonotoneXTension {\n\n  constructor(context: CanvasRenderingContext2D, tension: number) {\n    this._context = context;\n    this._tension = tension;\n  }\n\n  public _line = 0;\n  public _point = 0;\n  public _context: any;\n  public _x0 = 0;\n  public _x1 = 0;\n  public _y0 = 0;\n  public _y1 = 0;\n  public _t0 = 0;\n\n  public _tension: number = 0;\n\n  public areaStart() {\n    this._line = 0;\n  }\n\n  public areaEnd() {\n    this._line = NaN;\n  }\n\n  public lineStart() {\n    this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n    this._point = 0;\n  }\n\n  public lineEnd() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n\n  public point(x: number, y: number) {\n    let t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\n/**\n * @ignore\n */\nexport function curveMonotoneXTension(tension: number) {\n\n  function monotoneXTension(context: any) {\n    return new MonotoneXTension(context, tension);\n  }\n\n  return monotoneXTension;\n}\n\n/**\n * @ignore\n */\nfunction sign(x: number) {\n  return x < 0 ? -1 : 1;\n}\n\n/**\n * @ignore\n */\nfunction slope3(that: MonotoneXTension, x2: number, y2: number) {\n  let h0 = (that._x1 - that._x0) as any;\n  let h1 = (x2 - that._x1) as any;\n  let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\n  let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\n  let p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n/**\n * @ignore\n */\nfunction slope2(that: MonotoneXTension, t: number) {\n  let h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n/**\n * @ignore\n */\nfunction point(that: MonotoneXTension, t0: number, t1: number) {\n  let x0 = that._x0,\n    y0 = that._y0,\n    x1 = that._x1,\n    y1 = that._y1,\n    dx = (x1 - x0) / 1.5 * (1 - that._tension);\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}", "import { LineSeries, ILineSeriesSettings, ILineSeriesPrivate, ILineSeriesDataItem } from \"./LineSeries\";\nimport { curveMonotoneXTension } from \"../../../core/render/MonotoneXTension\";\n\n\nexport interface ISmoothedXLineSeriesDataItem extends ILineSeriesDataItem {\n\n}\n\nexport interface ISmoothedXLineSeriesSettings extends ILineSeriesSettings {\n\n\t/**\n\t * A tension force for the smoothing (0-1). The smaller the value the more\n\t * curvy the line will be.\n\t *\n\t * @default 0.5\n\t */\n\ttension?: number;\n\n}\n\nexport interface ISmoothedXLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\n/**\n * Smoothed line series suitable for horizontal plots.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\n */\nexport class SmoothedXLineSeries extends LineSeries {\n\tpublic static className: string = \"SmoothedXLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([SmoothedXLineSeries.className]);\n\n\tdeclare public _settings: ISmoothedXLineSeriesSettings;\n\tdeclare public _privateSettings: ISmoothedXLineSeriesPrivate;\n\tdeclare public _dataItemSettings: ISmoothedXLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveMonotoneXTension(this.get(\"tension\", 0.5)) as any);\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _updateChildren() {\n\t\tif (this.isDirty(\"tension\")) {\n\t\t\tthis.set(\"curveFactory\", curveMonotoneXTension(this.get(\"tension\", 0.5)) as any);\n\t\t\tthis._valuesDirty = true;\n\t\t}\n\n\t\tsuper._updateChildren();\n\t}\n}\n", "import { LineSeries, ILineSeriesSettings, ILineSeriesPrivate, ILineSeriesDataItem } from \"./LineSeries\";\nimport { curveCardinal, CurveCardinalFactory } from \"d3-shape\";\n\nexport interface SmoothedXYLineSeriesDataItem extends ILineSeriesDataItem {\n\n}\n\nexport interface ISmoothedXYLineSeriesDataItem extends ILineSeriesDataItem {\n\n}\n\nexport interface SmoothedXYLineSeriesProperties extends ILineSeriesSettings {\n\n\t/**\n\t * A tension force for the smoothing (0-1). The smaller the value the more\n\t * curvy the line will be.\n\t *\n\t * @default 0.5\n\t */\n\ttension?: number;\n\n\t/**\n\t * @ignore\n\t*/\n\tcurveFactory?: CurveCardinalFactory\n\n}\n\nexport interface SmoothedXYLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\n/**\n * Smoothed line series suitable for XY (scatter) charts\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\n */\nexport class SmoothedXYLineSeries extends LineSeries {\n\tpublic static className: string = \"SmoothedXYLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([SmoothedXYLineSeries.className]);\n\n\tdeclare public _settings: SmoothedXYLineSeriesProperties;\n\tdeclare public _privateSettings: SmoothedXYLineSeriesPrivate;\n\tdeclare public _dataItemSettings: SmoothedXYLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0.5)));\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _updateChildren() {\n\t\tif (this.isDirty(\"tension\")) {\n\t\t\tthis.set(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0.5)) as any);\n\t\t\tthis._valuesDirty = true;\n\t\t}\n\n\t\tsuper._updateChildren();\n\t}\n}\n", "import { LineSeries, ILineSeriesSettings, ILineSeriesPrivate, ILineSeriesDataItem } from \"./LineSeries\";\nimport type { AxisRenderer } from \"../axes/AxisRenderer\";\nimport type { Axis } from \"../axes/Axis\";\nimport { Percent, p100 } from \"../../../core/util/Percent\";\nimport type { DataItem } from \"../../../core/render/Component\";\nimport { curveStepAfter } from \"d3-shape\";\n\nexport interface IStepLineSeriesDataItem extends ILineSeriesDataItem {\n}\n\nexport interface IStepLineSeriesSettings extends ILineSeriesSettings {\n\n\t/**\n\t * Width of the step in percent relative to the cell width.\n\t *\n\t * NOTE: setting this to less than 100% makes sense only when risers are\n\t * disabled: `noRisers: true`\n\t *\n\t * @default 100%\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/step-line-series/#Step_width} for more info\n\t */\n\tstepWidth?: Percent;\n\n\t/**\n\t * Disables vertical connecting lines for the steps.\n\t *\n\t * @default false\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/step-line-series/#Disabling_risers} for more info\n\t */\n\tnoRisers?: boolean;\n\n}\n\nexport interface IStepLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\nexport class StepLineSeries extends LineSeries {\n\tpublic static className: string = \"StepLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([StepLineSeries.className]);\n\n\tdeclare public _settings: IStepLineSeriesSettings;\n\tdeclare public _privateSettings: IStepLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IStepLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveStepAfter);\n\t\tsuper._afterNew();\n\t}\n\n\n\tprotected _getPoints(dataItem: DataItem<this[\"_dataItemSettings\"]>, o: { points: Array<Array<number>>, segments: number[][][], stacked: boolean | undefined, getOpen: boolean, basePosX: number, basePosY: number, fillVisible: boolean | undefined, xField: string, yField: string, xOpenField: string, yOpenField: string, vcx: number, vcy: number, baseAxis: Axis<AxisRenderer>, xAxis: Axis<AxisRenderer>, yAxis: Axis<AxisRenderer>, locationX: number, locationY: number, openLocationX: number, openLocationY: number }) {\n\t\tlet points = o.points;\n\n\t\tlet width = this.get(\"stepWidth\", p100).value / 2;\n\n\t\tlet itemLocationX0 = dataItem.get(\"locationX\", o.locationX);\n\t\tlet itemLocationY0 = dataItem.get(\"locationY\", o.locationY);\n\t\tlet itemLocationX1 = itemLocationX0;\n\t\tlet itemLocationY1 = itemLocationY0;\n\n\t\tif (o.baseAxis === o.xAxis) {\n\t\t\titemLocationX0 -= width;\n\t\t\titemLocationX1 += width;\n\t\t}\n\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\titemLocationY0 -= width;\n\t\t\titemLocationY1 += width;\n\t\t}\n\n\t\tlet xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX0, o.vcx);\n\t\tlet yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY0, o.vcy);\n\n\t\tlet xPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX1, o.vcx);\n\t\tlet yPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY1, o.vcy);\n\n\t\tif (this._shouldInclude(xPos0)) {\n\n\t\t\tconst iPoint0 = this.getPoint(xPos0, yPos0);\n\t\t\tconst point0 = [iPoint0.x, iPoint0.y];\n\n\t\t\tconst iPoint1 = this.getPoint(xPos1, yPos1);\n\t\t\tconst point1 = [iPoint1.x, iPoint1.y];\n\n\t\t\tif (o.fillVisible) {\n\t\t\t\tlet xOpenPos0: number = xPos0;\n\t\t\t\tlet yOpenPos0: number = yPos0;\n\t\t\t\tlet xOpenPos1: number = xPos1;\n\t\t\t\tlet yOpenPos1: number = yPos1;\n\n\t\t\t\tif (o.baseAxis === o.xAxis) {\n\t\t\t\t\tyOpenPos0 = o.basePosY;\n\t\t\t\t\tyOpenPos1 = o.basePosY;\n\t\t\t\t}\n\t\t\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\t\t\txOpenPos0 = o.basePosX;\n\t\t\t\t\txOpenPos1 = o.basePosX;\n\t\t\t\t}\n\n\t\t\t\tif (o.getOpen) {\n\t\t\t\t\tlet valueX = dataItem.get(o.xOpenField as any);\n\t\t\t\t\tlet valueY = dataItem.get(o.yOpenField as any);\n\n\t\t\t\t\tif (valueX != null && valueY != null) {\n\t\t\t\t\t\titemLocationX0 = dataItem.get(\"openLocationX\", o.openLocationX);\n\t\t\t\t\t\titemLocationY0 = dataItem.get(\"openLocationY\", o.openLocationY);\n\n\t\t\t\t\t\titemLocationX1 = itemLocationX0;\n\t\t\t\t\t\titemLocationY1 = itemLocationY0;\n\n\t\t\t\t\t\tif (o.baseAxis === o.xAxis) {\n\t\t\t\t\t\t\titemLocationX0 -= width;\n\t\t\t\t\t\t\titemLocationX1 += width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\t\t\t\t\titemLocationY0 -= width;\n\t\t\t\t\t\t\titemLocationY1 += width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (o.stacked) {\n\t\t\t\t\t\t\tlet stackToItemX = dataItem.get(\"stackToItemX\")!;\n\t\t\t\t\t\t\tlet stackToItemY = dataItem.get(\"stackToItemY\")!;\n\n\t\t\t\t\t\t\tif (stackToItemX) {\n\t\t\t\t\t\t\t\txOpenPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX0, (stackToItemX.component as StepLineSeries).get(\"vcx\"));\n\t\t\t\t\t\t\t\txOpenPos1 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX1, (stackToItemX.component as StepLineSeries).get(\"vcx\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (o.yAxis === o.baseAxis) {\n\t\t\t\t\t\t\t\t\txOpenPos0 = o.basePosX;\n\t\t\t\t\t\t\t\t\txOpenPos1 = o.basePosX;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\t\t\t\t\t\t\txOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n\t\t\t\t\t\t\t\t\txOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stackToItemY) {\n\t\t\t\t\t\t\t\tyOpenPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY0, (stackToItemY.component as StepLineSeries).get(\"vcy\"));\n\t\t\t\t\t\t\t\tyOpenPos1 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY1, (stackToItemY.component as StepLineSeries).get(\"vcy\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (o.xAxis === o.baseAxis) {\n\t\t\t\t\t\t\t\t\tyOpenPos0 = o.basePosY;\n\t\t\t\t\t\t\t\t\tyOpenPos1 = o.basePosY;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (o.baseAxis === o.yAxis) {\n\t\t\t\t\t\t\t\t\tyOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n\t\t\t\t\t\t\t\t\tyOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\txOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n\t\t\t\t\t\t\tyOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n\t\t\t\t\t\t\txOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n\t\t\t\t\t\t\tyOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet closeIPoint0 = this.getPoint(xOpenPos0, yOpenPos0);\n\t\t\t\tlet closeIPoint1 = this.getPoint(xOpenPos1, yOpenPos1);\n\n\t\t\t\tpoint0[2] = closeIPoint0.x;\n\t\t\t\tpoint0[3] = closeIPoint0.y;\n\n\t\t\t\tpoint1[2] = closeIPoint1.x;\n\t\t\t\tpoint1[3] = closeIPoint1.y;\n\t\t\t}\n\n\t\t\tpoints.push(point0);\n\t\t\tpoints.push(point1);\n\n\t\t\tdataItem.set(\"point\", {x:point0[0] + (point1[0] - point0[0]) / 2, y:point0[1] + (point1[1] - point0[1]) / 2 });\n\t\t}\n\n\t\tif (this.get(\"noRisers\")) {\n\t\t\to.points = [];\n\t\t\to.segments.push(points);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["sAnimation", "eAnimation", "bounds", "key", "format", "stepPower", "series", "groupInterval", "dataContext", "date", "value", "index", "closest", "each", "point2", "x", "point2", "column", "tension", "point", "slope2", "slope3", "sign"]
}
