{
  "version": 3,
  "sources": ["../../src/.internal/charts/radar/AxisRendererCircular.ts", "../../src/.internal/charts/radar/AxisRendererRadial.ts", "../../src/.internal/charts/radar/ClockHand.ts", "../../src/.internal/charts/radar/RadarDefaultTheme.ts", "../../src/.internal/charts/radar/RadarChart.ts", "../../src/.internal/charts/radar/RadarColumnSeries.ts", "../../src/.internal/charts/radar/RadarCursor.ts", "../../src/.internal/charts/radar/RadarLineSeries.ts", "../../src/.internal/charts/radar/SmoothedRadarLineSeries.ts"],
  "sourcesContent": ["import type { Axis } from \"../xy/axes/Axis\";\nimport type { RadarChart } from \"./RadarChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { Slice } from \"../../core/render/Slice\";\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\nimport { arc } from \"d3-shape\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IAxisRendererCircularSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Outer radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `radius`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `innerRadius`.\n\t *\n\t * If value is negative, inner radius will be calculated from the outer edge.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Series start angle.\n\t *\n\t * If not set, will use chart's `startAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Series end angle.\n\t *\n\t * If not set, will use chart's `endAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tendAngle?: number;\n\n\t/**\n\t * @todo am: needs description\n\t */\n\taxisAngle?: number;\n\n}\n\nexport interface IAxisRendererCircularPrivate extends IAxisRendererPrivate {\n\n\t/**\n\t * Actual radius of the label in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the label in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the label in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the label in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\n/**\n * Renderer for circular axes.\n */\nexport class AxisRendererCircular extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly axisFills: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t);\n\n\n\tpublic static className: string = \"AxisRendererCircular\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCircular.className]);\n\n\tdeclare public _settings: IAxisRendererCircularSettings;\n\tdeclare public _privateSettings: IAxisRendererCircularPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"circular\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.labelsContainer.set(\"isMeasured\", false);\n\t}\t\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tlet r = $utils.relativeToValue(this.get(\"radius\", p100), radius);\n\n\t\t\tif (r < 0) {\n\t\t\t\tr = radius + r;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"radius\", r);\n\n\t\t\tlet ir = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\tif (ir < 0) {\n\t\t\t\tir = r + ir;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"innerRadius\", ir);\n\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tconst p0 = this.positionToPoint(0);\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\n\t\t\t\tif (startAngle > endAngle) {\n\t\t\t\t\t[startAngle, endAngle] = [endAngle, startAngle];\n\t\t\t\t}\n\n\t\t\t\tdisplay.arc(0, 0, r, startAngle * $math.RADIANS, endAngle * $math.RADIANS);\n\t\t\t});\n\n\t\t\tthis.axis.markDirtySize();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tif (radius != null) {\n\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(innerRadius * $math.cos(angle), innerRadius * $math.sin(angle));\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts relative position to angle.\n\t *\n\t * @param   position  Position\n\t * @return            Angle\n\t */\n\tpublic positionToAngle(position: number): number {\n\t\tconst axis: Axis<AxisRenderer> = this.axis;\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 360);\n\n\t\tconst start = axis.get(\"start\", 0);\n\t\tconst end = axis.get(\"end\", 1);\n\n\t\tlet arc = (endAngle - startAngle) / (end - start);\n\n\t\tlet angle: number;\n\n\t\tif (this.get(\"inversed\")) {\n\t\t\tangle = startAngle + (end - position) * arc;\n\t\t}\n\t\telse {\n\t\t\tangle = startAngle + (position - start) * arc;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to an X/Y coordinate.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst angle = this.positionToAngle(position);\n\n\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\tlabel.set(\"labelAngle\", angle);\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fillDrawMethod(fill: Graphics, startAngle?: number, endAngle?: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\tif (startAngle == null) {\n\t\t\t\tstartAngle = this.getPrivate(\"startAngle\", 0);\n\t\t\t}\n\t\t\tif (endAngle == null) {\n\t\t\t\tendAngle = this.getPrivate(\"endAngle\", 0);\n\t\t\t}\n\t\t\tconst y0 = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst y1 = this.getPrivate(\"radius\", 0);\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tthis._fillGenerator({ innerRadius: y0, outerRadius: y1, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (endAngle + 90) * $math.RADIANS });\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\n\t\t\tif (radius != null) {\n\t\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t\tradius += length;\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\n\t\t\t\tsprite.setAll({ rotation: angle, x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Slice, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet startAngle = this.fitAngle(this.positionToAngle(position));\n\t\t\tlet endAngle = this.fitAngle(this.positionToAngle(endPosition));\n\t\t\tfill.setAll({ startAngle: startAngle, arc: endAngle - startAngle });\n\n\t\t\tfill._setSoft(\"innerRadius\", this.getPrivate(\"innerRadius\"));\n\t\t\tfill._setSoft(\"radius\", this.getPrivate(\"radius\"));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fitAngle(angle: number): number {\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 0);\n\n\t\tconst minAngle = Math.min(startAngle, endAngle);\n\t\tconst maxAngle = Math.max(startAngle, endAngle);\n\n\t\tif (angle < minAngle) {\n\t\t\tangle = minAngle;\n\t\t}\n\n\t\tif (angle > maxAngle) {\n\t\t\tangle = maxAngle;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn Math.abs(this.getPrivate(\"radius\", 0) * Math.PI * 2 * (this.getPrivate(\"endAngle\", 360) - this.getPrivate(\"startAngle\", 0)) / 360);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\t//return tooltip.set(\"pointTo\", this.axis._display.toGlobal({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }));\n\t\tthis._positionTooltip(tooltip, { x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n}\n", "import type { RadarChart } from \"./RadarChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { arc } from \"d3-shape\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IAxisRendererRadialSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Outer radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `radius`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `innerRadius`.\n\t *\n\t * If value is negative, inner radius will be calculated from the outer edge.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Series start angle.\n\t *\n\t * If not set, will use chart's `startAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Series end angle.\n\t *\n\t * If not set, will use chart's `endAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tendAngle?: number;\n\n\n\t/**\n\t * @todo am: needs description\n\t */\n\taxisAngle?: number;\n\n}\n\nexport interface IAxisRendererRadialPrivate extends IAxisRendererPrivate {\n\n\t/**\n\t * Actual radius of the label in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the label in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the label in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the label in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\n/**\n * Renderer for radial axes.\n */\nexport class AxisRendererRadial extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tpublic static className: string = \"AxisRendererRadial\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererRadial.className]);\n\n\tdeclare public _settings: IAxisRendererRadialSettings;\n\tdeclare public _privateSettings: IAxisRendererRadialPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\t/**\n\t * A [[TemplateList]] with all the labels attached to the axis.\n\t *\n\t * `labels.template` can be used to configure appearance of the labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"radial\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivate(\"letter\", \"Y\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tlet r = $utils.relativeToValue(this.get(\"radius\", p100), radius);\n\t\t\tlet ir = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\tif (ir < 0) {\n\t\t\t\tir = r + ir;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"radius\", r);\n\t\t\tthis.setPrivate(\"innerRadius\", ir);\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\n\t\t\tconst axisAngle = this.get(\"axisAngle\", 0);\n\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(ir * $math.cos(axisAngle), ir * $math.sin(axisAngle));\n\t\t\t\tdisplay.lineTo(r * $math.cos(axisAngle), r * $math.sin(axisAngle));\n\t\t\t});\n\n\t\t\tthis.axis.markDirtySize();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet radius = this.positionToCoordinate(position) + this.getPrivate(\"innerRadius\", 0);\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tif ($type.isNumber(radius)) {\n\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\tlet startAngle = this.getPrivate(\"startAngle\", 0) * $math.RADIANS;\n\t\t\t\t\tlet endAngle = this.getPrivate(\"endAngle\", 0) * $math.RADIANS;\n\t\t\t\t\tdisplay.arc(0, 0, Math.max(0, radius), Math.min(startAngle, endAngle), Math.max(startAngle, endAngle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to X/Y point.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\tconst radius = this.positionToCoordinate(position) + innerRadius;\n\t\tconst axisAngle = this.get(\"axisAngle\", 0);\n\t\treturn { x: radius * $math.cos(axisAngle), y: radius * $math.sin(axisAngle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\tlet radius = Math.hypot(point.x, point.y);\n\n\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\tlabel.setPrivate(\"innerRadius\", radius);\n\t\t\tlabel.set(\"labelAngle\", this.get(\"axisAngle\"));\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, y0: number, y1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\ty0 = Math.max(0, y0);\n\t\t\ty1 = Math.max(0, y1);\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tlet startAngle = (this.getPrivate(\"startAngle\", 0) + 90) * $math.RADIANS;\n\t\t\tlet endAngle = (this.getPrivate(\"endAngle\", 0) + 90) * $math.RADIANS;\n\n\t\t\tif (endAngle < startAngle) {\n\t\t\t\t[startAngle, endAngle] = [endAngle, startAngle];\n\t\t\t}\n\n\t\t\tthis._fillGenerator({ innerRadius: y0, outerRadius: y1, startAngle: startAngle, endAngle: endAngle });\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\ttick.set(\"x\", point.x);\n\t\t\ttick.set(\"y\", point.y);\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1\n\t\t\t}\n\n\t\t\tconst axisAngle = this.get(\"axisAngle\", 0) + 90;\n\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(length * $math.cos(axisAngle), length * $math.sin(axisAngle));\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\n\t\t\tlet y0 = this.positionToCoordinate(position) + innerRadius;\n\t\t\tlet y1 = this.positionToCoordinate(endPosition) + innerRadius;\n\n\t\t\tthis.fillDrawMethod(fill, y0, y1);\n\t\t}\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.getPrivate(\"radius\", 0) - this.getPrivate(\"innerRadius\", 0);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n\n\t/**\n\t * Converts relative position to pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Pixels\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (this._inversed) {\n\t\t\tposition = Math.min(this._end, position);\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\tposition = Math.max(this._start, position);\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tlet radius = this.getPrivate(\"innerRadius\", 0) + this.positionToCoordinate(position);\n\t\tconst angle = this.get(\"axisAngle\", 0);\n\t\t//return tooltip.set(\"pointTo\", this.axis._display.toGlobal({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }));\n\t\tthis._positionTooltip(tooltip, { x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t}\n}\n", "import type { Axis } from \"../xy/axes/Axis\";\nimport type { AxisRendererCircular } from \"../radar/AxisRendererCircular\";\nimport type { RadarChart } from \"../radar/RadarChart\";\n\nimport { Container, IContainerPrivate, IContainerSettings } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent, percent } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IClockHandSettings extends IContainerSettings {\n\n\t/**\n\t * A width of the tip of the clock hand, in pixels.\n\t *\n\t * @default 1\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * A width of the base of the clock hand, in pixels.\n\t *\n\t * @default 10\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Radius of the hand, in pixels, or percent (relative to the axis radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 90%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the hand, in pixels, or percent (relative to the axis\n\t * radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 0\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Radius of the hand pin (circle at the base of the hand), in pixels, or in\n\t * percent (relative to the axis radius.)\n\t *\n\t * @default 10\n\t */\n\tpinRadius?: number | Percent;\n\n}\n\nexport interface IClockHandPrivate extends IContainerPrivate {\n}\n\n/**\n * A clock hand for use with [[RadarChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/gauge-charts/#Clock_hands} for more info\n * @important\n */\nexport class ClockHand extends Container {\n\n\tdeclare public _settings: IClockHandSettings;\n\tdeclare public _privateSettings: IClockHandPrivate;\n\n\tpublic static className: string = \"ClockHand\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([ClockHand.className]);\n\n\t/**\n\t * A \"hand\" element.\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly hand: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"hand\"] }));\n\n\t/**\n\t * A \"pin\" element (hand's base).\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly pin: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"pin\"] }));\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"clock\"]);\n\n\t\tsuper._afterNew();\n\n\t\t// to be redrawn when size changes\n\t\tthis.set(\"width\", percent(1));\n\n\t\tthis.adapters.add(\"x\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.adapters.add(\"y\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.pin.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\t\t\tif (parent) {\n\t\t\t\tconst dataItem = parent.dataItem;\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"pinRadius\", 0), cr);\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdisplay.moveTo(r, 0)\n\t\t\t\t\t\t\tdisplay.arc(0, 0, r, 0, 360);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.hand.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\n\t\t\tif (parent) {\n\n\t\t\t\tlet bullet = parent.parent;\n\t\t\t\t// to be redrawn when size changes\n\t\t\t\tif (bullet) {\n\t\t\t\t\tbullet.set(\"width\", percent(1));\n\t\t\t\t}\n\n\t\t\t\tconst dataItem = parent.dataItem;\n\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst bw = parent.get(\"bottomWidth\", 10) / 2;\n\t\t\t\t\t\t\tconst tw = parent.get(\"topWidth\", 0) / 2;\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"radius\", 0), cr);\n\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet ir = parent.get(\"innerRadius\", 0);\n\n\t\t\t\t\t\t\tif (ir instanceof Percent) {\n\t\t\t\t\t\t\t\tir = $utils.relativeToValue(ir, cr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\t\tir = r + ir;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplay.moveTo(ir, -bw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, -tw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, tw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, bw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, -bw);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis.hand._markDirtyKey(\"fill\");\n\t\tthis.pin._markDirtyKey(\"fill\");\n\t}\n}\n", "import { Theme } from \"../../core/Theme\";\r\nimport { percent } from \"../../core/util/Percent\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class RadarDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/radar\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"RadarChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tinnerRadius: 0,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"RadarColumnSeries\").setAll({\r\n\t\t\tclustered: true\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"radar\", \"column\", \"series\"]).setAll({\r\n\t\t\twidth: percent(80),\r\n\t\t\theight: percent(80)\r\n\t\t});\r\n\r\n\t\tr(\"RadarLineSeries\").setAll({\r\n\t\t\tconnectEnds: true\r\n\t\t});\r\n\r\n\t\tr(\"SmoothedRadarLineSeries\").setAll({\r\n\t\t\ttension: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererRadial\").setAll({\r\n\t\t\tminGridDistance: 40,\r\n\t\t\taxisAngle: -90,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererCircular\").setAll({\r\n\t\t\tminGridDistance: 100,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"RadialLabel\", [\"circular\"]).setAll({\r\n\t\t\ttextType: \"circular\",\r\n\t\t\tpaddingTop: 1,\r\n\t\t\tpaddingRight: 0,\r\n\t\t\tpaddingBottom: 1,\r\n\t\t\tpaddingLeft: 0,\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: 0,\r\n\t\t\tradius: 8\r\n\t\t});\r\n\r\n\r\n\t\tr(\"AxisLabelRadial\", [\"category\"]).setAll({\r\n\t\t\ttext:\"{category}\",\r\n\t\t\tpopulateText:true\r\n\t\t});\t\t\t\r\n\r\n\t\tr(\"RadialLabel\", [\"radial\"]).setAll({\r\n\t\t\ttextType: \"regular\",\r\n\t\t\tcenterX: 0,\r\n\t\t\ttextAlign: \"right\"\r\n\t\t});\r\n\r\n\t\tr(\"RadarChart\", [\"gauge\"]).setAll({\r\n\t\t\tstartAngle: 180,\r\n\t\t\tendAngle: 360,\r\n\t\t\tinnerRadius: percent(90)\r\n\t\t});\r\n\r\n\t\tr(\"ClockHand\").setAll({\r\n\t\t\ttopWidth: 1,\r\n\t\t\tbottomWidth: 10,\r\n\t\t\tradius: percent(90),\r\n\t\t\tpinRadius: 10\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"clock\", \"hand\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 1\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"clock\", \"pin\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 1\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "import type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Axis } from \"../xy/axes/Axis\";\nimport type { XYSeries } from \"../xy/series/XYSeries\";\nimport type { RadarCursor } from \"./RadarCursor\";\nimport type { RadarColumnSeries } from \"./RadarColumnSeries\";\nimport type { RadarLineSeries } from \"./RadarLineSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { RadarDefaultTheme } from \"./RadarDefaultTheme\";\nimport { XYChart, IXYChartPrivate, IXYChartSettings } from \"../xy/XYChart\";\nimport { Percent, p50, percent } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { arc } from \"d3-shape\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IRadarChartSettings extends IXYChartSettings {\n\n\t/**\n\t * Outer radius of the chart. Can be set in pixels or percent, relative to\n\t * available space.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Chart_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the chart. Can be set in pixels or percent, relative to\n\t * outer radius.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Chart_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Chart start angle in degress.\n\t *\n\t * @default -90\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Start_end_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Chart end angle in degress.\n\t *\n\t * @default 270\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Start_end_angles} for more info\n\t */\n\tendAngle?: number;\n\n\t/**\n\t * [[RadarCursor]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor} for more info\n\t */\n\tcursor?: RadarCursor;\n\n}\n\nexport interface IRadarChartPrivate extends IXYChartPrivate {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Inner radius in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Radar chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/} for more info\n * @important\n */\nexport class RadarChart extends XYChart {\n\n\t/**\n\t * [[Container]] where radar-related elements go.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly radarContainer = this.plotContainer.children.push(Container.new(this._root, { x: p50, y: p50 }));\n\n\tpublic static className: string = \"RadarChart\";\n\tpublic static classNames: Array<string> = XYChart.classNames.concat([RadarChart.className]);\n\n\tdeclare public _settings: IRadarChartSettings;\n\tdeclare public _privateSettings: IRadarChartPrivate;\n\n\tprotected _arcGenerator = arc();\n\tdeclare public _seriesType: RadarColumnSeries | RadarLineSeries;\n\n\tprotected _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(RadarDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tconst radarContainer = this.radarContainer;\n\t\tconst gridContainer = this.gridContainer;\n\t\tconst topGridContainer = this.topGridContainer;\n\t\tconst seriesContainer = this.seriesContainer;\n\t\tconst bulletsContainer = this.bulletsContainer;\n\n\t\tradarContainer.children.pushAll([gridContainer, seriesContainer, topGridContainer, bulletsContainer]);\n\n\t\tseriesContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t\tgridContainer.set(\"mask\", Graphics.new(this._root, {}));\n\n\t\tthis._disposers.push(this.plotContainer.events.on(\"boundschanged\", () => {\n\t\t\tthis._updateRadius();\n\t\t}));\n\t}\n\n\tprotected _maskGrid(){\n\t\t\n\t}\n\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this._sizeDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\n\t\t\tconst chartContainer = this.chartContainer;\n\t\t\tconst w = chartContainer.innerWidth();\n\t\t\tconst h = chartContainer.innerHeight();\n\n\t\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\t\tconst wr = w / (bounds.right - bounds.left);\n\t\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\t\tif (innerRadius instanceof Percent) {\n\t\t\t\tlet value = innerRadius.value;\n\t\t\t\tlet mr = Math.min(wr, hr);\n\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t\t}\n\n\t\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\t\tthis._maxRadius = Math.max(0, Math.min(wr, hr));\n\n\t\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\t\tthis.radarContainer.setAll({\n\t\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t\t})\n\n\t\t\tthis._updateRadius();\n\t\t}\n\t}\n\n\tprotected _addCursor(cursor: RadarCursor) {\n\t\tthis.radarContainer.children.push(cursor);\n\t}\n\n\n\t// do not delete\n\tpublic _updateRadius() {\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", percent(80)), this._maxRadius);\n\t\tthis.setPrivateRaw(\"radius\", radius);\n\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tthis.setPrivateRaw(\"innerRadius\", innerRadius);\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCircular;\n\t\t\trenderer.updateLayout();\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererRadial;\n\t\t\trenderer.updateLayout();\n\t\t})\n\n\t\tthis._updateMask(this.seriesContainer, innerRadius, radius);\n\t\tthis._updateMask(this.gridContainer, innerRadius, radius);\n\n\t\tthis.series.each((series) => {\n\t\t\tif ((series as XYSeries).get(\"maskBullets\")) {\n\t\t\t\tthis._updateMask(series.bulletsContainer, innerRadius, radius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseries.bulletsContainer.remove(\"mask\");\n\t\t\t}\n\t\t})\n\n\t\tconst cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tcursor.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateMask(container: Container, innerRadius: number, radius: number) {\n\t\tconst mask = container.get(\"mask\");\n\t\tif (mask) {\n\t\t\tmask.set(\"draw\", (display) => {\n\t\t\t\tthis._arcGenerator.context(display as any);\n\t\t\t\tthis._arcGenerator({ innerRadius: innerRadius, outerRadius: radius + .5, startAngle: (this.get(\"startAngle\", 0) + 90) * $math.RADIANS, endAngle: (this.get(\"endAngle\", 0) + 90) * $math.RADIANS });\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(axis: Axis<AxisRendererRadial | AxisRendererCircular>) {\n\t\tthis.radarContainer.children.push(axis);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic inPlot(point: IPoint, radius?: number, innerRadius?: number): boolean {\n\t\tconst r = Math.hypot(point.x, point.y);\n\t\tconst angle = $math.normalizeAngle(Math.atan2(point.y, point.x) * $math.DEGREES);\n\n\t\tlet startAngle = $math.normalizeAngle(this.get(\"startAngle\", 0));\n\t\tlet endAngle = $math.normalizeAngle(this.get(\"endAngle\", 0));\n\n\t\tlet inArc = false;\n\t\tif (startAngle < endAngle) {\n\t\t\tif (startAngle < angle && angle < endAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t}\n\n\t\tif (startAngle > endAngle) {\n\t\t\tif (angle > startAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t\tif (angle < endAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t}\n\n\t\tif (startAngle == endAngle) {\n\t\t\tinArc = true;\n\t\t}\n\n\t\tif (!inArc) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (radius == null) {\n\t\t\tradius = this.getPrivate(\"radius\", 0);\n\t\t}\n\n\t\tif (innerRadius == null) {\n\t\t\tinnerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t}\n\n\t\tif (innerRadius > radius) {\n\t\t\t[innerRadius, radius] = [radius, innerRadius];\n\t\t}\n\n\t\tif (r <= radius + .5 && r >= innerRadius - .5) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.radarContainer._display.toLocal(point);\n\t}\n\n\tprotected _handlePinch(){\n\t\t\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { RadarChart } from \"./RadarChart\";\n\nimport { BaseColumnSeries, IBaseColumnSeriesPrivate, IBaseColumnSeriesSettings, IBaseColumnSeriesDataItem, IBaseColumnSeriesAxisRange } from \"../xy/series/BaseColumnSeries\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IRadarColumnSeriesDataItem extends IBaseColumnSeriesDataItem {\n\n\t/**\n\t * Actual radius of the column in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the column in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the column in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the column in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IRadarColumnSeriesSettings extends IBaseColumnSeriesSettings {\n}\n\nexport interface IRadarColumnSeriesPrivate extends IBaseColumnSeriesPrivate {\n}\n\nexport interface IRadarColumnSeriesAxisRange extends IBaseColumnSeriesAxisRange {\n\n\t/**\n\t * List of columns in a range.\n\t */\n\tcolumns: ListTemplate<Slice>\n\n}\n\n/**\n * A column series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class RadarColumnSeries extends BaseColumnSeries {\n\n\tdeclare public _settings: IRadarColumnSeriesSettings;\n\tdeclare public _privateSettings: IRadarColumnSeriesPrivate;\n\tdeclare public _dataItemSettings: IRadarColumnSeriesDataItem;\n\tdeclare public _axisRangeType: IRadarColumnSeriesAxisRange;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<Slice>): Slice {\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\n\t\tcolumn._setDataItem(dataItem);\n\t\tlistTemplate.push(column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * A [[TemplateList]] of all columns in series.\n\t *\n\t * `columns.template` can be used to set default settings for all columns,\n\t * or to change on existing ones.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly columns: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tposition: \"absolute\",\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"radar\", \"series\", \"column\"])\n\t\t}, [this.columns.template])\n\t);\n\n\tpublic static className: string = \"RadarColumnSeries\";\n\tpublic static classNames: Array<string> = BaseColumnSeries.classNames.concat([RadarColumnSeries.className]);\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst xAxis = this.get(\"xAxis\");\n\n\t\tconst rendererY = xAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst radius = yAxis.get(\"renderer\").positionToCoordinate(positionY) + rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst angle = rendererX.positionToAngle(positionX);\n\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\tprotected _updateSeriesGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, graphics: Graphics, l: number, r: number, t: number, b: number) {\n\n\t\tgraphics.setPrivate(\"visible\", true);\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst rendererY = yAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst axisInnerRadius = rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst startAngle = rendererX.fitAngle(rendererX.positionToAngle(l));\n\t\tconst endAngle = rendererX.fitAngle(rendererX.positionToAngle(r));\n\n\t\tlet innerRadius = rendererY.positionToCoordinate(b) + axisInnerRadius;\n\t\tlet radius = rendererY.positionToCoordinate(t) + axisInnerRadius;\n\n\t\tconst slice = graphics as Slice;\n\n\t\tdataItem.setRaw(\"startAngle\", startAngle);\n\t\tdataItem.setRaw(\"endAngle\", endAngle);\n\t\tdataItem.setRaw(\"innerRadius\", innerRadius);\n\t\tdataItem.setRaw(\"radius\", radius);\n\n\t\tlet axisStartAngle = 0;\n\t\tlet axisEndAngle = 360;\n\n\t\tif (yAxis == this.get(\"baseAxis\")) {\n\t\t\taxisStartAngle = rendererY.getPrivate(\"startAngle\", 0);\n\t\t\taxisEndAngle = rendererY.getPrivate(\"endAngle\", 360);\n\t\t}\n\t\telse {\n\t\t\taxisStartAngle = rendererX.getPrivate(\"startAngle\", 0);\n\t\t\taxisEndAngle = rendererX.getPrivate(\"endAngle\", 360);\n\t\t}\n\n\t\tif (axisStartAngle > axisEndAngle) {\n\t\t\t[axisStartAngle, axisEndAngle] = [axisEndAngle, axisStartAngle];\n\t\t}\n\n\t\tif ((endAngle <= axisStartAngle) || (startAngle >= axisEndAngle) || (radius <= axisInnerRadius && innerRadius <= axisInnerRadius)) {\n\t\t\tslice.setPrivate(\"visible\", false);\n\t\t}\n\n\t\tslice.setAll({ innerRadius, radius, startAngle, arc: endAngle - startAngle });\n\t}\n\n\tprotected _shouldInclude(position: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (position < xAxis.get(\"start\") || position > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (positionX < xAxis.get(\"start\") || positionX > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._showBullets;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tlet sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as any;\n\n\t\t\tconst locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\t\tconst locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\t\tconst series = dataItem.component;\n\n\t\t\tconst xAxis = series.get(\"xAxis\");\n\t\t\tconst yAxis = series.get(\"yAxis\");\n\n\t\t\tconst positionX = xAxis.getDataItemPositionX(dataItem, series._xField, locationX, series.get(\"vcx\", 1));\n\t\t\tconst positionY = yAxis.getDataItemPositionY(dataItem, series._yField, locationY, series.get(\"vcy\", 1));\n\n\t\t\tconst startAngle = dataItem.get(\"startAngle\", 0);\n\t\t\tconst endAngle = dataItem.get(\"endAngle\", 0);\n\n\t\t\tconst radius = dataItem.get(\"radius\", 0);\n\t\t\tconst innerRadius = dataItem.get(\"innerRadius\", 0);\n\n\t\t\tif (series._shouldShowBullet(positionX, positionY)) {\n\t\t\t\tsprite.setPrivate(\"visible\", true);\n\n\t\t\t\tconst angle = startAngle + (endAngle - startAngle) * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.set(\"x\", $math.cos(angle) * r);\n\t\t\t\tsprite.set(\"y\", $math.sin(angle) * r);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleMaskBullets() {\n\n\t}\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.columns = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"radar\", \"series\", \"column\"]),\n\t\t\t}, [this.columns.template, axisRange.columns.template])\n\t\t);\n\t}\n}\n", "import type { IPoint } from \"../../core/util/IPoint\";\nimport type { RadarChart } from \"./RadarChart\"\nimport type { Percent } from \"../../core/util/Percent\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { XYCursor, IXYCursorSettings, IXYCursorPrivate, IXYCursorEvents } from \"../xy/XYCursor\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { arc } from \"d3-shape\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IRadarCursorSettings extends IXYCursorSettings {\n\n\t/**\n\t * Cursor's inner radius.\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Cursor's inner radius.\n\t */\n\tradius?: number | Percent;\n\n\t//xAxis?: Axis<AxisRendererCircular>;\n\t//yAxis?: Axis<AxisRendererRadial>;\n\n\t/**\n\t * Cursor's position angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Cursor's selection end angle in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IRadarCursorPrivate extends IXYCursorPrivate {\n\n\t/**\n\t * Actual radius of the cursor in pixels.\n\t */\n\tradius: number;\n\n\t/**\n\t * Actual inner radius of the cursor in pixels.\n\t */\n\tinnerRadius: number;\n\n\t/**\n\t * Actual start angle of the cursor in degrees.\n\t */\n\tstartAngle: number;\n\n\t/**\n\t * Actual end angle of the cursor in degrees.\n\t */\n\tendAngle: number;\n\n}\n\nexport interface IRadarCursorEvents extends IXYCursorEvents {\n}\n\n/**\n * Creates a cursor for a [[RadarChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor} for more info\n */\nexport class RadarCursor extends XYCursor {\n\tpublic static className: string = \"RadarCursor\";\n\tpublic static classNames: Array<string> = XYCursor.classNames.concat([RadarCursor.className]);\n\n\tdeclare public _settings: IRadarCursorSettings;\n\tdeclare public _privateSettings: IRadarCursorPrivate;\n\tdeclare public _events: IRadarCursorEvents;\n\n\t/**\n\t * A chart cursor is attached to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tprotected _fillGenerator = arc();\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"radar\", \"cursor\"]);\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _handleXLine() {\n\n\t}\n\n\tprotected _handleYLine() {\n\n\t}\n\n\tprotected _getPosition(point: IPoint): IPoint {\n\t\tconst radius = Math.hypot(point.x, point.y);\n\t\tlet angle = $math.normalizeAngle(Math.atan2(point.y, point.x) * $math.DEGREES);\n\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\n\t\tlet startAngle = $math.normalizeAngle(this.getPrivate(\"startAngle\"));\n\t\tlet endAngle = $math.normalizeAngle(this.getPrivate(\"endAngle\"));\n\n\t\tif (endAngle < startAngle || endAngle == startAngle) {\n\t\t\tif (angle < startAngle) {\n\t\t\t\tangle += 360\n\t\t\t}\n\n\t\t\tendAngle = endAngle + 360;\n\t\t}\n\n\t\tlet xPos = (angle - startAngle) / (endAngle - startAngle);\n\n\t\tif (xPos < 0) {\n\t\t\txPos = 1 + xPos;\n\t\t}\n\n\t\tif (xPos < 0.003) {\n\t\t\txPos = 0;\n\t\t}\n\n\t\tif (xPos > 0.997) {\n\t\t\txPos = 1;\n\t\t}\n\n\t\treturn { x: xPos, y: (radius - innerRadius) / (this.getPrivate(\"radius\") - innerRadius) };\n\t}\n\n\tprotected _getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\t\tconst startAngle = this.getPrivate(\"startAngle\");\n\t\tconst endAngle = this.getPrivate(\"endAngle\");\n\t\tconst radius = this.getPrivate(\"radius\");\n\n\t\tconst angle = startAngle + positionX * (endAngle - startAngle);\n\t\tconst r = innerRadius + (radius - innerRadius) * positionY;\n\n\t\treturn { x: r * $math.cos(angle), y: r * $math.sin(angle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tthis.setPrivate(\"radius\", $utils.relativeToValue(this.get(\"radius\", p100), radius));\n\n\t\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius);\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"innerRadius\", innerRadius);\n\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\t\t}\n\t}\n\n\tprotected _updateLines(x: number, y: number) {\n\t\tif (!this._tooltipX) {\n\t\t\tthis._drawXLine(x, y);\n\t\t}\n\t\tif (!this._tooltipY) {\n\t\t\tthis._drawYLine(x, y);\n\t\t}\n\t}\n\n\tprotected _drawXLine(x: number, y: number) {\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\t\tconst radius = this.getPrivate(\"radius\");\n\t\tconst angle = Math.atan2(y, x);\n\n\t\tthis.lineX.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(innerRadius * Math.cos(angle), innerRadius * Math.sin(angle));\n\t\t\tdisplay.lineTo(radius * Math.cos(angle), radius * Math.sin(angle));\n\t\t})\n\t}\n\n\tprotected _drawYLine(x: number, y: number) {\n\t\tconst positionRadius = Math.hypot(x, y);\n\n\t\tthis.lineY.set(\"draw\", (display) => {\n\t\t\tdisplay.arc(0, 0, positionRadius, this.getPrivate(\"startAngle\", 0) * $math.RADIANS, this.getPrivate(\"endAngle\", 0) * $math.RADIANS);\n\t\t})\n\t}\n\n\tprotected _updateXLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\");\n\t\tif (point) {\n\t\t\tpoint = this._display.toLocal(point);\n\t\t\tthis._drawXLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _updateYLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\")\n\t\tif (point) {\n\t\t\tpoint = this._display.toLocal(point);\n\t\t\tthis._drawYLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _inPlot(point: IPoint): boolean {\n\t\tconst chart = this.chart;\n\n\t\tif (chart) {\n\t\t\treturn chart.inPlot(point, this.getPrivate(\"radius\"), this.getPrivate(\"innerRadius\"));\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _updateSelection(point: IPoint) {\n\n\t\tthis.selection.set(\"draw\", (display) => {\n\t\t\tconst behavior = this.get(\"behavior\");\n\n\t\t\tconst downPoint = this._downPoint;\n\t\t\tconst cursorStartAngle = this.getPrivate(\"startAngle\");\n\t\t\tconst cursorEndAngle = this.getPrivate(\"endAngle\");\n\t\t\tlet cursorRadius = this.getPrivate(\"radius\");\n\t\t\tlet cursorInnerRadius = this.getPrivate(\"innerRadius\");\n\n\t\t\tif (cursorRadius < cursorInnerRadius) {\n\t\t\t\t[cursorRadius, cursorInnerRadius] = [cursorInnerRadius, cursorRadius];\n\t\t\t}\n\n\t\t\tlet startAngle = cursorStartAngle;\n\t\t\tlet endAngle = cursorEndAngle;\n\t\t\tlet radius = cursorRadius;\n\t\t\tlet innerRadius = cursorInnerRadius;\n\n\t\t\tif (downPoint) {\n\t\t\t\tif (behavior == \"zoomXY\" || behavior == \"selectXY\") {\n\t\t\t\t\tstartAngle = Math.atan2(downPoint.y, downPoint.x) * $math.DEGREES;\n\t\t\t\t\tendAngle = Math.atan2(point.y, point.x) * $math.DEGREES;\n\t\t\t\t\tinnerRadius = Math.hypot(downPoint.x, downPoint.y);\n\t\t\t\t\tradius = Math.hypot(point.x, point.y);\n\t\t\t\t}\n\t\t\t\telse if (behavior == \"zoomX\" || behavior == \"selectX\") {\n\t\t\t\t\tstartAngle = Math.atan2(downPoint.y, downPoint.x) * $math.DEGREES;\n\t\t\t\t\tendAngle = Math.atan2(point.y, point.x) * $math.DEGREES;\n\t\t\t\t}\n\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\n\t\t\t\t\tinnerRadius = Math.hypot(downPoint.x, downPoint.y);\n\t\t\t\t\tradius = Math.hypot(point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinnerRadius = $math.fitToRange(innerRadius, cursorInnerRadius, cursorRadius);\n\t\t\tradius = $math.fitToRange(radius, cursorInnerRadius, cursorRadius);\n\n\t\t\tstartAngle = $math.fitAngleToRange(startAngle, cursorStartAngle, cursorEndAngle);\n\t\t\tendAngle = $math.fitAngleToRange(endAngle, cursorStartAngle, cursorEndAngle);\n\n\t\t\tif (startAngle == endAngle) {\n\t\t\t\tendAngle = startAngle + 360;\n\t\t\t}\n\n\t\t\tstartAngle *= $math.RADIANS;\n\t\t\tendAngle *= $math.RADIANS;\n\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tthis._fillGenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: startAngle + Math.PI / 2, endAngle: endAngle + Math.PI / 2 });\n\t\t})\n\t}\n}\n", "import { LineSeries, ILineSeriesPrivate, ILineSeriesSettings, ILineSeriesDataItem, ILineSeriesAxisRange } from \"../xy/series/LineSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport type { RadarChart } from \"./RadarChart\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IRadarLineSeriesDataItem extends ILineSeriesDataItem {\n}\n\nexport interface IRadarLineSeriesSettings extends ILineSeriesSettings {\n\n\t/**\n\t * If set to `true` (default), series will connect its last data point to the\n\t * first one with a line, thus completing full circle.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-series/#Connecting_ends} for more info\n\t * @default @true\n\t */\n\tconnectEnds?: boolean;\n\n}\n\nexport interface IRadarLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\nexport interface IRadarLineSeriesAxisRange extends ILineSeriesAxisRange {\n}\n\n/**\n * Draws a line series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class RadarLineSeries extends LineSeries {\n\n\tdeclare public _settings: IRadarLineSeriesSettings;\n\tdeclare public _privateSettings: IRadarLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IRadarLineSeriesDataItem;\n\tdeclare public _axisRangeType: IRadarLineSeriesAxisRange;\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tpublic static className: string = \"RadarLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([RadarLineSeries.className]);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t}\n\n\tprotected _handleMaskBullets() {\n\n\t}\n\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst xAxis = this.get(\"xAxis\");\n\n\t\tconst rendererY = yAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst radius = rendererY.positionToCoordinate(positionY) + rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst angle = rendererX.positionToAngle(positionX);\n\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\tprotected _endLine(points: Array<Array<number>>, firstPoint: Array<number>) {\n\t\tif (this.get(\"connectEnds\") && firstPoint) {\n\t\t\tpoints.push(firstPoint);\n\t\t}\n\t}\n\n\n\tprotected _shouldInclude(position: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (position < xAxis.get(\"start\") || position > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (positionX < xAxis.get(\"start\") || positionX > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._showBullets;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tlet sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tlet dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\n\t\t\tlet locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\t\tlet locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\t\tlet xAxis = this.get(\"xAxis\");\n\t\t\tlet yAxis = this.get(\"yAxis\");\n\t\t\t//let baseAxis = this.get(\"baseAxis\");\n\n\t\t\t//if(xAxis == baseAxis){\n\t\t\t//locationY = 1;\n\t\t\t//}\n\t\t\t//else if(yAxis == baseAxis){\n\t\t\t//locationX = 1;\n\t\t\t//}\n\n\t\t\tconst positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get(\"vcx\", 1));\n\t\t\tconst positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get(\"vcy\", 1))\n\n\t\t\tlet point = this.getPoint(positionX, positionY);\n\n\t\t\tif (this._shouldShowBullet(positionX, positionY)) {\n\t\t\t\tsprite.setPrivate(\"visible\", true);\n\n\t\t\t\tsprite.set(\"x\", point.x);\n\t\t\t\tsprite.set(\"y\", point.y);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { RadarLineSeries, IRadarLineSeriesSettings, IRadarLineSeriesPrivate, IRadarLineSeriesDataItem } from \"./RadarLineSeries\";\nimport { curveCardinalClosed, CurveCardinalFactory, curveCardinal } from \"d3-shape\";\n\nexport interface ISmoothedRadarLineSeriesDataItem extends IRadarLineSeriesDataItem {\n}\n\nexport interface ISmoothedRadarLineSeriesSettings extends IRadarLineSeriesSettings {\n\n\t/**\n\t * Tension of curve.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/#Line_tension} for more info\n\t * @default 0.5\n\t */\n\ttension?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcurveFactory?: CurveCardinalFactory\n\n}\n\nexport interface ISmoothedRadarLineSeriesPrivate extends IRadarLineSeriesPrivate {\n}\n\n/**\n * Draws a smoothed line series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class SmoothedRadarLineSeries extends RadarLineSeries {\n\tpublic static className: string = \"SmoothedRadarLineSeries\";\n\tpublic static classNames: Array<string> = RadarLineSeries.classNames.concat([SmoothedRadarLineSeries.className]);\n\n\tdeclare public _settings: ISmoothedRadarLineSeriesSettings;\n\tdeclare public _privateSettings: ISmoothedRadarLineSeriesPrivate;\n\tdeclare public _dataItemSettings: ISmoothedRadarLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveCardinalClosed.tension(this.get(\"tension\", 0)));\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"connectEnds\")) {\n\t\t\tconst connectEnds = this.get(\"connectEnds\");\n\t\t\tif (connectEnds) {\n\t\t\t\tthis.setRaw(\"curveFactory\", curveCardinalClosed.tension(this.get(\"tension\", 0)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setRaw(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0)));\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"tension\")) {\n\t\t\tlet cf = this.get(\"curveFactory\")!;\n\t\t\tif (cf) {\n\t\t\t\tcf.tension(this.get(\"tension\", 0));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _endLine(_points: Array<Array<number>>, _firstPoint: Array<number>) {\n\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FM,IAAO,uBAAP,cAAoC,aAAY;EAAtD,cAAA;;AAcC,WAAA,eAAA,MAAA,UAAA;;;;aAAwD,IAAI,aAC3D,SAAS,IAAI,CAAA,CAAE,GACf,MAAM,gBAAgB,KAAK,KAAK,OAAO;QACtC,WAAkB,UAAU,KAAK,OAAO,SAAS,IAAI,aAAa,CAAA,CAAE,GAAG,KAAK,IAAI,aAAa,CAAA,CAAE,CAAC;SAC9F,CAAC,KAAK,OAAO,QAAQ,CAAC,CAAC;;AAW3B,WAAA,eAAA,MAAA,aAAA;;;;aAAiD,IAAI,aACpD,SAAS,IAAI,CAAA,CAAE,GACf,MAAM,MAAM,KAAK,KAAK,OAAO;QAC5B,WAAkB,UAAU,KAAK,UAAU,SAAS,IAAI,aAAa,CAAC,MAAM,CAAC,GAAG,KAAK,IAAI,aAAa,CAAA,CAAE,CAAC;SACvG,CAAC,KAAK,UAAU,QAAQ,CAAC,CAAC;;AAU9B,WAAA,eAAA,MAAA,kBAAA;;;;aAA2B,YAAG;;EA4U/B;EA1UQ,YAAS;AACf,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,YAAY,UAAU,CAAC;AAC9F,UAAM,UAAS;AACf,SAAK,cAAc,UAAU,GAAG;AAChC,SAAK,OAAO,YAAY,UAAU;EACnC;EAEO,WAAQ;AACd,UAAM,SAAQ;AAEd,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,UAAU,GAAG;AACpH,WAAK,aAAY;;EAEnB;;;;EAKO,cAAW;AACjB,UAAM,YAAW;AACjB,UAAM,OAAO,KAAK;AAClB,SAAK,gBAAgB,IAAI,cAAc,KAAK;EAC7C;;;;EAKO,eAAY;AAClB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACV,YAAM,SAAS,MAAM,WAAW,UAAU,CAAC;AAE3C,UAAI,IAAW,gBAAgB,KAAK,IAAI,UAAU,IAAI,GAAG,MAAM;AAE/D,UAAI,IAAI,GAAG;AACV,YAAI,SAAS;;AAGd,WAAK,WAAW,UAAU,CAAC;AAE3B,UAAI,KAAY,gBAAgB,KAAK,IAAI,eAAe,MAAM,WAAW,eAAe,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,WAAW,cAAc,CAAC;AAEvI,UAAI,KAAK,GAAG;AACX,aAAK,IAAI;;AAGV,WAAK,WAAW,eAAe,EAAE;AAEjC,UAAI,aAAa,KAAK,IAAI,cAAc,MAAM,IAAI,cAAc,GAAG,CAAC;AACpE,UAAI,WAAW,KAAK,IAAI,YAAY,MAAM,IAAI,YAAY,GAAG,CAAC;AAE9D,WAAK,WAAW,cAAc,UAAU;AACxC,WAAK,WAAW,YAAY,QAAQ;AAEpC,WAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,cAAM,KAAK,KAAK,gBAAgB,CAAC;AACjC,gBAAQ,OAAO,GAAG,GAAG,GAAG,CAAC;AAEzB,YAAI,aAAa,UAAU;AAC1B,WAAC,YAAY,QAAQ,IAAI,CAAC,UAAU,UAAU;;AAG/C,gBAAQ,IAAI,GAAG,GAAG,GAAG,aAAmB,SAAS,WAAiB,OAAO;MAC1E,CAAC;AAED,WAAK,KAAK,cAAa;;EAEzB;;;;EAKO,WAAW,MAAa,UAAmB,aAAoB;AACrE,QAAI,MAAM;AAET,UAAI,YAAY,MAAM;AACrB,mBAAW;;AAGZ,UAAI,WAAW,KAAK,IAAI,YAAY,GAAG;AACvC,UAAI,eAAe,QAAQ,eAAe,UAAU;AACnD,mBAAW,YAAY,cAAc,YAAY;;AAGlD,UAAI,SAAS,KAAK,WAAW,UAAU,CAAC;AACxC,UAAI,cAAc,KAAK,WAAW,eAAe,CAAC;AAClD,UAAI,QAAQ,KAAK,gBAAgB,QAAQ;AAEzC,WAAK,iBAAiB,MAAM,UAAU,GAAG,CAAC;AAE1C,UAAI,UAAU,MAAM;AACnB,aAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,kBAAQ,OAAO,cAAoB,IAAI,KAAK,GAAG,cAAoB,IAAI,KAAK,CAAC;AAC7E,kBAAQ,OAAO,SAAe,IAAI,KAAK,GAAG,SAAe,IAAI,KAAK,CAAC;QACpE,CAAC;;;EAGJ;;;;;;;EAQO,gBAAgB,UAAgB;AACtC,UAAM,OAA2B,KAAK;AACtC,UAAM,aAAa,KAAK,WAAW,cAAc,CAAC;AAClD,UAAM,WAAW,KAAK,WAAW,YAAY,GAAG;AAEhD,UAAM,QAAQ,KAAK,IAAI,SAAS,CAAC;AACjC,UAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAE7B,QAAI,OAAO,WAAW,eAAe,MAAM;AAE3C,QAAI;AAEJ,QAAI,KAAK,IAAI,UAAU,GAAG;AACzB,cAAQ,cAAc,MAAM,YAAY;WAEpC;AACJ,cAAQ,cAAc,WAAW,SAAS;;AAG3C,WAAO;EACR;;EAGU,kBAAe;EAAK;;;;;;;EAQvB,gBAAgB,UAAgB;AACtC,UAAM,SAAS,KAAK,WAAW,UAAU,CAAC;AAC1C,UAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAC3C,WAAO,EAAE,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC;EACpE;;;;EAKO,YAAY,OAAyB,UAAmB,aAAsB,OAAc;AAClG,QAAI,OAAO;AACV,UAAI,YAAY,MAAM;AACrB,mBAAW;;AAGZ,UAAI,WAAW;AACf,UAAI,SAAS,QAAQ,QAAQ,GAAG;AAC/B,mBAAW,MAAM,IAAI,iBAAiB,QAAQ;aAE1C;AACJ,mBAAW,MAAM,IAAI,YAAY,QAAQ;;AAG1C,UAAI,eAAe,QAAQ,eAAe,UAAU;AACnD,mBAAW,YAAY,cAAc,YAAY;;AAGlD,YAAM,SAAS,KAAK,WAAW,UAAU,CAAC;AAC1C,YAAM,cAAc,KAAK,WAAW,eAAe,CAAC;AACpD,YAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAE3C,YAAM,WAAW,UAAU,MAAM;AACjC,YAAM,WAAW,eAAe,WAAW;AAC3C,YAAM,IAAI,cAAc,KAAK;AAE7B,WAAK,iBAAiB,OAAO,UAAU,MAAM,IAAI,eAAe,CAAC,GAAG,MAAM,IAAI,eAAe,CAAC,CAAC;;EAEjG;;;;EAKO,eAAe,MAAgB,YAAqB,UAAiB;AAC3E,SAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,UAAI,cAAc,MAAM;AACvB,qBAAa,KAAK,WAAW,cAAc,CAAC;;AAE7C,UAAI,YAAY,MAAM;AACrB,mBAAW,KAAK,WAAW,YAAY,CAAC;;AAEzC,YAAM,KAAK,KAAK,WAAW,eAAe,CAAC;AAC3C,YAAM,KAAK,KAAK,WAAW,UAAU,CAAC;AACtC,WAAK,eAAe,QAAQ,OAAc;AAC1C,WAAK,eAAe,EAAE,aAAa,IAAI,aAAa,IAAI,aAAa,aAAa,MAAY,SAAS,WAAW,WAAW,MAAY,QAAO,CAAE;IACnJ,CAAC;EACF;;;;EAKO,WAAW,MAAiB,UAAmB,aAAsB,OAAc;AACzF,QAAI,MAAM;AACT,UAAI,YAAY,MAAM;AACrB,mBAAW;;AAGZ,UAAI,WAAW;AACf,UAAI,SAAS,QAAQ,QAAQ,GAAG;AAC/B,mBAAW,KAAK,IAAI,iBAAiB,QAAQ;aAEzC;AACJ,mBAAW,KAAK,IAAI,YAAY,QAAQ;;AAGzC,UAAI,eAAe,QAAQ,eAAe,UAAU;AACnD,mBAAW,YAAY,cAAc,YAAY;;AAGlD,UAAI,SAAS,KAAK,IAAI,UAAU,CAAC;AACjC,YAAM,SAAS,KAAK,IAAI,QAAQ;AAEhC,UAAI,QAAQ;AACX,kBAAU;;AAGX,UAAI,SAAS,KAAK,WAAW,UAAU,CAAC;AACxC,UAAI,QAAQ,KAAK,gBAAgB,QAAQ;AAEzC,WAAK,iBAAiB,MAAM,UAAU,KAAK,IAAI,eAAe,CAAC,GAAG,KAAK,IAAI,eAAe,CAAC,CAAC;AAE5F,UAAI,UAAU,MAAM;AACnB,aAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,kBAAQ,OAAO,SAAe,IAAI,KAAK,GAAG,SAAe,IAAI,KAAK,CAAC;AACnE,oBAAU;AACV,kBAAQ,OAAO,SAAe,IAAI,KAAK,GAAG,SAAe,IAAI,KAAK,CAAC;QACpE,CAAC;;;EAGJ;;;;EAKO,aAAa,QAAqB,UAAmB,aAAoB;AAC/E,QAAI,QAAQ;AACX,YAAM,SAAS,OAAO,IAAI,QAAQ;AAElC,UAAI,QAAQ;AACX,YAAI,YAAY,MAAM;AACrB,qBAAW;;AAGZ,YAAI,WAAW,OAAO,IAAI,YAAY,GAAG;AACzC,YAAI,eAAe,QAAQ,eAAe,UAAU;AACnD,qBAAW,YAAY,cAAc,YAAY;;AAGlD,YAAI,SAAS,KAAK,WAAW,UAAU,CAAC;AACxC,YAAI,QAAQ,KAAK,gBAAgB,QAAQ;AAEzC,aAAK,iBAAiB,QAAQ,UAAU,GAAG,CAAC;AAE5C,eAAO,OAAO,EAAE,UAAU,OAAO,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC,CAAE;;;EAGhG;;;;EAKO,WAAW,MAAc,UAAmB,aAAoB;AACtE,QAAI,MAAM;AACT,UAAI,YAAY,MAAM;AACrB,mBAAW;;AAEZ,UAAI,eAAe,MAAM;AACxB,sBAAc;;AAGf,UAAI,aAAa,KAAK,SAAS,KAAK,gBAAgB,QAAQ,CAAC;AAC7D,UAAI,WAAW,KAAK,SAAS,KAAK,gBAAgB,WAAW,CAAC;AAC9D,WAAK,OAAO,EAAE,YAAwB,KAAK,WAAW,WAAU,CAAE;AAElE,WAAK,SAAS,eAAe,KAAK,WAAW,aAAa,CAAC;AAC3D,WAAK,SAAS,UAAU,KAAK,WAAW,QAAQ,CAAC;;EAEnD;;;;EAKO,SAAS,OAAa;AAC5B,UAAM,aAAa,KAAK,WAAW,cAAc,CAAC;AAClD,UAAM,WAAW,KAAK,WAAW,YAAY,CAAC;AAE9C,UAAM,WAAW,KAAK,IAAI,YAAY,QAAQ;AAC9C,UAAM,WAAW,KAAK,IAAI,YAAY,QAAQ;AAE9C,QAAI,QAAQ,UAAU;AACrB,cAAQ;;AAGT,QAAI,QAAQ,UAAU;AACrB,cAAQ;;AAGT,WAAO;EACR;;;;;;EAOO,aAAU;AAChB,WAAO,KAAK,IAAI,KAAK,WAAW,UAAU,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,WAAW,YAAY,GAAG,IAAI,KAAK,WAAW,cAAc,CAAC,KAAK,GAAG;EACzI;;;;EAKO,gBAAgB,SAAkB,UAAgB;AACxD,QAAI,SAAS,KAAK,WAAW,UAAU,CAAC;AACxC,UAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAE3C,SAAK,iBAAiB,SAAS,EAAE,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC,CAAE;EAC9F;;;;EAKO,oBAAoB,UAAiB;EAE5C;;AAjVA,OAAA,eAAA,sBAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,sBAAA,cAAA;;;;SAA0C,aAAa,WAAW,OAAO,CAAC,qBAAqB,SAAS,CAAC;;;;ACtCpG,IAAO,qBAAP,cAAkC,aAAY;EAApD,cAAA;;AAaC,WAAA,eAAA,MAAA,kBAAA;;;;aAA2B,YAAG;;AAS9B,WAAA,eAAA,MAAA,UAAA;;;;aAAwD,IAAI,aAC3D,SAAS,IAAI,CAAA,CAAE,GACf,MAAM,gBAAgB,KAAK,KAAK,OAAO;QACtC,WAAkB,UAAU,KAAK,OAAO,SAAS,IAAI,aAAa,CAAA,CAAE,GAAG,KAAK,IAAI,aAAa,CAAA,CAAE,CAAC;SAC9F,CAAC,KAAK,OAAO,QAAQ,CAAC,CAAC;;EAiS5B;EA9RQ,YAAS;AACf,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,YAAY,QAAQ,CAAC;AAC5F,UAAM,UAAS;AACf,SAAK,WAAW,UAAU,GAAG;AAC7B,SAAK,OAAO,YAAY,UAAU;EACnC;EAEO,WAAQ;AACd,UAAM,SAAQ;AAEd,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,UAAU,GAAG;AACpH,WAAK,aAAY;;EAEnB;;;;EAKO,cAAW;AACjB,UAAM,YAAW;EAClB;;;;EAKO,eAAY;AAClB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACV,YAAM,SAAS,MAAM,WAAW,UAAU,CAAC;AAE3C,UAAI,IAAW,gBAAgB,KAAK,IAAI,UAAU,IAAI,GAAG,MAAM;AAC/D,UAAI,KAAY,gBAAgB,KAAK,IAAI,eAAe,MAAM,WAAW,eAAe,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,WAAW,cAAc,CAAC;AAEvI,UAAI,KAAK,GAAG;AACX,aAAK,IAAI;;AAGV,WAAK,WAAW,UAAU,CAAC;AAC3B,WAAK,WAAW,eAAe,EAAE;AACjC,UAAI,aAAa,KAAK,IAAI,cAAc,MAAM,IAAI,cAAc,GAAG,CAAC;AACpE,UAAI,WAAW,KAAK,IAAI,YAAY,MAAM,IAAI,YAAY,GAAG,CAAC;AAE9D,WAAK,WAAW,cAAc,UAAU;AACxC,WAAK,WAAW,YAAY,QAAQ;AAEpC,YAAM,YAAY,KAAK,IAAI,aAAa,CAAC;AAEzC,WAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,gBAAQ,OAAO,KAAW,IAAI,SAAS,GAAG,KAAW,IAAI,SAAS,CAAC;AACnE,gBAAQ,OAAO,IAAU,IAAI,SAAS,GAAG,IAAU,IAAI,SAAS,CAAC;MAClE,CAAC;AAED,WAAK,KAAK,cAAa;;EAEzB;;;;EAKO,WAAW,MAAa,UAAmB,aAAoB;AACrE,QAAI,MAAM;AAET,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,mBAAW;;AAGZ,UAAI,WAAW,KAAK,IAAI,YAAY,GAAG;AACvC,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC3D,mBAAW,YAAY,cAAc,YAAY;;AAGlD,UAAI,SAAS,KAAK,qBAAqB,QAAQ,IAAI,KAAK,WAAW,eAAe,CAAC;AAEnF,WAAK,iBAAiB,MAAM,UAAU,GAAG,CAAC;AAE1C,UAAU,SAAS,MAAM,GAAG;AAC3B,aAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,cAAI,aAAa,KAAK,WAAW,cAAc,CAAC,IAAU;AAC1D,cAAI,WAAW,KAAK,WAAW,YAAY,CAAC,IAAU;AACtD,kBAAQ,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,MAAM,GAAG,KAAK,IAAI,YAAY,QAAQ,GAAG,KAAK,IAAI,YAAY,QAAQ,CAAC;QACtG,CAAC;;;EAGJ;;EAGU,kBAAe;EAAK;;;;;;;EAQvB,gBAAgB,UAAgB;AACtC,UAAM,cAAc,KAAK,WAAW,eAAe,CAAC;AACpD,UAAM,SAAS,KAAK,qBAAqB,QAAQ,IAAI;AACrD,UAAM,YAAY,KAAK,IAAI,aAAa,CAAC;AACzC,WAAO,EAAE,GAAG,SAAe,IAAI,SAAS,GAAG,GAAG,SAAe,IAAI,SAAS,EAAC;EAC5E;;;;EAKO,YAAY,OAAyB,UAAmB,aAAsB,OAAc;AAClG,QAAI,OAAO;AACV,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,mBAAW;;AAGZ,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACvC,mBAAW,MAAM,IAAI,iBAAiB,QAAQ;aAE1C;AACJ,mBAAW,MAAM,IAAI,YAAY,QAAQ;;AAG1C,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC3D,mBAAW,YAAY,cAAc,YAAY;;AAGlD,YAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAE3C,UAAI,SAAS,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC;AAExC,YAAM,WAAW,UAAU,MAAM;AACjC,YAAM,WAAW,eAAe,MAAM;AACtC,YAAM,IAAI,cAAc,KAAK,IAAI,WAAW,CAAC;AAE7C,WAAK,iBAAiB,OAAO,UAAU,MAAM,IAAI,eAAe,CAAC,GAAG,MAAM,IAAI,eAAe,CAAC,CAAC;;EAEjG;EAEU,eAAe,MAAgB,IAAY,IAAU;AAC9D,SAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,WAAK,KAAK,IAAI,GAAG,EAAE;AACnB,WAAK,KAAK,IAAI,GAAG,EAAE;AACnB,WAAK,eAAe,QAAQ,OAAc;AAC1C,UAAI,cAAc,KAAK,WAAW,cAAc,CAAC,IAAI,MAAY;AACjE,UAAI,YAAY,KAAK,WAAW,YAAY,CAAC,IAAI,MAAY;AAE7D,UAAI,WAAW,YAAY;AAC1B,SAAC,YAAY,QAAQ,IAAI,CAAC,UAAU,UAAU;;AAG/C,WAAK,eAAe,EAAE,aAAa,IAAI,aAAa,IAAI,YAAwB,SAAkB,CAAE;IACrG,CAAC;EACF;;;;EAKO,WAAW,MAAiB,UAAmB,aAAsB,OAAc;AACzF,QAAI,MAAM;AAET,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,mBAAW;;AAGZ,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACvC,mBAAW,KAAK,IAAI,iBAAiB,QAAQ;aAEzC;AACJ,mBAAW,KAAK,IAAI,YAAY,QAAQ;;AAGzC,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC3D,mBAAW,YAAY,cAAc,YAAY;;AAGlD,YAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAE3C,WAAK,IAAI,KAAK,MAAM,CAAC;AACrB,WAAK,IAAI,KAAK,MAAM,CAAC;AAErB,UAAI,SAAS,KAAK,IAAI,UAAU,CAAC;AACjC,YAAM,SAAS,KAAK,IAAI,QAAQ;AAEhC,UAAI,QAAQ;AACX,kBAAU;;AAGX,YAAM,YAAY,KAAK,IAAI,aAAa,CAAC,IAAI;AAE7C,WAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,SAAe,IAAI,SAAS,GAAG,SAAe,IAAI,SAAS,CAAC;MAC5E,CAAC;AAED,WAAK,iBAAiB,MAAM,UAAU,KAAK,IAAI,eAAe,CAAC,GAAG,KAAK,IAAI,eAAe,CAAC,CAAC;;EAE9F;;;;EAKO,aAAa,QAAqB,UAAmB,aAAoB;AAC/E,QAAI,QAAQ;AAEX,YAAM,SAAS,OAAO,IAAI,QAAQ;AAElC,UAAI,QAAQ;AAEX,YAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,qBAAW;;AAGZ,YAAI,WAAW,OAAO,IAAI,YAAY,GAAG;AACzC,YAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC3D,qBAAW,YAAY,cAAc,YAAY;;AAGlD,cAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAE3C,eAAO,OAAO,EAAE,GAAG,MAAM,GAAG,GAAG,MAAM,EAAC,CAAE;AAExC,aAAK,iBAAiB,QAAQ,UAAU,GAAG,CAAC;;;EAG/C;;;;EAKO,WAAW,MAAiB,UAAmB,aAAoB;AACzE,QAAI,MAAM;AACT,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,mBAAW;;AAEZ,UAAI,CAAO,SAAS,WAAW,GAAG;AACjC,sBAAc;;AAGf,YAAM,cAAc,KAAK,WAAW,eAAe,CAAC;AAEpD,UAAI,KAAK,KAAK,qBAAqB,QAAQ,IAAI;AAC/C,UAAI,KAAK,KAAK,qBAAqB,WAAW,IAAI;AAElD,WAAK,eAAe,MAAM,IAAI,EAAE;;EAElC;;;;;;EAOO,aAAU;AAChB,WAAO,KAAK,WAAW,UAAU,CAAC,IAAI,KAAK,WAAW,eAAe,CAAC;EACvE;;;;EAKO,oBAAoB,UAAiB;EAE5C;;;;;;;EAQO,qBAAqB,UAAgB;AAC3C,QAAI,KAAK,WAAW;AACnB,iBAAW,KAAK,IAAI,KAAK,MAAM,QAAQ;AACvC,cAAQ,KAAK,OAAO,YAAY,KAAK;WAEjC;AACJ,iBAAW,KAAK,IAAI,KAAK,QAAQ,QAAQ;AACzC,cAAQ,WAAW,KAAK,UAAU,KAAK;;EAEzC;;;;EAKO,gBAAgB,SAAkB,UAAgB;AACxD,QAAI,SAAS,KAAK,WAAW,eAAe,CAAC,IAAI,KAAK,qBAAqB,QAAQ;AACnF,UAAM,QAAQ,KAAK,IAAI,aAAa,CAAC;AAErC,SAAK,iBAAiB,SAAS,EAAE,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC,CAAE;EAC9F;;AAnTA,OAAA,eAAA,oBAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,oBAAA,cAAA;;;;SAA0C,aAAa,WAAW,OAAO,CAAC,mBAAmB,SAAS,CAAC;;;;ACpClG,IAAO,YAAP,cAAyB,UAAS;EAAxC,cAAA;;AAaC,WAAA,eAAA,MAAA,QAAA;;;;aAAiC,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,OAAO,EAAE,WAAW,CAAC,MAAM,EAAC,CAAE,CAAC;;AAOrG,WAAA,eAAA,MAAA,OAAA;;;;aAAgC,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,OAAO,EAAE,WAAW,CAAC,KAAK,EAAC,CAAE,CAAC;;EAiGpG;EA/FW,YAAS;AAClB,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,OAAO,CAAC;AAE/E,UAAM,UAAS;AAGf,SAAK,IAAI,SAAS,QAAQ,CAAC,CAAC;AAE5B,SAAK,SAAS,IAAI,KAAK,MAAK;AAC3B,aAAO;IACR,CAAC;AAED,SAAK,SAAS,IAAI,KAAK,MAAK;AAC3B,aAAO;IACR,CAAC;AAED,SAAK,IAAI,IAAI,QAAQ,CAAC,SAAS,aAAsB;AACpD,YAAM,SAAS,SAAS;AACxB,UAAI,QAAQ;AACX,cAAM,WAAW,OAAO;AACxB,YAAI,UAAU;AACb,gBAAM,OAAO,SAAS;AACtB,cAAI,MAAM;AACT,kBAAM,QAAQ,KAAK;AACnB,gBAAI,OAAO;AACV,oBAAM,KAAK,MAAM,WAAW,UAAU,CAAC;AACvC,kBAAI,IAAW,gBAAgB,OAAO,IAAI,aAAa,CAAC,GAAG,EAAE;AAC7D,kBAAG,IAAI,GAAE;AACR,oBAAI,KAAK;;AAEV,sBAAQ,OAAO,GAAG,CAAC;AACnB,sBAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;;;;;IAKhC,CAAC;AAED,SAAK,KAAK,IAAI,QAAQ,CAAC,SAAS,aAAsB;AACrD,YAAM,SAAS,SAAS;AAExB,UAAI,QAAQ;AAEX,YAAI,SAAS,OAAO;AAEpB,YAAI,QAAQ;AACX,iBAAO,IAAI,SAAS,QAAQ,CAAC,CAAC;;AAG/B,cAAM,WAAW,OAAO;AAExB,YAAI,UAAU;AACb,gBAAM,OAAO,SAAS;AACtB,cAAI,MAAM;AACT,kBAAM,QAAQ,KAAK;AACnB,gBAAI,OAAO;AACV,oBAAM,KAAK,OAAO,IAAI,eAAe,EAAE,IAAI;AAC3C,oBAAM,KAAK,OAAO,IAAI,YAAY,CAAC,IAAI;AACvC,oBAAM,KAAK,MAAM,WAAW,UAAU,CAAC;AACvC,kBAAI,IAAW,gBAAgB,OAAO,IAAI,UAAU,CAAC,GAAG,EAAE;AAE1D,kBAAG,IAAI,GAAE;AACR,oBAAI,KAAK;;AAGV,kBAAI,KAAK,OAAO,IAAI,eAAe,CAAC;AAEpC,kBAAI,cAAc,SAAS;AAC1B,qBAAY,gBAAgB,IAAI,EAAE;qBAE9B;AACJ,oBAAI,KAAK,GAAG;AACX,sBAAI,KAAK,GAAG;AACX,yBAAK,IAAI;;;;AAKZ,sBAAQ,OAAO,IAAI,CAAC,EAAE;AACtB,sBAAQ,OAAO,GAAG,CAAC,EAAE;AACrB,sBAAQ,OAAO,GAAG,EAAE;AACpB,sBAAQ,OAAO,IAAI,EAAE;AACrB,sBAAQ,OAAO,IAAI,CAAC,EAAE;;;;;IAK3B,CAAC;EACF;EAEO,mBAAgB;AACtB,UAAM,iBAAgB;AACtB,SAAK,KAAK,cAAc,MAAM;AAC9B,SAAK,IAAI,cAAc,MAAM;EAC9B;;AA/GA,OAAA,eAAA,WAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,WAAA,cAAA;;;;SAA0C,UAAU,WAAW,OAAO,CAAC,UAAU,SAAS,CAAC;;;;ACjEtF,IAAO,oBAAP,cAAiC,MAAK;EACjC,oBAAiB;AAC1B,UAAM,kBAAiB;AAEvB,UAAM,IAAI,KAAK,KAAK,KAAK,IAAI;AAE7B,UAAM,KAAK,KAAK,MAAM;AAStB,MAAE,YAAY,EAAE,OAAO;MACtB,QAAQ,QAAQ,EAAE;MAClB,aAAa;MACb,YAAY;MACZ,UAAU;KACV;AAED,MAAE,mBAAmB,EAAE,OAAO;MAC7B,WAAW;KACX;AAED,MAAE,SAAS,CAAC,SAAS,UAAU,QAAQ,CAAC,EAAE,OAAO;MAChD,OAAO,QAAQ,EAAE;MACjB,QAAQ,QAAQ,EAAE;KAClB;AAED,MAAE,iBAAiB,EAAE,OAAO;MAC3B,aAAa;KACb;AAED,MAAE,yBAAyB,EAAE,OAAO;MACnC,SAAS;KACT;AAED,MAAE,oBAAoB,EAAE,OAAO;MAC9B,iBAAiB;MACjB,WAAW;MACX,UAAU;MACV,mBAAmB;MACnB,iBAAiB;KACjB;AAED,MAAE,sBAAsB,EAAE,OAAO;MAChC,iBAAiB;MACjB,UAAU;MACV,mBAAmB;MACnB,iBAAiB;KACjB;AAED,MAAE,eAAe,CAAC,UAAU,CAAC,EAAE,OAAO;MACrC,UAAU;MACV,YAAY;MACZ,cAAc;MACd,eAAe;MACf,aAAa;MACb,SAAS;MACT,SAAS;MACT,QAAQ;KACR;AAGD,MAAE,mBAAmB,CAAC,UAAU,CAAC,EAAE,OAAO;MACzC,MAAK;MACL,cAAa;KACb;AAED,MAAE,eAAe,CAAC,QAAQ,CAAC,EAAE,OAAO;MACnC,UAAU;MACV,SAAS;MACT,WAAW;KACX;AAED,MAAE,cAAc,CAAC,OAAO,CAAC,EAAE,OAAO;MACjC,YAAY;MACZ,UAAU;MACV,aAAa,QAAQ,EAAE;KACvB;AAED,MAAE,WAAW,EAAE,OAAO;MACrB,UAAU;MACV,aAAa;MACb,QAAQ,QAAQ,EAAE;MAClB,WAAW;KACX;AAED;AACC,YAAM,OAAO,EAAE,YAAY,CAAC,SAAS,MAAM,CAAC;AAE5C,WAAK,OAAO;QACX,aAAa;OACb;AAED,eAAS,MAAM,QAAQ,IAAI,uBAAuB;;AAGnD;AACC,YAAM,OAAO,EAAE,YAAY,CAAC,SAAS,KAAK,CAAC;AAE3C,WAAK,OAAO;QACX,aAAa;OACb;AAED,eAAS,MAAM,QAAQ,IAAI,uBAAuB;;EAGpD;;;;AC5BK,IAAO,aAAP,cAA0B,QAAO;EAAvC,cAAA;;AAOC,WAAA,eAAA,MAAA,kBAAA;;;;aAAiC,KAAK,cAAc,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO,EAAE,GAAG,KAAK,GAAG,IAAG,CAAE,CAAC;;AAQ/G,WAAA,eAAA,MAAA,iBAAA;;;;aAA0B,YAAG;;AAG7B,WAAA,eAAA,MAAA,cAAA;;;;aAA+B;;EAmMhC;EAjMW,YAAS;AAClB,SAAK,eAAe,KAAK,kBAAkB,IAAI,KAAK,KAAK,CAAC;AAE1D,UAAM,UAAS;AAEf,UAAM,iBAAiB,KAAK;AAC5B,UAAM,gBAAgB,KAAK;AAC3B,UAAM,mBAAmB,KAAK;AAC9B,UAAM,kBAAkB,KAAK;AAC7B,UAAM,mBAAmB,KAAK;AAE9B,mBAAe,SAAS,QAAQ,CAAC,eAAe,iBAAiB,kBAAkB,gBAAgB,CAAC;AAEpG,oBAAgB,IAAI,QAAQ,SAAS,IAAI,KAAK,OAAO,CAAA,CAAE,CAAC;AACxD,kBAAc,IAAI,QAAQ,SAAS,IAAI,KAAK,OAAO,CAAA,CAAE,CAAC;AAEtD,SAAK,WAAW,KAAK,KAAK,cAAc,OAAO,GAAG,iBAAiB,MAAK;AACvE,WAAK,cAAa;IACnB,CAAC,CAAC;EACH;EAEU,YAAS;EAEnB;EAGO,mBAAgB;AACtB,UAAM,iBAAgB;AAEtB,QAAI,KAAK,cAAc,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,UAAU,GAAG;AAEvI,YAAM,iBAAiB,KAAK;AAC5B,YAAM,IAAI,eAAe,WAAU;AACnC,YAAM,IAAI,eAAe,YAAW;AAEpC,YAAM,aAAa,KAAK,IAAI,cAAc,CAAC;AAC3C,YAAM,WAAW,KAAK,IAAI,YAAY,CAAC;AACvC,YAAM,cAAc,KAAK,IAAI,aAAa;AAG1C,UAAI,SAAe,aAAa,GAAG,GAAG,YAAY,UAAU,CAAC;AAE7D,YAAM,KAAK,KAAK,OAAO,QAAQ,OAAO;AACtC,YAAM,KAAK,KAAK,OAAO,SAAS,OAAO;AAEvC,UAAI,cAAc,EAAE,MAAM,GAAG,OAAO,GAAG,KAAK,GAAG,QAAQ,EAAC;AAExD,UAAI,uBAAuB,SAAS;AACnC,YAAI,QAAQ,YAAY;AACxB,YAAI,KAAK,KAAK,IAAI,IAAI,EAAE;AACxB,gBAAQ,KAAK,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC,IAAI;AACpD,sBAAoB,aAAa,GAAG,GAAG,YAAY,UAAU,KAAK;AAClE,aAAK,cAAc,cAAc,QAAQ,YAAY,KAAK;;AAG3D,eAAe,YAAY,CAAC,QAAQ,WAAW,CAAC;AAEhD,WAAK,aAAa,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,CAAC;AAE9C,YAAM,SAAgB,gBAAgB,KAAK,IAAI,UAAU,CAAC,GAAG,KAAK,UAAU;AAC5E,WAAK,eAAe,OAAO;QAC1B,IAAI,CAAC,UAAU,OAAO,SAAS,OAAO,OAAO;QAAG,IAAI,CAAC,UAAU,OAAO,QAAQ,OAAO,QAAQ;OAC7F;AAED,WAAK,cAAa;;EAEpB;EAEU,WAAW,QAAmB;AACvC,SAAK,eAAe,SAAS,KAAK,MAAM;EACzC;;EAIO,gBAAa;AACnB,UAAM,SAAgB,gBAAgB,KAAK,IAAI,UAAU,QAAQ,EAAE,CAAC,GAAG,KAAK,UAAU;AACtF,SAAK,cAAc,UAAU,MAAM;AAEnC,QAAI,cAAqB,gBAAgB,KAAK,IAAI,eAAe,CAAC,GAAG,MAAM;AAE3E,QAAI,cAAc,GAAG;AACpB,oBAAc,SAAS;;AAGxB,SAAK,cAAc,eAAe,WAAW;AAE7C,SAAK,MAAM,KAAK,CAAC,SAAQ;AACxB,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,eAAS,aAAY;IACtB,CAAC;AAED,SAAK,MAAM,KAAK,CAAC,SAAQ;AACxB,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,eAAS,aAAY;IACtB,CAAC;AAED,SAAK,YAAY,KAAK,iBAAiB,aAAa,MAAM;AAC1D,SAAK,YAAY,KAAK,eAAe,aAAa,MAAM;AAExD,SAAK,OAAO,KAAK,CAAC,WAAU;AAC3B,UAAK,OAAoB,IAAI,aAAa,GAAG;AAC5C,aAAK,YAAY,OAAO,kBAAkB,aAAa,MAAM;aAEzD;AACJ,eAAO,iBAAiB,OAAO,MAAM;;IAEvC,CAAC;AAED,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACX,aAAO,aAAY;;EAErB;;;;EAKO,YAAY,WAAsB,aAAqB,QAAc;AAC3E,UAAM,OAAO,UAAU,IAAI,MAAM;AACjC,QAAI,MAAM;AACT,WAAK,IAAI,QAAQ,CAAC,YAAW;AAC5B,aAAK,cAAc,QAAQ,OAAc;AACzC,aAAK,cAAc,EAAE,aAA0B,aAAa,SAAS,KAAI,aAAa,KAAK,IAAI,cAAc,CAAC,IAAI,MAAY,SAAS,WAAW,KAAK,IAAI,YAAY,CAAC,IAAI,MAAY,QAAO,CAAE;MAClM,CAAC;;EAEH;;;;EAKO,YAAY,MAAqD;AACvE,SAAK,eAAe,SAAS,KAAK,IAAI;EACvC;;;;EAKO,OAAO,OAAe,QAAiB,aAAoB;AACjE,UAAM,IAAI,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC;AACrC,UAAM,QAAc,eAAe,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC,IAAU,OAAO;AAE/E,QAAI,aAAmB,eAAe,KAAK,IAAI,cAAc,CAAC,CAAC;AAC/D,QAAI,WAAiB,eAAe,KAAK,IAAI,YAAY,CAAC,CAAC;AAE3D,QAAI,QAAQ;AACZ,QAAI,aAAa,UAAU;AAC1B,UAAI,aAAa,SAAS,QAAQ,UAAU;AAC3C,gBAAQ;;;AAIV,QAAI,aAAa,UAAU;AAC1B,UAAI,QAAQ,YAAY;AACvB,gBAAQ;;AAET,UAAI,QAAQ,UAAU;AACrB,gBAAQ;;;AAIV,QAAI,cAAc,UAAU;AAC3B,cAAQ;;AAGT,QAAI,CAAC,OAAO;AACX,aAAO;;AAGR,QAAI,UAAU,MAAM;AACnB,eAAS,KAAK,WAAW,UAAU,CAAC;;AAGrC,QAAI,eAAe,MAAM;AACxB,oBAAc,KAAK,WAAW,eAAe,CAAC;;AAG/C,QAAI,cAAc,QAAQ;AACzB,OAAC,aAAa,MAAM,IAAI,CAAC,QAAQ,WAAW;;AAG7C,QAAI,KAAK,SAAS,OAAM,KAAK,cAAc,KAAI;AAC9C,aAAO;;AAER,WAAO;EACR;EAEU,gBAAgB,OAAa;AACtC,WAAO,KAAK,eAAe,SAAS,QAAQ,KAAK;EAClD;EAEU,eAAY;EAEtB;;AA3MA,OAAA,eAAA,YAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,YAAA,cAAA;;;;SAA0C,QAAQ,WAAW,OAAO,CAAC,WAAW,SAAS,CAAC;;;;ACvCrF,IAAO,oBAAP,cAAiC,iBAAgB;EAAvD,cAAA;;AAyBC,WAAA,eAAA,MAAA,WAAA;;;;aAA+C,IAAI,aAClD,SAAS,IAAI,CAAA,CAAE,GACf,MAAM,MAAM,KAAK,KAAK,OAAO;QAC5B,UAAU;QACV,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAA,CAAE,GAAG,CAAC,SAAS,UAAU,QAAQ,CAAC;SACnG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC;;EAwJ7B;;;;EA5KQ,WAAW,UAA+C,cAAiC;AACjG,UAAM,SAAS,KAAK,cAAc,SAAS,KAAK,aAAa,KAAI,CAAE;AACnE,WAAO,aAAa,QAAQ;AAC5B,iBAAa,KAAK,MAAM;AACxB,WAAO;EACR;EA0BU,YAAS;AAClB,UAAM,UAAS;AACf,SAAK,IAAI,eAAe,KAAK;AAC7B,SAAK,iBAAiB,IAAI,eAAe,KAAK;AAC9C,SAAK,iBAAiB,IAAI,QAAQ,SAAS,IAAI,KAAK,OAAO,CAAA,CAAE,CAAC;EAC/D;;;;EAKO,SAAS,WAAmB,WAAiB;AAEnD,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,UAAM,YAAY,MAAM,IAAI,UAAU;AAEtC,UAAM,SAAS,MAAM,IAAI,UAAU,EAAE,qBAAqB,SAAS,IAAI,UAAU,WAAW,eAAe,CAAC;AAE5G,UAAM,YAAY,MAAM,IAAI,UAAU;AACtC,UAAM,QAAQ,UAAU,gBAAgB,SAAS;AAEjD,WAAO,EAAE,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC;EACpE;EAEU,sBAAsB,UAA+C,UAAoB,GAAW,GAAW,GAAW,GAAS;AAE5I,aAAS,WAAW,WAAW,IAAI;AAEnC,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,UAAM,YAAY,MAAM,IAAI,UAAU;AACtC,UAAM,YAAY,MAAM,IAAI,UAAU;AAEtC,UAAM,kBAAkB,UAAU,WAAW,eAAe,CAAC;AAE7D,UAAM,aAAa,UAAU,SAAS,UAAU,gBAAgB,CAAC,CAAC;AAClE,UAAM,WAAW,UAAU,SAAS,UAAU,gBAAgB,CAAC,CAAC;AAEhE,QAAI,cAAc,UAAU,qBAAqB,CAAC,IAAI;AACtD,QAAI,SAAS,UAAU,qBAAqB,CAAC,IAAI;AAEjD,UAAM,QAAQ;AAEd,aAAS,OAAO,cAAc,UAAU;AACxC,aAAS,OAAO,YAAY,QAAQ;AACpC,aAAS,OAAO,eAAe,WAAW;AAC1C,aAAS,OAAO,UAAU,MAAM;AAEhC,QAAI,iBAAiB;AACrB,QAAI,eAAe;AAEnB,QAAI,SAAS,KAAK,IAAI,UAAU,GAAG;AAClC,uBAAiB,UAAU,WAAW,cAAc,CAAC;AACrD,qBAAe,UAAU,WAAW,YAAY,GAAG;WAE/C;AACJ,uBAAiB,UAAU,WAAW,cAAc,CAAC;AACrD,qBAAe,UAAU,WAAW,YAAY,GAAG;;AAGpD,QAAI,iBAAiB,cAAc;AAClC,OAAC,gBAAgB,YAAY,IAAI,CAAC,cAAc,cAAc;;AAG/D,QAAK,YAAY,kBAAoB,cAAc,gBAAkB,UAAU,mBAAmB,eAAe,iBAAkB;AAClI,YAAM,WAAW,WAAW,KAAK;;AAGlC,UAAM,OAAO,EAAE,aAAa,QAAQ,YAAY,KAAK,WAAW,WAAU,CAAE;EAC7E;EAEU,eAAe,UAAgB;AACxC,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,WAAW,MAAM,IAAI,OAAO,KAAK,WAAW,MAAM,IAAI,KAAK,GAAG;AACjE,aAAO;;AAER,WAAO;EACR;EAEU,kBAAkB,WAAmB,YAAkB;AAChE,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,YAAY,MAAM,IAAI,OAAO,KAAK,YAAY,MAAM,IAAI,KAAK,GAAG;AACnE,aAAO;;AAER,WAAO,KAAK;EACb;EAEO,gBAAgB,QAAc;AAEpC,QAAI,SAAS,OAAO,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACX,YAAM,WAAW,OAAO;AAExB,YAAM,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACxE,YAAM,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AAExE,YAAM,SAAS,SAAS;AAExB,YAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,YAAM,QAAQ,OAAO,IAAI,OAAO;AAEhC,YAAM,YAAY,MAAM,qBAAqB,UAAU,OAAO,SAAS,WAAW,OAAO,IAAI,OAAO,CAAC,CAAC;AACtG,YAAM,YAAY,MAAM,qBAAqB,UAAU,OAAO,SAAS,WAAW,OAAO,IAAI,OAAO,CAAC,CAAC;AAEtG,YAAM,aAAa,SAAS,IAAI,cAAc,CAAC;AAC/C,YAAM,WAAW,SAAS,IAAI,YAAY,CAAC;AAE3C,YAAM,SAAS,SAAS,IAAI,UAAU,CAAC;AACvC,YAAM,cAAc,SAAS,IAAI,eAAe,CAAC;AAEjD,UAAI,OAAO,kBAAkB,WAAW,SAAS,GAAG;AACnD,eAAO,WAAW,WAAW,IAAI;AAEjC,cAAM,QAAQ,cAAc,WAAW,cAAc;AACrD,cAAM,IAAI,eAAe,SAAS,eAAe;AAEjD,eAAO,IAAI,KAAW,IAAI,KAAK,IAAI,CAAC;AACpC,eAAO,IAAI,KAAW,IAAI,KAAK,IAAI,CAAC;aAEhC;AACJ,eAAO,WAAW,WAAW,KAAK;;;EAGrC;EAEU,qBAAkB;EAE5B;EAEU,kBAAkB,WAAiC;AAC5D,UAAM,kBAAkB,SAAS;AACjC,cAAU,UAAU,IAAI,aACvB,SAAS,IAAI,CAAA,CAAE,GACf,MAAM,MAAM,KAAK,KAAK,OAAO;MAC5B,UAAU;MACV,WAAkB,UAAU,UAAU,QAAQ,SAAS,IAAI,aAAa,CAAA,CAAE,GAAG,CAAC,SAAS,UAAU,QAAQ,CAAC;OACxG,CAAC,KAAK,QAAQ,UAAU,UAAU,QAAQ,QAAQ,CAAC,CAAC;EAEzD;;AApJA,OAAA,eAAA,mBAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,mBAAA,cAAA;;;;SAA0C,iBAAiB,WAAW,OAAO,CAAC,kBAAkB,SAAS,CAAC;;;;ACvBrG,IAAO,cAAP,cAA2B,SAAQ;EAAzC,cAAA;;AAaC,WAAA,eAAA,MAAA,kBAAA;;;;aAA2B,YAAG;;EAmM/B;EAjMW,YAAS;AAClB,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,SAAS,QAAQ,CAAC;AAEzF,UAAM,UAAS;EAChB;EAEU,eAAY;EAEtB;EAEU,eAAY;EAEtB;EAEU,aAAa,OAAa;AACnC,UAAM,SAAS,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC;AAC1C,QAAI,QAAc,eAAe,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC,IAAU,OAAO;AAE7E,UAAM,cAAc,KAAK,WAAW,aAAa;AAEjD,QAAI,aAAmB,eAAe,KAAK,WAAW,YAAY,CAAC;AACnE,QAAI,WAAiB,eAAe,KAAK,WAAW,UAAU,CAAC;AAE/D,QAAI,WAAW,cAAc,YAAY,YAAY;AACpD,UAAI,QAAQ,YAAY;AACvB,iBAAS;;AAGV,iBAAW,WAAW;;AAGvB,QAAI,QAAQ,QAAQ,eAAe,WAAW;AAE9C,QAAI,OAAO,GAAG;AACb,aAAO,IAAI;;AAGZ,QAAI,OAAO,MAAO;AACjB,aAAO;;AAGR,QAAI,OAAO,OAAO;AACjB,aAAO;;AAGR,WAAO,EAAE,GAAG,MAAM,IAAI,SAAS,gBAAgB,KAAK,WAAW,QAAQ,IAAI,aAAY;EACxF;EAEU,UAAU,WAAmB,WAAiB;AAEvD,UAAM,cAAc,KAAK,WAAW,aAAa;AACjD,UAAM,aAAa,KAAK,WAAW,YAAY;AAC/C,UAAM,WAAW,KAAK,WAAW,UAAU;AAC3C,UAAM,SAAS,KAAK,WAAW,QAAQ;AAEvC,UAAM,QAAQ,aAAa,aAAa,WAAW;AACnD,UAAM,IAAI,eAAe,SAAS,eAAe;AAEjD,WAAO,EAAE,GAAG,IAAU,IAAI,KAAK,GAAG,GAAG,IAAU,IAAI,KAAK,EAAC;EAC1D;;;;EAKO,eAAY;AAClB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACV,YAAM,SAAS,MAAM,WAAW,UAAU,CAAC;AAE3C,WAAK,WAAW,UAAiB,gBAAgB,KAAK,IAAI,UAAU,IAAI,GAAG,MAAM,CAAC;AAElF,UAAI,cAAqB,gBAAgB,KAAK,IAAI,eAAe,MAAM,WAAW,eAAe,CAAC,CAAC,GAAG,MAAM;AAC5G,UAAI,cAAc,GAAG;AACpB,sBAAc,SAAS;;AAGxB,WAAK,WAAW,eAAe,WAAW;AAE1C,UAAI,aAAa,KAAK,IAAI,cAAc,MAAM,IAAI,cAAc,GAAG,CAAC;AACpE,UAAI,WAAW,KAAK,IAAI,YAAY,MAAM,IAAI,YAAY,GAAG,CAAC;AAE9D,WAAK,WAAW,cAAc,UAAU;AACxC,WAAK,WAAW,YAAY,QAAQ;;EAEtC;EAEU,aAAa,GAAW,GAAS;AAC1C,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,WAAW,GAAG,CAAC;;AAErB,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,WAAW,GAAG,CAAC;;EAEtB;EAEU,WAAW,GAAW,GAAS;AACxC,UAAM,cAAc,KAAK,WAAW,aAAa;AACjD,UAAM,SAAS,KAAK,WAAW,QAAQ;AACvC,UAAM,QAAQ,KAAK,MAAM,GAAG,CAAC;AAE7B,SAAK,MAAM,IAAI,QAAQ,CAAC,YAAW;AAClC,cAAQ,OAAO,cAAc,KAAK,IAAI,KAAK,GAAG,cAAc,KAAK,IAAI,KAAK,CAAC;AAC3E,cAAQ,OAAO,SAAS,KAAK,IAAI,KAAK,GAAG,SAAS,KAAK,IAAI,KAAK,CAAC;IAClE,CAAC;EACF;EAEU,WAAW,GAAW,GAAS;AACxC,UAAM,iBAAiB,KAAK,MAAM,GAAG,CAAC;AAEtC,SAAK,MAAM,IAAI,QAAQ,CAAC,YAAW;AAClC,cAAQ,IAAI,GAAG,GAAG,gBAAgB,KAAK,WAAW,cAAc,CAAC,IAAU,SAAS,KAAK,WAAW,YAAY,CAAC,IAAU,OAAO;IACnI,CAAC;EACF;EAEU,aAAa,SAAgB;AACtC,QAAI,QAAQ,QAAQ,IAAI,SAAS;AACjC,QAAI,OAAO;AACV,cAAQ,KAAK,SAAS,QAAQ,KAAK;AACnC,WAAK,WAAW,MAAM,GAAG,MAAM,CAAC;;EAElC;EAEU,aAAa,SAAgB;AACtC,QAAI,QAAQ,QAAQ,IAAI,SAAS;AACjC,QAAI,OAAO;AACV,cAAQ,KAAK,SAAS,QAAQ,KAAK;AACnC,WAAK,WAAW,MAAM,GAAG,MAAM,CAAC;;EAElC;EAEU,QAAQ,OAAa;AAC9B,UAAM,QAAQ,KAAK;AAEnB,QAAI,OAAO;AACV,aAAO,MAAM,OAAO,OAAO,KAAK,WAAW,QAAQ,GAAG,KAAK,WAAW,aAAa,CAAC;;AAErF,WAAO;EACR;EAEU,iBAAiB,OAAa;AAEvC,SAAK,UAAU,IAAI,QAAQ,CAAC,YAAW;AACtC,YAAM,WAAW,KAAK,IAAI,UAAU;AAEpC,YAAM,YAAY,KAAK;AACvB,YAAM,mBAAmB,KAAK,WAAW,YAAY;AACrD,YAAM,iBAAiB,KAAK,WAAW,UAAU;AACjD,UAAI,eAAe,KAAK,WAAW,QAAQ;AAC3C,UAAI,oBAAoB,KAAK,WAAW,aAAa;AAErD,UAAI,eAAe,mBAAmB;AACrC,SAAC,cAAc,iBAAiB,IAAI,CAAC,mBAAmB,YAAY;;AAGrE,UAAI,aAAa;AACjB,UAAI,WAAW;AACf,UAAI,SAAS;AACb,UAAI,cAAc;AAElB,UAAI,WAAW;AACd,YAAI,YAAY,YAAY,YAAY,YAAY;AACnD,uBAAa,KAAK,MAAM,UAAU,GAAG,UAAU,CAAC,IAAU;AAC1D,qBAAW,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC,IAAU;AAChD,wBAAc,KAAK,MAAM,UAAU,GAAG,UAAU,CAAC;AACjD,mBAAS,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC;mBAE5B,YAAY,WAAW,YAAY,WAAW;AACtD,uBAAa,KAAK,MAAM,UAAU,GAAG,UAAU,CAAC,IAAU;AAC1D,qBAAW,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC,IAAU;mBAExC,YAAY,WAAW,YAAY,WAAW;AACtD,wBAAc,KAAK,MAAM,UAAU,GAAG,UAAU,CAAC;AACjD,mBAAS,KAAK,MAAM,MAAM,GAAG,MAAM,CAAC;;;AAItC,oBAAoB,WAAW,aAAa,mBAAmB,YAAY;AAC3E,eAAe,WAAW,QAAQ,mBAAmB,YAAY;AAEjE,mBAAmB,gBAAgB,YAAY,kBAAkB,cAAc;AAC/E,iBAAiB,gBAAgB,UAAU,kBAAkB,cAAc;AAE3E,UAAI,cAAc,UAAU;AAC3B,mBAAW,aAAa;;AAGzB,oBAAoB;AACpB,kBAAkB;AAElB,WAAK,eAAe,QAAQ,OAAc;AAC1C,WAAK,eAAe,EAAE,aAA0B,aAAa,QAAQ,YAAY,aAAa,KAAK,KAAK,GAAG,UAAU,WAAW,KAAK,KAAK,EAAC,CAAE;IAC9I,CAAC;EACF;;AA9MA,OAAA,eAAA,aAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,aAAA,cAAA;;;;SAA0C,SAAS,WAAW,OAAO,CAAC,YAAY,SAAS,CAAC;;;;ACrCvF,IAAO,kBAAP,cAA+B,WAAU;EAepC,YAAS;AAClB,UAAM,UAAS;AACf,SAAK,IAAI,eAAe,KAAK;AAC7B,SAAK,iBAAiB,IAAI,eAAe,KAAK;AAC9C,SAAK,iBAAiB,IAAI,QAAQ,SAAS,IAAI,KAAK,OAAO,CAAA,CAAE,CAAC;EAC/D;EAEU,qBAAkB;EAE5B;EAEO,SAAS,WAAmB,WAAiB;AAEnD,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,UAAM,YAAY,MAAM,IAAI,UAAU;AAEtC,UAAM,SAAS,UAAU,qBAAqB,SAAS,IAAI,UAAU,WAAW,eAAe,CAAC;AAEhG,UAAM,YAAY,MAAM,IAAI,UAAU;AACtC,UAAM,QAAQ,UAAU,gBAAgB,SAAS;AAEjD,WAAO,EAAE,GAAG,SAAe,IAAI,KAAK,GAAG,GAAG,SAAe,IAAI,KAAK,EAAC;EACpE;EAEU,SAAS,QAA8B,YAAyB;AACzE,QAAI,KAAK,IAAI,aAAa,KAAK,YAAY;AAC1C,aAAO,KAAK,UAAU;;EAExB;EAGU,eAAe,UAAgB;AACxC,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,WAAW,MAAM,IAAI,OAAO,KAAK,WAAW,MAAM,IAAI,KAAK,GAAG;AACjE,aAAO;;AAER,WAAO;EACR;EAEU,kBAAkB,WAAmB,YAAkB;AAChE,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,YAAY,MAAM,IAAI,OAAO,KAAK,YAAY,MAAM,IAAI,KAAK,GAAG;AACnE,aAAO;;AAER,WAAO,KAAK;EACb;EAEO,gBAAgB,QAAc;AAEpC,QAAI,SAAS,OAAO,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACX,UAAI,WAAW,OAAO;AAEtB,UAAI,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACtE,UAAI,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AAEtE,UAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,UAAI,QAAQ,KAAK,IAAI,OAAO;AAU5B,YAAM,YAAY,MAAM,qBAAqB,UAAU,KAAK,SAAS,WAAW,KAAK,IAAI,OAAO,CAAC,CAAC;AAClG,YAAM,YAAY,MAAM,qBAAqB,UAAU,KAAK,SAAS,WAAW,KAAK,IAAI,OAAO,CAAC,CAAC;AAElG,UAAI,QAAQ,KAAK,SAAS,WAAW,SAAS;AAE9C,UAAI,KAAK,kBAAkB,WAAW,SAAS,GAAG;AACjD,eAAO,WAAW,WAAW,IAAI;AAEjC,eAAO,IAAI,KAAK,MAAM,CAAC;AACvB,eAAO,IAAI,KAAK,MAAM,CAAC;aAEnB;AACJ,eAAO,WAAW,WAAW,KAAK;;;EAGrC;;AAvFA,OAAA,eAAA,iBAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,iBAAA,cAAA;;;;SAA0C,WAAW,WAAW,OAAO,CAAC,gBAAgB,SAAS,CAAC;;;;ACnB7F,IAAO,0BAAP,cAAuC,gBAAe;EAQjD,YAAS;AAClB,SAAK,YAAY,gBAAgB,uBAAoB,QAAQ,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC;AACpF,UAAM,UAAS;EAChB;EAEO,mBAAgB;AACtB,UAAM,iBAAgB;AAEtB,QAAI,KAAK,QAAQ,aAAa,GAAG;AAChC,YAAM,cAAc,KAAK,IAAI,aAAa;AAC1C,UAAI,aAAa;AAChB,aAAK,OAAO,gBAAgB,uBAAoB,QAAQ,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC;aAE3E;AACJ,aAAK,OAAO,gBAAgB,iBAAc,QAAQ,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC;;;AAI3E,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC5B,UAAI,KAAK,KAAK,IAAI,cAAc;AAChC,UAAI,IAAI;AACP,WAAG,QAAQ,KAAK,IAAI,WAAW,CAAC,CAAC;;;EAGpC;EAEU,SAAS,SAA+B,aAA0B;EAE5E;;AAnCA,OAAA,eAAA,yBAAA,aAAA;;;;SAAkC;;AAClC,OAAA,eAAA,yBAAA,cAAA;;;;SAA0C,gBAAgB,WAAW,OAAO,CAAC,wBAAwB,SAAS,CAAC;;",
  "names": []
}
