{
  "version": 3,
  "sources": ["../../src/.internal/core/util/Modal.ts", "../../src/.internal/core/render/Bullet.ts", "../../src/.internal/core/render/Ellipse.ts", "../../src/.internal/core/render/Star.ts", "../../src/.internal/core/render/gradients/Gradient.ts", "../../src/.internal/core/render/gradients/LinearGradient.ts", "../../src/.internal/core/render/HeatLegend.ts", "../../src/.internal/core/render/Legend.ts", "../../src/.internal/core/render/Picture.ts", "../../src/.internal/core/render/Triangle.ts", "../../src/.internal/core/render/Slider.ts", "../../src/.internal/core/render/patterns/GrainPattern.ts", "../../src/.internal/core/render/gradients/RadialGradient.ts", "../../src/.internal/core/render/patterns/CirclePattern.ts", "../../src/.internal/core/render/patterns/LinePattern.ts", "../../src/.internal/core/render/patterns/RectanglePattern.ts", "../../src/.internal/core/render/patterns/PathPattern.ts", "../../src/.internal/core/util/DataParser.ts", "../../src/.internal/core/util/DataProcessor.ts", "../../src/.internal/core/render/SpriteResizer.ts", "../../src/.internal/core/util/Net.ts"],
  "sourcesContent": ["import type { Root } from \"../Root\"\n\nimport { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"./Entity\";\nimport { StyleRule } from \"./Utils\"\nimport { MultiDisposer, IDisposer, CounterDisposer } from \"../../core/util/Disposer\";\n\nimport * as $utils from \"./Utils\"\n\n\n/**\n * @ignore\n */\nlet rules: CounterDisposer | undefined;\n\n/**\n * @ignore\n */\nfunction modalCSS(element: ShadowRoot | null, root: Root, _prefix?: string): IDisposer {\n\tconst ic = root.interfaceColors;\n\tconst active = ic.get(\"secondaryButton\")!.toCSS();\n\tconst text = ic.get(\"text\")!.toCSS();\n\tconst shadow = ic.get(\"alternativeBackground\")!.toCSS(0.45);\n\t//const altbg = ic.get(\"alternativeBackground\")!.toCSS();\n\n\tif (!rules) {\n\t\tconst disposer = new MultiDisposer([\n\n\t\t\tnew StyleRule(element, \".am5-modal\", {\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"100%\",\n\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\"z-index\": \"100000\",\n\t\t\t\t\"top\": \"0\",\n\t\t\t\t\"left\": \"0\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-curtain\", {\n\t\t\t\t\"top\": \"0\",\n\t\t\t\t\"left\": \"0\",\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"100%\",\n\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\"background\": ic.get(\"background\")!.toCSS(0.5),\n\t\t\t\t\"z-index\": \"100\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-wrapper\", {\n\t\t\t\t\"top\": \"0\",\n\t\t\t\t\"left\": \"0\",\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"100%\",\n\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\"text-align\": \"center\",\n\t\t\t\t\"white-space\": \"nowrap\",\n\t\t\t\t\"background\": ic.get(\"background\")!.toCSS(0.5),\n\t\t\t\t\"z-index\": \"101\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-wrapper:before\", {\n\t\t\t\t\"content\": \"''\",\n\t\t\t\t\"display\": \"inline-block\",\n\t\t\t\t\"height\": \"100%\",\n\t\t\t\t\"vertical-align\": \"middle\",\n\t\t\t\t\"margin-right\": \"-0.25em\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-content\", {\n\t\t\t\t\"display\": \"inline-block\",\n\t\t\t\t\"padding\": \"1.2em\",\n\t\t\t\t\"vertical-align\": \"middle\",\n\t\t\t\t\"text-align\": \"left\",\n\t\t\t\t\"white-space\": \"normal\",\n\t\t\t\t\"background\": ic.get(\"background\")!.toCSS(),\n\t\t\t\t//\"border\": \"1px solid \" + ic.get(\"alternativeBackground\")!.toCSS(),\n\t\t\t\t\"border-radius\": \"4px\",\n\t\t\t\t\"-webkit-box-shadow\": \"0px 0px 36px 0px \" + shadow,\n\t\t\t\t\"box-shadow\": \"0px 0px 36px 0px \" + shadow,\n\t\t\t\t\"color\": text\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-content h1\", {\n\t\t\t\t\"font-size\": \"1em\",\n\t\t\t\t\"margin\": \"0 0 0.5em 0\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-table\", {\n\t\t\t\t\"display\": \"table\",\n\t\t\t\t\"margin\": \"1em 0\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-table-row\", {\n\t\t\t\t\"display\": \"table-row\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-table-heading\", {\n\t\t\t\t\"display\": \"table-heading\",\n\t\t\t\t\"padding\": \"3px 10px 3px 0\",\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-table-cell\", {\n\t\t\t\t\"display\": \"table-cell\",\n\t\t\t\t\"padding\": \"3px 0 3px 0\",\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-table-cell > *\", {\n\t\t\t\t\"vertical-align\": \"middle\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select\", {\n\t\t\t\t\"border\": \"1px solid \" + active,\n\t\t\t\t\"border-radius\": \"4px\",\n\t\t\t\t\"padding\": \"3px 5px\",\n\t\t\t\t\"margin\": \"2px\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-input-narrow\", {\n\t\t\t\t\"width\": \"50px\"\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-button\", {\n\t\t\t\t\"font-weight\": \"400\",\n\t\t\t\t\"color\": ic.get(\"secondaryButtonText\")!.toCSS(),\n\t\t\t\t\"line-height\": \"1.5\",\n\t\t\t\t\"text-align\": \"center\",\n\t\t\t\t\"text-decoration\": \"none\",\n\t\t\t\t\"vertical-align\": \"middle\",\n\t\t\t\t\"cursor\": \"pointer\",\n\t\t\t\t\"padding\": \"0.2em 0.8em\",\n\t\t\t\t\"font-size\": \"1em\",\n\t\t\t\t\"border-radius\": \"0.25em\",\n\t\t\t\t\"margin\": \"0 0.25em 0 0\",\n\t\t\t\t\"border\": \"1px solid \" + ic.get(\"secondaryButtonStroke\")!.toCSS(),\n\t\t\t\t\"background\": ic.get(\"secondaryButton\")!.toCSS()\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-button:hover\", {\n\t\t\t\t\"background\": ic.get(\"secondaryButtonHover\")!.toCSS()\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-button.am5-modal-primary\", {\n\t\t\t\t\"color\": ic.get(\"primaryButtonText\")!.toCSS(),\n\t\t\t\t\"border\": \"1px solid \" + ic.get(\"primaryButtonStroke\")!.toCSS(),\n\t\t\t\t\"background\": ic.get(\"primaryButton\")!.toCSS()\n\t\t\t}),\n\n\t\t\tnew StyleRule(element, \".am5-modal-button.am5-modal-primary:hover\", {\n\t\t\t\t\"background\": ic.get(\"primaryButtonHover\")!.toCSS()\n\t\t\t}),\n\n\t\t]);\n\n\t\trules = new CounterDisposer(() => {\n\t\t\trules = undefined;\n\t\t\tdisposer.dispose();\n\t\t});\n\t}\n\n\treturn rules.increment();\n}\n\n\nexport interface IModalSettings extends IEntitySettings {\n\n\t/**\n\t * HTML content of the modal.\n\t */\n\tcontent?: string;\n\n\t/**\n\t * When modal is open, all interactions for the underlying chart will be\n\t * disabled.\n\t *\n\t * @default true\n\t * @since 5.2.11\n\t */\n\tdeactivateRoot?: boolean;\n\n}\n\nexport interface IModalPrivate extends IEntityPrivate {\n\tcontainer: HTMLDivElement;\n\tcurtain: HTMLDivElement;\n\twrapper: HTMLDivElement;\n\tcontent: HTMLDivElement;\n}\n\nexport interface IModalEvents extends IEntityEvents {\n\t\"opened\": {}\n\t\"closed\": {}\n\t\"cancelled\": {}\n}\n\n/**\n * Used to display a modal dialog with HTML content.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/modal-popups/} for more info\n */\nexport class Modal extends Entity {\n\tpublic static className: string = \"Modal\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Modal.className]);\n\n\tdeclare public _settings: IModalSettings;\n\tdeclare public _privateSettings: IModalPrivate;\n\tdeclare public _events: IModalEvents;\n\n\t//protected _currentPass: number = 0;\n\n\tprotected _afterNew() {\n\t\t// Applying themes because this will not have parents\n\t\tsuper._afterNewApplyThemes();\n\n\t\t// Defaults\n\t\tthis._setRawDefault(\"deactivateRoot\", true);\n\n\t\t// Load CSS\n\t\tmodalCSS($utils.getShadowRoot(this._root.dom), this._root);\n\n\t\t// Create elements\n\t\tconst container = document.createElement(\"div\");\n\t\tcontainer.className = \"am5-modal\";\n\t\tcontainer.style.display = \"none\";\n\t\tthis.root._inner.appendChild(container);\n\t\tthis.setPrivate(\"container\", container);\n\n\t\tconst curtain = document.createElement(\"div\");\n\t\tcurtain.className = \"am5-modal-curtain\";\n\t\tcontainer.appendChild(curtain);\n\t\tthis.setPrivate(\"curtain\", curtain);\n\n\t\tthis._disposers.push($utils.addEventListener(curtain, \"click\", () => {\n\t\t\tthis.cancel();\n\t\t}));\n\n\t\tconst wrapper = document.createElement(\"div\");\n\t\twrapper.className = \"am5-modal-wrapper\";\n\t\tcontainer.appendChild(wrapper);\n\t\tthis.setPrivate(\"wrapper\", wrapper);\n\n\t\tconst content = document.createElement(\"div\");\n\t\tcontent.className = \"am5-modal-content\";\n\t\twrapper.appendChild(content);\n\t\tthis.setPrivate(\"content\", content);\n\n\t\tconst html = this.get(\"content\");\n\t\tif (html) {\n\t\t\tcontent.innerHTML = html;\n\t\t}\n\n\t\t// Close on ESC\n\t\tif ($utils.supports(\"keyboardevents\")) {\n\t\t\tthis._disposers.push($utils.addEventListener(document, \"keydown\", (ev: KeyboardEvent) => {\n\t\t\t\tif (this.isOpen() && ev.keyCode == 27) {\n\t\t\t\t\tthis.cancel();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"content\")) {\n\t\t\tthis.getPrivate(\"content\").innerHTML = this.get(\"content\", \"\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if modal is currently open.\n\t * \n\t * @return  Modal open?\n\t */\n\tpublic isOpen(): boolean {\n\t\treturn this.getPrivate(\"container\").style.display != \"none\";\n\t}\n\n\t/**\n\t * Opens modal.\n\t */\n\tpublic open(): void {\n\t\tthis.getPrivate(\"container\").style.display = \"block\";\n\t\tif (this.get(\"deactivateRoot\")) {\n\t\t\tthis.setTimeout(() => {\n\t\t\t\tthis._root._renderer.interactionsEnabled = false;\n\t\t\t}, 10);\n\t\t}\n\t\tthis.events.dispatch(\"opened\", {\n\t\t\ttype: \"opened\",\n\t\t\ttarget: this\n\t\t});\n\t}\n\n\t/**\n\t * Closes modal.\n\t */\n\tpublic close(): void {\n\t\tthis.getPrivate(\"container\").style.display = \"none\";\n\t\tif (this.get(\"deactivateRoot\")) {\n\t\t\tthis._root._renderer.interactionsEnabled = true;\n\t\t}\n\t\tthis.events.dispatch(\"closed\", {\n\t\t\ttype: \"closed\",\n\t\t\ttarget: this\n\t\t});\n\t}\n\n\t/**\n\t * Closes modal and invokes `cancelled` event.\n\t */\n\tpublic cancel(): void {\n\t\tthis.getPrivate(\"container\").style.display = \"none\";\n\t\tif (this.get(\"deactivateRoot\")) {\n\t\t\tthis._root._renderer.interactionsEnabled = true;\n\t\t}\n\t\tthis.events.dispatch(\"cancelled\", {\n\t\t\ttype: \"cancelled\",\n\t\t\ttarget: this\n\t\t});\n\t}\n\n\t/**\n\t * Disposes modal.\n\t */\n\tpublic dispose() {\n\t\tsuper.dispose();\n\t\tconst container = this.getPrivate(\"container\");\n\t\tif (container.parentElement) {\n\t\t\tcontainer.parentElement.removeChild(container);\n\t\t}\n\t}\n\n}", "import { Entity, IEntitySettings, IEntityPrivate } from \"../../core/util/Entity\";\nimport type { Sprite } from \"../../core/render/Sprite\";\nimport type { Series } from \"../../core/render/Series\";\n\nexport interface IBulletSettings extends IEntitySettings {\n\n\t/**\n\t * Horizontal location within target element.\n\t *\n\t * 0 - left, 1 - right, or anything inbetweeen.\n\t */\n\tlocationX?: number;\n\n\t/**\n\t * Vertical location within target element.\n\t *\n\t * 0 - top, 1 - bottom, or anything inbetweeen.\n\t */\n\tlocationY?: number;\n\n\t/**\n\t * A visual element of the bullet.\n\t */\n\tsprite: Sprite;\n\n\t/**\n\t * If set to `true`, the bullet will redraw its `sprite` element whenever\n\t * anything in its parent series changes.\n\t *\n\t * @default false\n\t */\n\tdynamic?: boolean;\n\n\t/**\n\t * If set to `true`, the bullet will be automatically rotated to face\n\t * direction of line it is attached to.\n\t *\n\t * NOTE: Works only in  [[Flow]] and [[MapPointSeries]] (when [[MapPoint]] is\n\t * attached to a [[MapLine]]).\n\t *\n\t * @default false\n\t */\n\tautoRotate?: boolean;\n\n\t/**\n\t * If `autoRotate` is set to `true`, value of `autoRotateAngle` will be added\n\t * to the automatically-calculated angle.\n\t */\n\tautoRotateAngle?: number;\n\n\t/**\n\t * If a field will be set, the bullet will be located at exact value of that field, not paying atention to locationY/locationX. Works with XYSeries\tonly.\n\t * If `field` is set, bullet will be placed at the specific data value, ignoring\n\t * any `locationX` and `locationY` settings.\n\t *\n\t * **IMPORTANT: this setting works with [[XYSeries]] only.**\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/#By_data_field} for more info\n\t * @since 5.6.0\n\t */\n\tfield?: \"open\" | \"high\" | \"low\" | \"value\";\n\n\t/**\n\t * If set, will stack bullets instead of overlapping them.\n\t *\n\t * * `\"up` - stacks bullets upwards.\n\t * * `\"down` - stacks bullets downwards.\n\t * * `\"auto` - stacks bullets in the direction that offers more space.\n\t * \n\t * **IMPORTANT: this setting works with [[XYSeries]] only.**\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/#Stacked_bullets} for more info\n\t * @since 5.6.0\n\t */\n\tstacked?: \"up\" | \"down\" | \"auto\";\n}\n\nexport interface IBulletPrivate extends IEntityPrivate {\n\thidden?: boolean;\n}\n\n/**\n * A universal placeholder for bullet elements.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info\n */\nexport class Bullet extends Entity {\n\tpublic static className: string = \"Bullet\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Bullet.className]);\n\n\tdeclare public _settings: IBulletSettings;\n\tdeclare public _privateSettings: IBulletPrivate;\n\n\t// used by MapPolygons where one data item can have multiple bullets of the same kind\n\tpublic _index?: number;\n\n\t/**\n\t * Target series object if it's a bullet for series.\n\t */\n\tpublic series: Series | undefined;\n\n\tprotected _afterNew() {\n\t\t// Applying themes because bullet will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"sprite\")) {\n\t\t\tconst sprite = this.get(\"sprite\");\n\t\t\tif (sprite) {\n\t\t\t\tsprite.setAll({ position: \"absolute\", role: \"figure\" });\n\t\t\t\tthis._disposers.push(sprite);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"locationX\") || this.isDirty(\"locationY\")) {\n\t\t\tif (this.series) {\n\t\t\t\tthis.series._positionBullet(this);\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface IEllipseSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * The ellipse's major-axis radius. Must be non-negative.\r\n\t */\r\n\r\n\tradiusX: number\r\n\r\n\t/**\r\n\t * The ellipse's minor-axis radius. Must be non-negative.\r\n\t */\r\n\tradiusY: number\r\n}\r\n\r\nexport interface IEllipsePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Ellipse.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Ellipse extends Graphics {\r\n\r\n\tdeclare public _settings: IEllipseSettings;\r\n\tdeclare public _privateSettings: IEllipsePrivate;\r\n\r\n\tpublic static className: string = \"Ellipse\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Ellipse.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radiusX\") || this.isDirty(\"radiusY\") || this.isDirty(\"rotation\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tthis._display.drawEllipse(0, 0, Math.abs(this.get(\"radiusX\")), Math.abs(this.get(\"radiusY\")));\r\n\t\t}\r\n\t}\r\n}\r\n", "import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\nimport type { Percent } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\nexport interface IStarSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * Star's radius in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Star's inner radius in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of spikes\r\n\t */\r\n\tspikes?: number;\r\n\r\n}\r\n\r\nexport interface IStarPrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Star extends Graphics {\r\n\r\n\tdeclare public _settings: IStarSettings;\r\n\tdeclare public _privateSettings: IStarPrivate;\r\n\r\n\tpublic static className: string = \"Star\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Star.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tconst display = this._display;\r\n\t\t\tconst r = this.get(\"radius\", 0);\r\n\t\t\tconst ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\r\n\t\t\tconst spikes = this.get(\"spikes\", 0);\r\n\t\t\tconst step = Math.PI / spikes;\r\n\t\t\tlet angle = Math.PI / 2 * 3;\r\n\r\n\t\t\tdisplay.moveTo(0, - r)\r\n\r\n\t\t\tfor (let i = 0; i < spikes; i++) {\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * r, Math.sin(angle) * r)\r\n\t\t\t\tangle += step\r\n\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir)\r\n\t\t\t\tangle += step\r\n\t\t\t}\r\n\t\t\tdisplay.lineTo(0, -r)\r\n\t\t\tdisplay.closePath();\r\n\t\t}\r\n\t}\r\n}\r\n", "import type { IBounds } from \"../../util/IBounds\"\nimport type { IGradient, IGradientStop } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\"\n\n\nexport interface IGradientSettings extends IEntitySettings {\n\n\t/**\n\t * A list of color steps for the gradient.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n\t */\n\tstops?: Array<IGradientStop>;\n\n\t/**\n\t * Gradient target.\n\t */\n\ttarget?: Sprite;\n\n}\n\nexport interface IGradientPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for gradients.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport abstract class Gradient extends Entity {\n\n\tdeclare public _settings: IGradientSettings;\n\tdeclare public _privateSettings: IGradientPrivate;\n\n\tpublic static className: string = \"Gradient\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Gradient.className]);\n\n\tprotected _afterNew() {\n\t\t// Applying themes because gradient will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(_target: Sprite): IGradient {\n\t\treturn {\n\t\t\taddColorStop: (_offset: number, _color: string) => { }\n\t\t};\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\t//if (this.isDirty(\"target\") && this.get(\"target\")) {\n\t\t//\tthis.get(\"target\")!.events.on(\"boundschanged\", () => {\n\n\t\t//\t});\n\t\t//}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getBounds(target: Sprite): IBounds {\n\t\tconst gradientTarget = this.get(\"target\");\n\t\tif (gradientTarget) {\n\t\t\tlet bounds = gradientTarget.globalBounds();\n\n\t\t\tconst p0 = target.toLocal({ x: bounds.left, y: bounds.top });\n\t\t\tconst p1 = target.toLocal({ x: bounds.right, y: bounds.top });\n\t\t\tconst p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });\n\t\t\tconst p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });\n\n\t\t\treturn {\n\t\t\t\tleft: Math.min(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\ttop: Math.min(p0.y, p1.y, p2.y, p3.y),\n\t\t\t\tright: Math.max(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\tbottom: Math.max(p0.y, p1.y, p2.y, p3.y)\n\t\t\t}\n\t\t}\n\t\treturn target._display.getLocalBounds();\n\t}\n\n}\n", "import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n", "import type { IPoint } from \"../../core/util/IPoint\";\n\nimport { Container, IContainerSettings, IContainerPrivate } from \"./Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { Tooltip } from \"../../core/render/Tooltip\";\nimport { LinearGradient } from \"../../core/render/gradients/LinearGradient\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IHeatLegendSettings extends IContainerSettings {\n\n\t/**\n\t * Starting (lowest value) color.\n\t */\n\tstartColor: Color;\n\n\t/**\n\t * Ending (highest value) color.\n\t */\n\tendColor: Color;\n\n\t/**\n\t * Start (lowest) value.\n\t */\n\tstartValue?: number;\n\n\t/**\n\t * End (highest) value.\n\t */\n\tendValue?: number;\n\n\t/**\n\t * Text for start label.\n\t */\n\tstartText?: string;\n\n\t/**\n\t * Text for end label.\n\t */\n\tendText?: string;\n\n\t/**\n\t * Number of steps\n\t *\n\t * @default 1\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Gradient_or_steps} for more info\n\t */\n\tstepCount?: number;\n\n\t/**\n\t * Orientation of the heat legend.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Orientation} for more info\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n}\n\nexport interface IHeatLegendPrivate extends IContainerPrivate {\n}\n\n/**\n * Heat legend.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info\n */\nexport class HeatLegend extends Container {\n\n\t/**\n\t * A [[Container]] that all labels are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that all markers are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly markerContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A start [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly startLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"start\"] }));\n\n\t/**\n\t * An end [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly endLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"end\"] }));\n\n\tpublic static className: string = \"HeatLegend\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([HeatLegend.className]);\n\n\tdeclare public _settings: IHeatLegendSettings;\n\tdeclare public _privateSettings: IHeatLegendPrivate;\n\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"heatlegend\", this._settings.orientation]);\n\t\tsuper._afterNew();\n\t\tthis.set(\"tooltip\", Tooltip.new(this._root, {\n\t\t\tthemeTags: [\"heatlegend\"]\n\t\t}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarker(): RoundedRectangle {\n\t\tconst marker = this.markers.make();\n\t\tmarker.states.create(\"disabled\", {});\n\t\treturn marker;\n\t}\n\n\t/**\n\t * List of rectangle elements used for default legend markers.\n\t *\n\t * @default new ListTemplate<RoundedRectangle>\n\t */\n\tpublic readonly markers: ListTemplate<RoundedRectangle> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RoundedRectangle._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [this.get(\"orientation\"), \"heatlegend\", \"marker\"])\n\t\t}, [this.markers.template])\n\t);\n\n\n\t/**\n\t * Moves and shows tooltip at specific value.\n\t *\n\t * Can also specify optional text to show in tooltip, as well as the color.\n\t *\n\t * @param  value  Value\n\t * @param  text   Text\n\t * @param  color  Color\n\t */\n\tpublic showValue(value: number, text?: string, color?: Color) {\n\t\tconst tooltip = this.getTooltip();\n\t\tif (tooltip && $type.isNumber(value)) {\n\n\t\t\tconst startValue = this.get(\"startValue\", 0);\n\t\t\tconst endValue = this.get(\"endValue\", 1);\n\n\t\t\tconst c = (value - startValue) / (endValue - startValue);\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\n\t\t\tif (!text) {\n\t\t\t\ttext = this.getNumberFormatter().format(value);\n\t\t\t}\n\n\t\t\tif (!color) {\n\t\t\t\tcolor = Color.interpolate(c, startColor, endColor);\n\t\t\t}\n\n\t\t\ttooltip.label.set(\"text\", text);\n\t\t\tlet p:IPoint;\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });\n\t\t\t}\n\n\t\t\tlet background = tooltip.get(\"background\");\n\t\t\tif (background) {\n\t\t\t\tbackground.set(\"fill\", Color.interpolate(c, startColor, endColor))\n\t\t\t}\n\t\t\ttooltip.set(\"pointTo\", p);\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst labelContainer = this.labelContainer;\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst startLabel = this.startLabel;\n\t\tconst endLabel = this.endLabel;\n\t\tconst tooltip = this.getTooltip();\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tstartLabel.setAll({ y: p100, x: undefined, centerY: p100, centerX: p100 });\n\t\t\t\tendLabel.setAll({ y: 0, x: undefined, centerY: 0, centerX: p100 });\n\t\t\t\tlabelContainer.setAll({ height: p100, width: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"horizontal\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tstartLabel.setAll({ x: 0, y: undefined, centerX: 0, centerY: 0 });\n\t\t\t\tendLabel.setAll({ x: p100, y: undefined, centerX: p100, centerY: 0 });\n\t\t\t\tlabelContainer.setAll({ width: p100, height: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"vertical\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"stepCount\")) {\n\t\t\tconst stepCount = this.get(\"stepCount\", 1);\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\t\t\tthis.markerContainer.children.clear();\n\t\t\tif (stepCount > 1) {\n\t\t\t\tfor (let i = 0; i < stepCount; i++) {\n\t\t\t\t\tconst marker = this.makeMarker();\n\n\t\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\t\tthis.markerContainer.children.moveValue(marker, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\t\tmarker.set(\"fill\", Color.interpolate(i / stepCount, startColor, endColor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (stepCount == 1) {\n\t\t\t\tconst marker = this.makeMarker();\n\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\tconst gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });\n\n\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\tgradient.set(\"rotation\", 90);\n\t\t\t\t\tlet stops = gradient.get(\"stops\");\n\t\t\t\t\tif (stops) {\n\t\t\t\t\t\tstops.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgradient.set(\"rotation\", 0);\n\t\t\t\t}\n\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\tmarker.set(\"fillGradient\", gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"startText\") || this.isDirty(\"startValue\")) {\n\t\t\tstartLabel.set(\"text\", this.get(\"startText\", this.getNumberFormatter().format(this.get(\"startValue\", 0))));\n\t\t}\n\n\t\tif (this.isDirty(\"endText\") || this.isDirty(\"endValue\")) {\n\t\t\tendLabel.set(\"text\", this.get(\"endText\", this.getNumberFormatter().format(this.get(\"endValue\", 1))))\n\t\t}\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate, ISeriesEvents } from \"./Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport type { Entity, IEntitySettings } from \"../../core/util/Entity\";\nimport type { Color } from \"../../core/util/Color\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface ILegendDataItem extends ISeriesDataItem {\n\n\t/**\n\t * [[Container]] element holding all other legend item elements, labels,\n\t * markers, etc.\n\t */\n\titemContainer: Container;\n\n\t/**\n\t * Marker element.\n\t */\n\tmarker: Container;\n\n\t/**\n\t * Marker rectangle element.\n\t */\n\tmarkerRectangle: RoundedRectangle;\n\n\t/**\n\t * Label element.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Value label element.\n\t */\n\tvalueLabel: Label;\n\n\t/**\n\t * Marker fill color.\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Marker stroke (outline) color.\n\t */\n\tstroke?: Color;\n\n\t/**\n\t * Name of the legend item.\n\t */\n\tname?: string;\n\n}\n\nexport interface ILegendItemSettings extends IEntitySettings {\n\tvisible?: boolean;\n}\n\n/**\n * @ignore\n */\nexport interface ILegendItem extends Entity {\n\t_settings: ILegendItemSettings;\n\tisHidden?: () => boolean;\n\tshow?: () => void;\n\thide?: () => void;\n\tcreateLegendMarker?: () => {}\n\tcomponent?: Series;\n\tupdateLegendValue?: () => {}\n\t// how to define that properties of dataItem should have legendDataItem?\n}\n\n//type ILegendDataItemSettings = { [K in keyof ILegendDataItem]?: string; };\n\nexport interface ILegendSettings extends ISeriesSettings {\n\n\t/**\n\t * If set to `true` the legend will not try to mimic appearance of the actual\n\t * item but rather show default square marker.\n\t *\n\t * @default false\n\t */\n\tuseDefaultMarker?: boolean;\n\n\t/**\n\t * A key to look up in data for a name of the data item.\n\t *\n\t */\n\tnameField?: string;\n\n\t/**\n\t * A key to look up in data for a fill of the data item.\n\t *\n\t */\n\tfillField?: string;\n\n\t/**\n\t * A key to look up in data for a stroke of the data item.\n\t *\n\t */\n\tstrokeField?: string;\n\n\t/**\n\t * Which legend item element will be clickable to toggle related chart item:\n\t * * `\"itemContainer\"` - the whole legend item (default).\n\t * * `\"marker\"` - legend item marker.\n\t * * `\"none\"` - disables toggling of legend item.\n\t *\n\t * @default \"itemContainer\"\n\t * @since 5.0.13\n\t */\n\tclickTarget?: \"itemContainer\" | \"marker\" | \"none\"\n\n}\n\nexport interface ILegendPrivate extends ISeriesPrivate {\n}\n\nexport interface ILegendEvents extends ISeriesEvents {\n\n}\n\n/**\n * A universal legend control.\n *\n * @important\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info\n */\nexport class Legend extends Series {\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"legend\"]);\n\t\tthis.fields.push(\"name\", \"stroke\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"Legend\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([Legend.className]);\n\n\tdeclare public _settings: ILegendSettings;\n\tdeclare public _privateSettings: ILegendPrivate;\n\tdeclare public _dataItemSettings: ILegendDataItem;\n\tdeclare public _events: ILegendEvents;\n\n\t/**\n\t * List of all [[Container]] elements for legend items.\n\t *\n\t * @default new ListTemplate<Container>\n\t */\n\tpublic readonly itemContainers: ListTemplate<Container> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Container._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\"]),\n\t\t\tthemeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"]),\n\t\t\tbackground: RoundedRectangle.new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.itemContainers.template.get(\"themeTags\", []), [\"legend\", \"item\", \"background\"]),\n\t\t\t\tthemeTagsSelf: $utils.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\", []), [\"itemcontainer\"])\n\t\t\t})\n\t\t}, [this.itemContainers.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeItemContainer(dataItem: DataItem<this[\"_dataItemSettings\"]>): Container {\n\t\tconst itemContainer = this.children.push(this.itemContainers.make());\n\t\titemContainer._setDataItem(dataItem);\n\t\tthis.itemContainers.push(itemContainer);\n\t\titemContainer.states.create(\"disabled\", {});\n\t\treturn itemContainer;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarker(): Container {\n\t\tconst marker = this.markers.make();\n\t\tthis.markers.push(marker);\n\t\tmarker.states.create(\"disabled\", {});\n\t\treturn marker;\n\t}\n\n\t/**\n\t * List of legend marker elements.\n\t *\n\t * @default new ListTemplate<Container>\n\t */\n\tpublic readonly markers: ListTemplate<Container> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Container._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [\"legend\", \"marker\"])\n\t\t}, [this.markers.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(): Label {\n\t\tconst label = this.labels.make();\n\t\tlabel.states.create(\"disabled\", {});\n\t\treturn label;\n\t}\n\n\t/**\n\t * List of legend label elements.\n\t *\n\t * @default new ListTemplate<Label>\n\t */\n\tpublic readonly labels: ListTemplate<Label> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Label._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"legend\", \"label\"])\n\t\t}, [this.labels.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeValueLabel(): Label {\n\t\tconst valueLabel = this.valueLabels.make();\n\t\tvalueLabel.states.create(\"disabled\", {});\n\t\treturn valueLabel;\n\t}\n\n\t/**\n\t * List of legend value label elements.\n\t *\n\t * @default new ListTemplate<label>\n\t */\n\tpublic readonly valueLabels: ListTemplate<Label> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Label._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.valueLabels.template.get(\"themeTags\", []), [\"legend\", \"label\", \"value\"])\n\t\t}, [this.valueLabels.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarkerRectangle(): RoundedRectangle {\n\t\tconst markerRectangle = this.markerRectangles.make();\n\t\tmarkerRectangle.states.create(\"disabled\", {});\n\t\treturn markerRectangle;\n\t}\n\n\t/**\n\t * List of rectangle elements used for default legend markers.\n\t *\n\t * @default new ListTemplate<RoundedRectangle>\n\t */\n\tpublic readonly markerRectangles: ListTemplate<RoundedRectangle> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RoundedRectangle._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markerRectangles.template.get(\"themeTags\", []), [\"legend\", \"marker\", \"rectangle\"])\n\t\t}, [this.markerRectangles.template])\n\t);\n\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst itemContainer = this.makeItemContainer(dataItem);\n\n\t\tconst nameField = this.get(\"nameField\");\n\t\tconst fillField = this.get(\"fillField\");\n\t\tconst strokeField = this.get(\"strokeField\");\n\n\t\tif (itemContainer) {\n\t\t\tconst clickTarget = this.get(\"clickTarget\", \"itemContainer\");\n\n\t\t\tconst item = dataItem.dataContext as ILegendItem;\n\n\t\t\tif (item && item.set) {\n\t\t\t\titem.set(<any>\"legendDataItem\", dataItem);\n\t\t\t}\n\n\t\t\titemContainer._setDataItem(dataItem);\n\t\t\tdataItem.set(\"itemContainer\", itemContainer);\n\n\t\t\tconst marker = this.makeMarker();\n\t\t\tif (marker) {\n\t\t\t\titemContainer.children.push(marker);\n\t\t\t\tmarker._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"marker\", marker);\n\n\t\t\t\tconst useDefaultMarker = this.get(\"useDefaultMarker\");\n\n\t\t\t\tconst markerRectangle = marker.children.push(this.makeMarkerRectangle());\n\n\t\t\t\tlet fill = dataItem.get(\"fill\");\n\t\t\t\tlet stroke = dataItem.get(\"stroke\");\n\n\t\t\t\tdataItem.set(\"markerRectangle\", markerRectangle);\n\n\t\t\t\tif (item && item.get) {\n\t\t\t\t\tfill = item.get(fillField as any, fill);\n\t\t\t\t\tstroke = item.get(strokeField as any, stroke);\n\t\t\t\t}\n\n\t\t\t\tif (!stroke) {\n\t\t\t\t\tstroke = fill;\n\t\t\t\t}\n\n\t\t\t\tif (!useDefaultMarker) {\n\t\t\t\t\tif (item && item.createLegendMarker) {\n\t\t\t\t\t\titem.createLegendMarker();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (item.on) {\n\t\t\t\t\t\titem.on(fillField as any, () => {\n\t\t\t\t\t\t\tmarkerRectangle.set(\"fill\", item.get(fillField as any));\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\titem.on(strokeField as any, () => {\n\t\t\t\t\t\t\tmarkerRectangle.set(\"stroke\", item.get(strokeField as any));\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmarkerRectangle.setAll({ fill, stroke });\n\n\t\t\t\t// this solves if template field is set on slice\n\t\t\t\tconst component = item.component;\n\t\t\t\tif (component && component.updateLegendMarker) {\n\t\t\t\t\tcomponent.updateLegendMarker(item as any);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst label = this.makeLabel();\n\n\t\t\tif (label) {\n\t\t\t\titemContainer.children.push(label);\n\t\t\t\tlabel._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"label\", label);\n\n\t\t\t\tlabel.text.on(\"text\", () => {\n\t\t\t\t\titemContainer.setRaw(\"ariaLabel\", label.text._getText() + (this.get(\"clickTarget\") !== \"none\" ? \"; \" + this._t(\"Press ENTER to toggle\") : \"\"));\t\t\t\t\t\n\t\t\t\t\titemContainer.markDirtyAccessibility();\n\t\t\t\t});\n\n\t\t\t\tif (item && item.get) {\n\t\t\t\t\tdataItem.set(\"name\", item.get(nameField as any) as string);\n\t\t\t\t}\n\n\t\t\t\tlet name = dataItem.get(\"name\");\n\n\t\t\t\tif (name) {\n\t\t\t\t\tlabel.set(\"text\", name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst valueLabel = this.makeValueLabel();\n\t\t\tif (valueLabel) {\n\t\t\t\titemContainer.children.push(valueLabel);\n\t\t\t\tvalueLabel._setDataItem(dataItem);\n\t\t\t\tdataItem.set(\"valueLabel\", valueLabel);\n\t\t\t}\n\n\t\t\tif (item && item.show) {\n\n\t\t\t\titem.on(\"visible\", (visible) => {\n\t\t\t\t\titemContainer.set(\"disabled\", !visible);\n\t\t\t\t})\n\n\t\t\t\tif (!item.get(\"visible\")) {\n\t\t\t\t\titemContainer.set(\"disabled\", true);\n\t\t\t\t}\n\n\t\t\t\tif (clickTarget != \"none\") {\n\t\t\t\t\tlet clickContainer = itemContainer;\n\t\t\t\t\tif (clickTarget == \"marker\") {\n\t\t\t\t\t\tclickContainer = marker;\n\t\t\t\t\t}\n\t\t\t\t\tthis._addClickEvents(clickContainer, item, dataItem)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort children\n\t\t\tthis.children.values.sort((a, b) => {\n\t\t\t\tconst targetA = a.dataItem!.dataContext;\n\t\t\t\tconst targetB = b.dataItem!.dataContext;\n\t\t\t\tif (targetA && targetB) {\n\t\t\t\t\tconst indexA = this.data.indexOf(targetA);\n\t\t\t\t\tconst indexB = this.data.indexOf(targetB);\n\t\t\t\t\tif (indexA > indexB) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (indexA < indexB) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\t\tif (item && item.updateLegendValue) {\n\t\t\t\titem.updateLegendValue();\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tprotected _addClickEvents(container: Container, item: ILegendItem, dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tcontainer.set(\"cursorOverStyle\", \"pointer\");\n\t\tcontainer.events.on(\"pointerover\", () => {\n\t\t\tconst component = item.component;\n\t\t\tif (component && component.hoverDataItem) {\n\t\t\t\tcomponent.hoverDataItem(item as any)\n\t\t\t}\n\t\t})\n\n\t\tcontainer.events.on(\"pointerout\", () => {\n\t\t\tconst component = item.component;\n\t\t\tif (component && component.hoverDataItem) {\n\t\t\t\tcomponent.unhoverDataItem(item as any)\n\t\t\t}\n\t\t})\n\n\t\tcontainer.events.on(\"click\", () => {\n\t\t\tconst labelText = dataItem.get(\"label\").text._getText();\n\n\t\t\tif (item.show && item.isHidden && (item.isHidden() || item.get(\"visible\") === false)) {\n\t\t\t\titem.show();\n\t\t\t\tcontainer.set(\"disabled\", false);\n\t\t\t\tthis._root.readerAlert(this._t(\"%1 shown\", this._root.locale, labelText));\n\t\t\t}\n\t\t\telse if (item.hide) {\n\t\t\t\titem.hide();\n\t\t\t\tcontainer.set(\"disabled\", true);\n\t\t\t\tthis._root.readerAlert(this._t(\"%1 hidden\", this._root.locale, labelText));\n\t\t\t}\n\t\t})\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t\tsuper.disposeDataItem(dataItem);\n\n\t\tconst dataContext = dataItem.dataContext as any;\n\t\tif (dataContext && dataContext.get) {\n\t\t\tconst di = dataContext.get(\"legendDataItem\");\n\t\t\tif (di == dataItem) {\n\t\t\t\tdataContext.set(\"legendDataItem\", undefined);\n\t\t\t}\n\t\t}\n\n\t\tlet itemContainer = dataItem.get(\"itemContainer\");\n\t\tif (itemContainer) {\n\t\t\tthis.itemContainers.removeValue(itemContainer);\n\t\t\titemContainer.dispose();\n\t\t}\n\n\t\tlet marker = dataItem.get(\"marker\");\n\t\tif (marker) {\n\t\t\tthis.markers.removeValue(marker);\n\t\t\tmarker.dispose();\n\t\t}\n\n\t\tlet markerRectangle = dataItem.get(\"markerRectangle\");\n\t\tif (markerRectangle) {\n\t\t\tthis.markerRectangles.removeValue(markerRectangle);\n\t\t\tmarkerRectangle.dispose();\n\t\t}\n\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\n\t\tlet valueLabel = dataItem.get(\"valueLabel\");\n\t\tif (valueLabel) {\n\t\t\tthis.valueLabels.removeValue(valueLabel);\n\t\t\tvalueLabel.dispose();\n\t\t}\n\n\t}\n}\n", "import type { IPicture } from \"./backend/Renderer\";\nimport type { Color } from \"../util/Color\";\n\nimport { Sprite, ISpriteEvents, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\n\nimport * as $type from \"../util/Type\";\n\nexport interface IPictureSettings extends ISpriteSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * CORS settings for loading the image. Defaults to \"anonymous\".\n\t *\n\t * @since 5.3.6\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin} for more info\n\t */\n\tcors?: string | null;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IPicturePrivate extends ISpritePrivate {\n}\n\nexport interface IPictureEvents extends ISpriteEvents {\n\n\t/**\n\t * Invoked when picture is loaded.\n\t */\n\tloaded: {};\n\n\t/**\n\t * Invoked when picture load error happens.\n\t */\n\tloaderror: {};\n}\n\n/**\n * Displays an image.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\n * @important\n */\nexport class Picture extends Sprite {\n\n\tdeclare public _settings: IPictureSettings;\n\tdeclare public _privateSettings: IPicturePrivate;\n\n\tpublic _display: IPicture = this._root._renderer.makePicture(undefined);\n\n\tpublic static className: string = \"Picture\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Picture.className]);\n\tdeclare public _events: IPictureEvents;\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\tconst width = this.get(\"width\");\n\t\t\tthis._display.width = $type.isNumber(width) ? width : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"height\")) {\n\t\t\tconst height = this.get(\"height\");\n\t\t\tthis._display.height = $type.isNumber(height) ? height : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowColor\")) {\n\t\t\tthis._display.clear();\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tthis._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowBlur\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowBlur = this.get(\"shadowBlur\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetX\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOpacity\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOpacity = this.get(\"shadowOpacity\");\n\t\t}\n\n\t\tif (this.isDirty(\"src\") || this.isDirty(\"cors\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tlet eventType: \"loaded\" | \"loaderror\" = \"loaded\";\n\t\t\tconst image = new Image();\n\t\t\timage.crossOrigin = this.get(\"cors\", \"anonymous\");\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._display.image = image;\n\t\t\t\tthis._updateSize();\n\t\t\t}).catch((_error: any) => {\n\t\t\t\teventType = \"loaderror\";\n\t\t\t});\n\n\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\tconst image = this._display.image;\n\t\tif (image) {\n\t\t\tlet w = this.getPrivate(\"width\", this.get(\"width\"));\n\t\t\tlet h = this.getPrivate(\"height\", this.get(\"height\"));\n\t\t\tconst r = image.width && image.height ? image.width / image.height : 0;\n\n\t\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\telse if ($type.isNumber(w) && r) {\n\t\t\t\th = w / r;\n\t\t\t}\n\t\t\telse if ($type.isNumber(h) && r) {\n\t\t\t\tw = h * r;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw = image.width;\n\t\t\t\th = image.height;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(w)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t}\n\t\t\tif ($type.isNumber(h)) {\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\tthis.markDirtyBounds();\n\t\t\tthis.markDirty();\n\t\t}\n\t}\n}\n", "import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface ITriangleSettings extends IGraphicsSettings {\r\n}\r\n\r\nexport interface ITrianglePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Triangle extends Graphics {\r\n\r\n\tdeclare public _settings: ITriangleSettings;\r\n\tdeclare public _privateSettings: ITrianglePrivate;\r\n\r\n\tpublic static className: string = \"Triangle\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Triangle.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear && !this.get(\"draw\")) {\r\n\t\t\tthis._draw();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _draw() {\r\n\t\tconst w = this.width();\r\n\t\tconst h = this.height();\r\n\t\tconst display = this._display;\r\n\t\tdisplay.moveTo(-w / 2, h / 2);\r\n\t\tdisplay.lineTo(0, -h / 2);\r\n\t\tdisplay.lineTo(w / 2, h / 2);\r\n\t\tdisplay.lineTo(-w / 2, h / 2);\r\n\t\tdisplay.closePath();\r\n\r\n\t}\r\n\r\n\tpublic _updateSize() {\r\n\t\tthis.markDirty()\r\n\t\tthis._clear = true;\r\n\t}\r\n}\r\n", "import { Scrollbar, IScrollbarPrivate, IScrollbarSettings, IScrollbarEvents } from \"./Scrollbar\";\r\n\r\nexport interface ISliderSettings extends IScrollbarSettings {\r\n}\r\n\r\nexport interface ISliderPrivate extends IScrollbarPrivate {\r\n}\r\n\r\nexport interface ISliderEvents extends IScrollbarEvents {\r\n}\r\n\r\n/**\r\n * A control that allows zooming chart's axes, or other uses requiring range\r\n * selection.\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\tdeclare public _settings: ISliderSettings;\r\n\tdeclare public _privateSettings: ISliderPrivate;\r\n\tdeclare public _events: ISliderEvents;\r\n\r\n\tpublic static className: string = \"Slider\";\r\n\tpublic static classNames: Array<string> = Scrollbar.classNames.concat([Slider.className]);\r\n\r\n\r\n\tprotected _afterNew() {\r\n\t\tthis._addOrientationClass();\r\n\t\tsuper._afterNew();\r\n\r\n\t\tthis.endGrip.setPrivate(\"visible\", false);\r\n\t\tthis.thumb.setPrivate(\"visible\", false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGrips() {\r\n\t\tsuper.updateGrips();\r\n\t\tconst startGrip = this.startGrip;\r\n\t\tthis.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });\r\n\t\tthis.setRaw(\"end\", this.get(\"start\"));\r\n\t}\r\n}\r\n", "import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\r\nimport { Color } from \"../../util/Color\";\r\n\r\nexport interface IGrainPatternSettings extends IPatternSettings {\r\n\r\n\t/**\r\n\t * Size of a grain in pixels.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tsize?: number;\r\n\r\n\t/**\r\n\t * Density of noise.\r\n\t *\r\n\t * Value range: `0` (no noise applied) to `1` (noise is applied to every\r\n\t * pixel).\r\n\t *\r\n\t * The bigger the value, the higher chance that pixel will have another pixel\r\n\t * painted over with random opacity from `minOpacity` to `maxOpacity`.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tdensity?: number;\r\n\r\n\t/**\r\n\t * Minimum opacity of a noise pixel.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminOpacity?: number;\r\n\r\n\t/**\r\n\t * Maximum opacity of a noise pixel.\r\n\t *\r\n\t * @default 0.3\r\n\t */\r\n\tmaxOpacity?: number;\r\n\r\n\t/**\r\n\t * An array of colors to randomly use for pixels.\r\n\t *\r\n\t * @default [color(0x000000)]\r\n\t */\r\n\tcolors?: Array<Color>;\r\n\r\n\t/**\r\n\t * Horizontal gap between noise pixels measured in `size`.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\thorizontalGap?: number;\r\n\r\n\t/**\r\n\t * Vertical gap between noise pixels measured in `size`.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tverticalGap?: number;\r\n\r\n}\r\n\r\nexport interface IGrainPatternPrivate extends IPatternPrivate {\r\n}\r\n\r\n/**\r\n * Grain pattern.\r\n * \r\n * Allows to add grain (noise) effect to your [[Graphics]] objects.\r\n * \r\n * Note, grain pattern does not support `fill` and `color` setting.\r\n * Use `colors` setting to define colors of a grain pixels.\r\n * \r\n * Note, rotation setting is not supported by this pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Grain_patterns} for more info\r\n * @since 5.5.0\r\n */\r\nexport class GrainPattern extends Pattern {\r\n\tdeclare public _settings: IGrainPatternSettings;\r\n\tdeclare public _privateSettings: IGrainPatternPrivate;\r\n\r\n\tpublic static className: string = \"GrainPattern\";\r\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([GrainPattern.className]);\r\n\r\n\tpublic canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n\tpublic context: CanvasRenderingContext2D = this.canvas.getContext(\"2d\")!;\r\n\r\n\tprotected _clearGrain: boolean = false;\r\n\r\n\tpublic _beforeChanged() {\r\n\t\t//document.body.appendChild(this.canvas); // temp\r\n\t\tthis.canvas.width = this.get(\"width\", 200);\r\n\t\tthis.canvas.height = this.get(\"height\", 200);\r\n\r\n\t\tif (this.isDirty(\"size\") || this.isDirty(\"density\") || this.isDirty(\"minOpacity\") || this.isDirty(\"maxOpacity\") || this.isDirty(\"colors\") || this.isDirty(\"horizontalGap\") || this.isDirty(\"verticalGap\")) {\r\n\t\t\tthis._clearGrain = true;\r\n\t\t}\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clearGrain) {\r\n\t\t\tconst width = this.get(\"width\", 200);\r\n\t\t\tconst height = this.get(\"height\", 200);\r\n\r\n\t\t\tconst patternData = this.context.getImageData(0, 0, width, height);\r\n\r\n\t\t\tconst size = Math.max(1, this.get(\"size\", 1));\r\n\t\t\tconst minOpacity = this.get(\"minOpacity\", 0);\r\n\t\t\tconst maxOpacity = this.get(\"maxOpacity\", 0.3);\r\n\r\n\t\t\tconst colors = this.get(\"colors\", [this.get(\"color\", Color.fromHex(0x000000))])\r\n\r\n\t\t\tconst cols = width / size;\r\n\t\t\tconst rows = height / size;\r\n\t\t\tconst density = this.get(\"density\", 1);\r\n\t\t\tconst horizontalGap = this.get(\"horizontalGap\", 0) + 1;\r\n\t\t\tconst verticalGap = this.get(\"verticalGap\", 0) + 1;\r\n\r\n\t\t\tfor (let r = 0; r < rows; r++) {\r\n\r\n\t\t\t\tif (verticalGap > 0) {\r\n\t\t\t\t\tif (r / verticalGap != Math.round(r / verticalGap)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let c = 0; c < cols; c++) {\r\n\t\t\t\t\tconst color = colors[Math.floor(Math.random() * colors.length)];\r\n\t\t\t\t\tconst alpha = (minOpacity + Math.random() * (maxOpacity - minOpacity)) * 255;\r\n\t\t\t\t\tconst rnd = Math.random();\r\n\r\n\t\t\t\t\tif (horizontalGap > 0) {\r\n\t\t\t\t\t\tif (c / horizontalGap != Math.round(c / horizontalGap)) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (rnd < density) {\r\n\t\t\t\t\t\tthis._setRectData(c, r, size, width, patternData.data, color.r, color.g, color.b, alpha);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.context.putImageData(patternData, 0, 0);\r\n\t\t\tthis._pattern = this.context.createPattern(this.canvas, \"repeat\");\r\n\t\t}\r\n\r\n\t\tthis._clearGrain = false;\r\n\t}\r\n\r\n\tprotected _checkDirtyFill() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _setRectData(col: number, row: number, size: number, width: number, data: Uint8ClampedArray, rc: number, gc: number, bc: number, ac: number) {\r\n\t\tfor (var c = col * size; c < col * size + size; c++) {\r\n\t\t\tfor (var r = row * size; r < row * size + size; r++) {\r\n\t\t\t\tvar i = (r * width + c) * 4;\r\n\r\n\t\t\t\tdata[i] = rc;\r\n\t\t\t\tdata[i + 1] = gc;\r\n\t\t\t\tdata[i + 2] = bc;\r\n\t\t\t\tdata[i + 3] = ac;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $utils from \"../../util/Utils\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tlet ux = this.get(\"x\");\n\t\tlet uy = this.get(\"y\");\n\t\tif (ux != null) {\n\t\t\tx = $utils.relativeToValue(ux, width);\n\t\t}\n\n\t\tif (uy != null) {\n\t\t\ty = $utils.relativeToValue(uy, height);\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n", "import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface ICirclePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tgap?: number;\n\n\t/**\n\t * Radius of the circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tradius?: number;\n\n\t/**\n\t * If set to `true`, will place every second circle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center circles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface ICirclePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Circle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class CirclePattern extends Pattern {\n\n\tdeclare public _settings: ICirclePatternSettings;\n\tdeclare public _privateSettings: ICirclePatternPrivate;\n\n\tpublic static className: string = \"CirclePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([CirclePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet radius = this.get(\"radius\", 3);\n\n\t\tlet cellW = radius * 2 + gap;\n\t\tlet cellH = radius * 2 + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW * $math.cos(rotation);\n\t\t\tthis._display.y = cellH * $math.sin(rotation);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += cellW + gap / 2;\n\t\t\t\t\t\ty += cellH + gap / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawCircle(x - radius, y - radius, radius);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n", "import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n", "import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface IRectanglePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between rectangles, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n\t/**\n\t * Maximum width of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxWidth?: number;\n\n\t/**\n\t * Maximum height of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxHeight?: number;\n\n\t/**\n\t * If set to `true`, will place every second rectangle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center rectangles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IRectanglePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Rectangle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class RectanglePattern extends Pattern {\n\tdeclare public _settings: IRectanglePatternSettings;\n\tdeclare public _privateSettings: IRectanglePatternPrivate;\n\n\tpublic static className: string = \"RectanglePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([RectanglePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet rectW = this.get(\"maxWidth\", 5);\n\t\tlet rectH = this.get(\"maxHeight\", 5);\n\n\t\tconst display = this._display;\n\n\t\tlet cellW = rectW + gap;\n\t\tlet cellH = rectH + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tdisplay.x = cellW / 2 * $math.cos(rotation);\n\t\t\tdisplay.y = -cellH / 2 * $math.sin(rotation);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += (cellW - rectW) / 2;\n\t\t\t\t\t\ty += (cellH - rectH) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tdisplay.drawRect(x, y, rectW, rectH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tdisplay.beginFill(color, colorOpacity);\n\t\t\tdisplay.endFill();\n\t\t}\n\n\t}\n}\n", "import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\n//import * as $math from \"../../util/Math\";\n\nexport interface IPathPatternSettings extends IPatternSettings {\n\n\t// /**\n\t//  * Gap between Paths, in pixels.\n\t//  *\n\t//  * @default 6\n\t//  */\n\t// gap?: number;\n\n\t// /**\n\t//  * Maximum width of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxWidth?: number;\n\n\t// /**\n\t//  * Maximum height of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxHeight?: number;\n\n\t// /**\n\t//  * If set to `true`, will place every second Path, creating checkered\n\t//  * pattern.\n\t//  *\n\t//  * @default false\n\t//  */\n\t// checkered?: boolean;\n\n\t// /**\n\t//  * Center image.\n\t//  *\n\t//  * @default true\n\t//  */\n\t// centered?: boolean;\n\n\t/**\n\t * Use an SVG path as pattern.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths} for more information\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPathPatternPrivate extends IPatternPrivate {\n}\n\n/**\n * A pattern that uses an SVG path.\n *\n * @since 5.2.33\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PathPattern extends Pattern {\n\tdeclare public _settings: IPathPatternSettings;\n\tdeclare public _privateSettings: IPathPatternPrivate;\n\n\tpublic static className: string = \"PathPattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PathPattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\t// const checkered = this.get(\"checkered\", false);\n\t\t// const centered = this.get(\"centered\", true);\n\t\t// const gap = this.get(\"gap\", 0);\n\t\t// const rotation = this.get(\"rotation\", 0);\n\t\t// let w = this.get(\"width\", 100);\n\t\t// let h = this.get(\"height\", 100);\n\t\t// let rectW = this.get(\"maxWidth\", 5);\n\t\t// let rectH = this.get(\"maxHeight\", 5);\n\n\n\t\t// let cellW = rectW + gap;\n\t\t// let cellH = rectH + gap;\n\n\t\t// let cols = Math.round(w / cellW);\n\t\t// let rows = Math.round(h / cellH);\n\n\t\t// cellW = w / cols;\n\t\t// cellH = h / rows;\n\n\t\t// if (rotation != 0) {\n\t\t// \t// @todo this is probably not right\n\t\t// \tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t// \tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t// }\n\n\t\t// for (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t// \tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t// \t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t// \t\t\tlet x = c * cellW;\n\t\t// \t\t\tlet y = r * cellH;\n\t\t// \t\t\tif (centered) {\n\t\t// \t\t\t\tx += (cellW - rectW) / 2;\n\t\t// \t\t\t\ty += (cellH - rectH) / 2;\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (checkered) {\n\t\t// \tw = w / 2 - gap * 2;\n\t\t// \th = h / 2 - gap * 2;\n\t\t// }\n\t\t// else {\n\t\t// \tw -= gap;\n\t\t// \th -= gap;\n\t\t// }\n\n\t\tconst svgPath = this.get(\"svgPath\");\n\t\tif (svgPath != null) {\n\t\t\tthis._display.svgPath(svgPath!);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n", "import * as $type from \"./Type\"\nimport * as $object from \"./Object\"\n\nexport interface IJSONParserOptions {\n\n\t/**\n\t * Reverse the order of parsed data.\n\t */\n\treverse?: boolean;\n\n}\n\n/**\n * Tool to parse JSON string into structured data.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info\n * @important\n */\nexport class JSONParser {\n\n\t/**\n\t * Parses JSON string.\n\t * \n\t * @param   input    JSON\n\t * @param   options  Options\n\t * @return           Data\n\t */\n\tpublic static parse(input: string, options?: IJSONParserOptions): any {\n\t\toptions = this._applyDefaults(options);\n\t\ttry {\n\t\t\tif ($type.isString(input)) {\n\t\t\t\tlet data  = JSON.parse(input);\n\t\t\t\tif (options.reverse && $type.isArray(data)) {\n\t\t\t\t\tdata.reverse();\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\telse if ($type.isArray(input) || $type.isObject(input)) {\n\t\t\t\treturn input;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow(\"Unable to parse JSON data\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprotected static _applyDefaults(options?: IJSONParserOptions): IJSONParserOptions {\n\t\tconst normalized: IJSONParserOptions = {};\n\t\tconst defaults = {\n\t\t\treverse: false\n\t\t};\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\t$object.each(defaults, (key, val) => {\n\t\t\tnormalized[key] = options![key] || val;\n\t\t});\n\t\treturn normalized;\n\t}\n}\n\n\nexport interface ICSVParserOptions {\n\n\t/**\n\t * Delimiter used for columns.\n\t * \n\t * @default \",\"\n\t */\n\tdelimiter?: string;\n\n\t/**\n\t * Reverse the order of parsed data.\n\t */\n\treverse?: boolean;\n\n\t/**\n\t * Skip first X rows.\n\t *\n\t * @default 0\n\t */\n\tskipRows?: number;\n\n\t/**\n\t * Skip empty rows.\n\t *\n\t * @default true\n\t */\n\tskipEmpty?: boolean;\n\n\t/**\n\t * Use the first row to name the columns.\n\t * \n\t * @default false\n\t */\n\tuseColumnNames?: boolean;\n\n}\n\n/**\n * Tool to parse JSON string into structured data.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info\n * @important\n */\nexport class CSVParser {\n\n\t/**\n\t * Parses CSV string.\n\t * \n\t * @param   input    CSV\n\t * @param   options  Options\n\t * @return           Data\n\t */\n\tpublic static parse(input: string, options?: ICSVParserOptions): any {\n\t\toptions = this._applyDefaults(options);\n\n\t\t// Get CSV data as array\n\t\tlet data = this.CSVToArray(input, options.delimiter!);\n\n\t\t// Init resuling array\n\t\tlet res: any[] = [],\n\t\t\tcols: string[] = [],\n\t\t\tcol: string,\n\t\t\ti: number;\n\n\t\t// Skip rows\n\t\tfor (i = 0; i < options.skipRows!; i++) {\n\t\t\tdata.shift();\n\t\t}\n\n\t\t// First row holds column names?\n\t\tif (options.useColumnNames) {\n\t\t\tcols = data.shift();\n\n\t\t\t// Normalize column names\n\t\t\tfor (let x = 0; x < cols.length; x++) {\n\t\t\t\t// trim\n\t\t\t\tcol = cols[x] != null ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\n\n\t\t\t\t// Check for empty\n\t\t\t\tif (\"\" === col) {\n\t\t\t\t\tcol = \"col\" + x;\n\t\t\t\t}\n\n\t\t\t\tcols[x] = col;\n\t\t\t}\n\t\t}\n\n\t\t// Iterate through the result set\n\t\tlet row;\n\t\twhile (true) {\n\t\t\trow = options.reverse ? data.pop() : data.shift();\n\n\t\t\tif (!row) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (options.skipEmpty && row.length === 1 && row[0] === \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dataPoint: any = {};\n\t\t\tfor (i = 0; i < row.length; i++) {\n\t\t\t\tcol = undefined === cols[i] ? \"col\" + i : cols[i];\n\t\t\t\tdataPoint[col] = row[i];\n\t\t\t}\n\t\t\tres.push(dataPoint);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic static CSVToArray(data: string, delimiter: string): any[] {\n\n\t\t// Check to see if the delimiter is defined. If not,\n\t\t// then default to comma.\n\t\tdelimiter = (delimiter || ',');\n\n\t\t// Create a regular expression to parse the CSV values.\n\t\tlet objPattern = new RegExp(\n\t\t\t(\n\t\t\t\t// Delimiters.\n\t\t\t\t\"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n\t\t\t\t// Quoted fields.\n\t\t\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n\t\t\t\t// Standard fields.\n\t\t\t\t\"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\"\n\t\t\t),\n\t\t\t\"gi\"\n\t\t);\n\n\n\t\t// Create an array to hold our data. Give the array\n\t\t// a default empty first row.\n\t\tlet arrData: any[] = [\n\t\t\t[]\n\t\t];\n\n\t\t// Create an array to hold our individual pattern\n\t\t// matching groups.\n\t\tlet arrMatches = null;\n\n\t\t// Keep looping over the regular expression matches\n\t\t// until we can no longer find a match.\n\t\twhile (true) {\n\t\t\tarrMatches = objPattern.exec(data);\n\n\t\t\tif (!arrMatches) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Get the delimiter that was found.\n\t\t\tlet strMatchedDelimiter = arrMatches[1];\n\n\t\t\t// Check to see if the given delimiter has a length\n\t\t\t// (is not the start of string) and if it matches\n\t\t\t// field delimiter. If id does not, then we know\n\t\t\t// that this delimiter is a row delimiter.\n\t\t\tif (\n\t\t\t\tstrMatchedDelimiter.length &&\n\t\t\t\t(strMatchedDelimiter !== delimiter)\n\t\t\t) {\n\n\t\t\t\t// Since we have reached a new row of data,\n\t\t\t\t// add an empty row to our data array.\n\t\t\t\tarrData.push([]);\n\n\t\t\t}\n\n\t\t\t// Now that we have our delimiter out of the way,\n\t\t\t// let's check to see which kind of value we\n\t\t\t// captured (quoted or unquoted).\n\t\t\tlet strMatchedValue;\n\t\t\tif (arrMatches[2]) {\n\n\t\t\t\t// We found a quoted value. When we capture\n\t\t\t\t// this value, unescape any double quotes.\n\t\t\t\tstrMatchedValue = arrMatches[2].replace(\n\t\t\t\t\tnew RegExp(\"\\\"\\\"\", \"g\"),\n\t\t\t\t\t\"\\\"\"\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// We found a non-quoted value.\n\t\t\t\tstrMatchedValue = arrMatches[3];\n\n\t\t\t}\n\n\t\t\t// Now that we have our value string, let's add\n\t\t\t// it to the data array.\n\t\t\tarrData[arrData.length - 1].push(strMatchedValue);\n\t\t}\n\n\t\t// Return the parsed data.\n\t\treturn (arrData);\n\t}\n\n\tprotected static _applyDefaults(options?: ICSVParserOptions): ICSVParserOptions {\n\t\tconst normalized: ICSVParserOptions = {};\n\t\tconst defaults = {\n\t\t\tdelimiter: \",\",\n\t\t\treverse: false,\n\t\t\tskipRows: 0,\n\t\t\tskipEmpty: true,\n\t\t\tuseColumnNames: false\n\t\t};\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\t$object.each(defaults, (key, val) => {\n\t\t\tnormalized[key] = options![key] || val;\n\t\t});\n\t\treturn normalized;\n\n\t}\n\n}", "import { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"./Entity\"\nimport { Color } from \"./Color\"\nimport * as $type from \"./Type\"\nimport * as $object from \"./Object\"\nimport * as $array from \"./Array\"\n\n\nexport interface IDataProcessorSettings extends IEntitySettings {\n\n\t/**\n\t * Date format used for parsing string-based dates.\n\t */\n\tdateFormat?: string;\n\n\t/**\n\t * A list of fields in data that need to be converted to tiemstamps.\n\t */\n\tdateFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to numbers.\n\t */\n\tnumericFields?: string[];\n\n\t/**\n\t * A list of fields in data that need to be converted to [[Color]] objects.\n\t */\n\tcolorFields?: string[];\n\n\t/**\n\t * Replace empty values with this.\n\t */\n\temptyAs?: any;\n\n}\n\nexport interface IDataProcessorPrivate extends IEntityPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tdeepFields?: string[];\n}\n\nexport interface IDataProcessorEvents extends IEntityEvents {\n}\n\n/**\n * A tool that can process the data before it is being used in charts.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info\n * @important\n */\nexport class DataProcessor extends Entity {\n\tdeclare public _settings: IDataProcessorSettings;\n\tdeclare public _privateSettings: IDataProcessorPrivate;\n\n\tprotected _checkDates: boolean = false;\n\tprotected _checkNumbers: boolean = false;\n\tprotected _checkColors: boolean = false;\n\tprotected _checkEmpty: boolean = false;\n\tprotected _checkDeep: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis._checkFeatures();\n\t\tthis.on(\"dateFields\", () => this._checkFeatures());\n\t\tthis.on(\"dateFormat\", () => this._checkFeatures());\n\t\tthis.on(\"numericFields\", () => this._checkFeatures());\n\t\tthis.on(\"colorFields\", () => this._checkFeatures());\n\t\tthis.on(\"emptyAs\", () => this._checkFeatures());\n\t}\n\n\tprotected _checkFeatures(): void {\n\t\tif (this.isDirty(\"dateFields\") || this.isDirty(\"dateFormat\")) {\n\t\t\tthis._checkDates = this.get(\"dateFields\") && (this.get(\"dateFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"numericFields\")) {\n\t\t\tthis._checkNumbers = this.get(\"numericFields\") && (this.get(\"numericFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"colorFields\")) {\n\t\t\tthis._checkColors = this.get(\"colorFields\") && (this.get(\"colorFields\")!.length > 0);\n\t\t}\n\t\tif (this.isDirty(\"emptyAs\")) {\n\t\t\tthis._checkEmpty = this.get(\"emptyAs\") != null;\n\t\t}\n\t\tthis._checkDeepFeatures();\n\t}\n\n\tprotected _checkDeepFeatures(): void {\n\t\tconst deepFields: string[] = [];\n\t\t$array.each([\"dateFields\", \"numericFields\", \"colorFields\"], (where: any) => {\n\t\t\t$array.each(this.get(where, []), (field) => {\n\t\t\t\tconst steps = (<string>field).split(\".\");\n\t\t\t\tsteps.pop();\n\t\t\t\twhile (steps.length > 0) {\n\t\t\t\t\tdeepFields.push(steps.join(\".\"));\n\t\t\t\t\tsteps.pop();\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t\tthis._checkDeep = deepFields.length > 0;\n\t\tthis.setPrivate(\"deepFields\", deepFields);\n\t}\n\n\t/**\n\t * Processess entire array of data.\n\t *\n\t * NOTE: calling this will modify original array!\n\t */\n\tpublic processMany(data: { [index: string]: any }[]): void {\n\t\tif ($type.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {\n\t\t\t$array.each(data, (row) => {\n\t\t\t\tthis.processRow(row);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Processes a row (object) of data.\n\t * \n\t * NOTE: calling this will modify values of the original object!\n\t */\n\tpublic processRow(row: { [index: string]: any }, prefix: string = \"\"): void {\n\t\t$object.each(row, (key: any, _value) => {\n\t\t\tconst lookupKey: string = prefix + key;\n\t\t\tif (this._checkEmpty) {\n\t\t\t\trow[key] = this._maybeToEmpty(row[key]);\n\t\t\t}\n\t\t\tif (this._checkNumbers) {\n\t\t\t\trow[key] = this._maybeToNumber(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDates) {\n\t\t\t\trow[key] = this._maybeToDate(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkColors) {\n\t\t\t\trow[key] = this._maybeToColor(lookupKey, row[key]);\n\t\t\t}\n\t\t\tif (this._checkDeep && (<any>this).getPrivate(\"deepFields\", []).indexOf(lookupKey) !== -1 && $type.isObject(row[key])) {\n\t\t\t\tthis.processRow(row[key], lookupKey + \".\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _maybeToNumber(field: string, value: any): any {\n\t\tif (this.get(\"numericFields\")!.indexOf(field) !== -1) {\n\t\t\treturn $type.toNumber(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToDate(field: string, value: any): any {\n\t\tif (this.get(\"dateFields\")!.indexOf(field) !== -1) {\n\t\t\treturn this._root.dateFormatter.parse(value, this.get(\"dateFormat\", \"\")).getTime();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToEmpty(value: any): any {\n\t\tif ((value == null || value == \"\") && this.get(\"emptyAs\") != null) {\n\t\t\treturn this.get(\"emptyAs\");\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected _maybeToColor(field: string, value: any): any {\n\t\tif (this.get(\"colorFields\")!.indexOf(field) !== -1) {\n\t\t\treturn Color.fromAny(value);\n\t\t}\n\t\treturn value;\n\t}\n\n}\n", "import type { Sprite, ISpritePointerEvent } from \"./Sprite\";\r\nimport type { IDisposer } from \"../util/Disposer\";\r\nimport type { Template } from \"../util/Template\";\r\n\r\nimport { Container, IContainerPrivate, IContainerSettings, IContainerEvents } from \"./Container\";\r\nimport { p50, Percent } from \"../util/Percent\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { Rectangle } from \"./Rectangle\";\r\nimport { color } from \"../util/Color\";\r\n\r\nimport * as $math from \"../util/Math\";\r\n\r\nexport interface ISpriteResizerSettings extends IContainerSettings {\r\n\r\n\t/**\r\n\t * Target [[Sprite]] element.\r\n\t */\r\n\tsprite?: Sprite\r\n\r\n\t/**\r\n\t * Target [[Template]]. If a template is set, scale and rotation will be set on Template instead of a Sprite.\r\n\t */\r\n\tspriteTemplate?: Template<Sprite>\r\n\r\n\t/**\r\n\t * Rotation increment in degrees.\r\n\t * \r\n\t * @default 10\r\n\t */\r\n\trotationStep?: number;\r\n\r\n}\r\n\r\nexport interface ISpriteResizerPrivate extends IContainerPrivate {\r\n\r\n}\r\n\r\nexport interface ISpriteResizerEvents extends IContainerEvents {\r\n\r\n}\r\n\r\nexport class SpriteResizer extends Container {\r\n\r\n\tdeclare public _settings: ISpriteResizerSettings;\r\n\tdeclare public _privateSettings: ISpriteResizerPrivate;\r\n\tdeclare public _events: ISpriteResizerEvents;\r\n\r\n\tpublic static className: string = \"SpriteResizer\";\r\n\tpublic static classNames: Array<string> = Container.classNames.concat([SpriteResizer.className]);\r\n\r\n\tpublic readonly rectangle: Rectangle = this.children.push(Rectangle.new(this._root, { themeTags: [\"rectangle\"], fillOpacity: 0, fill: color(0xFFFFFF) }));\r\n\tpublic readonly gripL: Container = this._createGrip(\"left\");\r\n\tpublic readonly gripR: Container = this._createGrip(\"right\");\r\n\tpublic readonly gripT: Container = this._createGrip(\"top\");\r\n\tpublic readonly gripB: Container = this._createGrip(\"bottom\");\r\n\r\n\tprotected _is: number = 1;\r\n\tprotected _ix: number = 0;\r\n\tprotected _iw: number = 0;\r\n\r\n\tprotected _positionDP?: IDisposer;\r\n\r\n\tprotected _isHover: boolean = false;\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\t\tthis.addTag(\"resizer\");\r\n\t\tthis.set(\"visible\", false);\r\n\r\n\t\tthis.gripL.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._resize(e.target, -1);\r\n\t\t})\r\n\r\n\t\tthis.gripR.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._resize(e.target, 1);\r\n\t\t})\r\n\r\n\t\tthis.gripL.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripR.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripT.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._rotate(e, 90);\r\n\t\t})\r\n\r\n\t\tthis.gripB.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._rotate(e, -90);\r\n\t\t})\r\n\r\n\t\tthis.gripT.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripB.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\t}\r\n\r\n\tprotected _resizeStart(grip: Sprite) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tif (sprite) {\r\n\t\t\tthis._is = sprite.get(\"scale\", 1);\r\n\t\t\tthis._ix = grip.x();\r\n\t\t\tthis._iw = this.width() / 2;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _resize(grip: Sprite, c: number) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tconst spriteTemplate = this.get(\"spriteTemplate\");\r\n\t\tif (sprite) {\r\n\t\t\tconst scale = Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw));\r\n\t\t\tif (spriteTemplate) {\r\n\t\t\t\tspriteTemplate.set(\"scale\", scale);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.set(\"scale\", scale);\r\n\t\t\t}\r\n\t\t\tsprite.states.lookup(\"default\")!.set(\"scale\", scale);\r\n\t\t\tthis._updatePositions();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _rotate(e: ISpritePointerEvent, delta: number) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tconst spriteTemplate = this.get(\"spriteTemplate\");\r\n\t\tif (sprite) {\r\n\t\t\tconst parent = this.parent;\r\n\t\t\tif (parent) {\r\n\r\n\t\t\t\tconst rotationStep = this.get(\"rotationStep\", 10);\r\n\t\t\t\tlet angle = Math.round((($math.getAngle({ x: this.x(), y: this.y() }, parent.toLocal(e.point)) + delta) / rotationStep)) * rotationStep;\r\n\t\t\t\tif (spriteTemplate) {\r\n\t\t\t\t\tspriteTemplate.set(\"rotation\", angle);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.set(\"rotation\", angle);\r\n\t\t\t\t}\r\n\t\t\t\tsprite.states.lookup(\"default\")!.set(\"rotation\", angle);\r\n\t\t\t\tthis._updatePositions();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _createGrip(themeTag: string) {\r\n\t\tconst container = this.children.push(Container.new(this._root, {\r\n\t\t\tthemeTags: [\"grip\", themeTag],\r\n\t\t\tsetStateOnChildren: true,\r\n\t\t\tdraggable: true\r\n\t\t}))\r\n\r\n\t\tcontainer.children.push(RoundedRectangle.new(this._root, {\r\n\t\t\tthemeTags: [\"outline\"],\r\n\t\t\tcenterX: p50,\r\n\t\t\tcenterY: p50\r\n\t\t}))\r\n\r\n\t\tcontainer.children.push(RoundedRectangle.new(this._root, {\r\n\t\t\tcenterX: p50,\r\n\t\t\tcenterY: p50\r\n\t\t}));\r\n\t\treturn container;\r\n\t}\r\n\r\n\tpublic _updateChildren() {\r\n\t\tsuper._updateChildren();\r\n\r\n\t\tif (this.isDirty(\"sprite\")) {\r\n\t\t\tconst sprite = this.get(\"sprite\");\r\n\t\t\tif (sprite) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t\tthis.setPrivate(\"visible\", true);\r\n\r\n\t\t\t\tthis._updatePositions();\r\n\r\n\t\t\t\tconst parent = sprite.parent;\r\n\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tparent.children.moveValue(this, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._positionDP = sprite.events.on(\"positionchanged\", () => {\r\n\t\t\t\t\tthis._updatePositions();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t\tthis.setPrivate(\"visible\", false);\r\n\r\n\t\t\t\tif (this._positionDP) {\r\n\t\t\t\t\tthis._positionDP.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\")) {\r\n\t\t\tthis._updatePositions();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _updatePositions() {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tif (sprite) {\r\n\t\t\tlet bounds = sprite.localBounds();\r\n\t\t\tlet scale = sprite.get(\"scale\", 1);\r\n\t\t\tlet d = 20\r\n\t\t\tlet w = (bounds.right - bounds.left) * scale + d;\r\n\t\t\tlet h = (bounds.bottom - bounds.top) * scale + d;\r\n\t\t\tlet a = sprite.get(\"rotation\", 0);\r\n\r\n\t\t\tconst rectangle = this.rectangle;\r\n\r\n\t\t\tlet cx = sprite.get(\"centerX\", p50);\r\n\t\t\tlet cy = sprite.get(\"centerY\", p50);\r\n\r\n\t\t\tlet cxr = 0;\r\n\t\t\tif (cx instanceof Percent) {\r\n\t\t\t\tcxr = cx.value;\r\n\t\t\t}\r\n\r\n\t\t\tlet cyr = 0;\r\n\t\t\tif (cy instanceof Percent) {\r\n\t\t\t\tcyr = cy.value;\r\n\t\t\t}\r\n\r\n\t\t\trectangle.setAll({ centerX: cx, centerY: cy, width: w, height: h });\r\n\t\t\tthis.setAll({ x: sprite.x() + d * (cxr - 0.5) * $math.cos(a) - d * (cyr - 0.5) * $math.sin(a), y: sprite.y() + d * (cyr - 0.5) * $math.cos(a) + d * (cxr - 0.5) * $math.sin(a), width: w, height: h, rotation: a });\r\n\r\n\t\t\tthis.gripT.setAll({ x: (0.5 - cxr) * w, y: -cyr * h });\r\n\t\t\tthis.gripB.setAll({ x: (0.5 - cxr) * w, y: (1 - cyr) * h });\r\n\t\t\tthis.gripL.setAll({ x: -cxr * w, y: (0.5 - cyr) * h });\r\n\t\t\tthis.gripR.setAll({ x: (1 - cxr) * w, y: (0.5 - cyr) * h });\r\n\r\n\t\t\tthis.rectangle.setAll({ width: w, height: h });\r\n\t\t}\r\n\t}\r\n}\r\n", "/**\n * A collection of network-related functions\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines an interface for objects that hold a net request result.\n */\nexport interface INetLoadResult<A> {\n\n\t/**\n\t * A reference to original [[XMLHttpRequest]].\n\t */\n\txhr: XMLHttpRequest;\n\n\t/**\n\t * Request response body.\n\t */\n\tresponse?: string;\n\n\t/**\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\n\t */\n\tblob?: Blob;\n\n\t/**\n\t * Response `Content-Type`.\n\t */\n\ttype: string | null;\n\n\t/**\n\t * Was there an error?\n\t */\n\terror: boolean;\n\n\t/**\n\t * A target object that made the net load request.\n\t */\n\ttarget?: A;\n\n}\n\nexport interface INetRequestOptions {\n\n\t/**\n\t * Custom request headers to be added to HTTP(S) request.\n\t */\n\trequestHeaders?: { key: string, value: string }[];\n\n\t/**\n\t * Specify expected response type.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\n\t */\n\tresponseType?: XMLHttpRequestResponseType;\n\n\t/**\n\t * Specify whether to send CORS credentials (defaults to `false`).\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\n\t */\n\twithCredentials?: boolean;\n}\n\n/**\n * Loads an external file via its URL.\n *\n * Please note that this is an asynchronous function.\n *\n * It will not return the result, but rather a `Promise`.\n *\n * You can use the `await` notion, or `then()`.\n *\n * ```TypeScript\n * // Using await\n * let response = await Net.load( \"http://www.my.com/data.json\" );\n * console.log( response.response );\n *\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\n *   console.log( response.response );\n * } );\n * ```\n * ```JavaScript\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\n *   console.log( response.response );\n * } );\n * ```\n *\n * @async\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info\n * @param url      URL for the file to load\n * @param target   A target element that is requesting the net load\n * @param options  Request options\n * @return Result (Promise)\n */\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\n\n\t\t// Is return type Blob?\n\t\tlet isBlob = options != null && options.responseType == \"blob\";\n\n\t\t// Create request and set up handlers\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.onload = () => {\n\t\t\tif (xhr.status === 200) {\n\n\t\t\t\tlet response: Optional<string>;\n\t\t\t\tlet blob: Optional<Blob>;\n\n\t\t\t\tif (isBlob) {\n\t\t\t\t\tblob = xhr.response;\n\t\t\t\t\treadBlob(blob!).then((response: any) => {\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\t\t\txhr: xhr,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t\tresponse: response,\n\t\t\t\t\t\t\tblob: blob,\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\t\t\ttarget: target\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsuccess(output);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\n\t\t\t\t}\n\n\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: false,\n\t\t\t\t\tresponse: response,\n\t\t\t\t\tblob: blob,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t};\n\t\t\t\tsuccess(output);\n\t\t\t}\n\t\t\telse {\n\t\t\t\terror({\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: true,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\txhr.onerror = () => {\n\t\t\terror({\n\t\t\t\txhr: xhr,\n\t\t\t\terror: true,\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\ttarget: target\n\t\t\t});\n\t\t};\n\n\t\t// Open request\n\t\txhr.open(\"GET\", url, true);\n\n\t\tif (options && options.withCredentials) {\n\t\t\txhr.withCredentials = true;\n\t\t}\n\n\t\t// Process options\n\t\tif (options != null) {\n\n\t\t\tif (options.requestHeaders != null) {\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\n\t\t\t\t\tlet header = options.requestHeaders[i];\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.responseType != null) {\n\t\t\t\txhr.responseType = options.responseType;\n\t\t\t}\n\t\t}\n\n\t\t// Send request\n\t\txhr.send();\n\n\t});\n\n}\n\n/**\n * Returns textual representation of a Blob object.\n *\n * @param   blob  Target blob\n * @return        Text promise\n */\nexport function readBlob(blob: Blob): Promise<string> {\n\treturn new Promise<string>((success, error) => {\n\t\tconst reader = new FileReader()\n\n\t\treader.onload = _event => {\n\t\t\tsuccess(<string>reader.result);\n\t\t}\n\n\t\treader.onerror = (e) => {\n\t\t\terror(e);\n\t\t}\n\n\t\treader.readAsText(blob);\n\t});\n}\n"],
  "mappings": "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",
  "names": ["p0", "cos", "sin", "color", "color", "color", "color", "color", "color", "color", "each", "each", "response", "output"]
}
