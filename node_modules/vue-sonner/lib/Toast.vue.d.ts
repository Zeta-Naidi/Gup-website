import './styles.css';
import type { HeightT, Position, ToastT } from './types';
declare const _default: import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<{
    toast: ToastT;
    toasts: ToastT[];
    index: number;
    expanded: boolean;
    invert: boolean;
    heights: HeightT[];
    position: Position;
    visibleToasts: number;
    expandByDefault: boolean;
    closeButton: boolean;
    interacting: boolean;
    duration?: number | undefined;
    descriptionClass?: string | undefined;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:heights": (heights: HeightT[]) => void;
    removeToast: (toast: ToastT) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    toast: ToastT;
    toasts: ToastT[];
    index: number;
    expanded: boolean;
    invert: boolean;
    heights: HeightT[];
    position: Position;
    visibleToasts: number;
    expandByDefault: boolean;
    closeButton: boolean;
    interacting: boolean;
    duration?: number | undefined;
    descriptionClass?: string | undefined;
}>>> & {
    "onUpdate:heights"?: ((heights: HeightT[]) => any) | undefined;
    onRemoveToast?: ((toast: ToastT) => any) | undefined;
}, {}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
