import { type CSSProperties } from 'vue';
import type { Position, Theme, ToastOptions } from './types';
export interface ToasterProps {
    invert?: boolean;
    theme?: Theme;
    position?: Position;
    hotkey?: string[];
    richColors?: boolean;
    expand?: boolean;
    duration?: number;
    gap?: number;
    visibleToasts?: number;
    closeButton?: boolean;
    toastOptions?: ToastOptions;
    className?: string;
    style?: CSSProperties;
    offset?: string | number;
    dir?: 'rtl' | 'ltr' | 'auto';
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ToasterProps>, {
    invert: boolean;
    position: string;
    hotkey: () => string[];
    expand: boolean;
    closeButton: boolean;
    className: string;
    offset: string;
    theme: string;
    richColors: boolean;
    duration: number;
    style: () => {};
    visibleToasts: number;
    toastOptions: () => {};
    dir: string;
    gap: number;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ToasterProps>, {
    invert: boolean;
    position: string;
    hotkey: () => string[];
    expand: boolean;
    closeButton: boolean;
    className: string;
    offset: string;
    theme: string;
    richColors: boolean;
    duration: number;
    style: () => {};
    visibleToasts: number;
    toastOptions: () => {};
    dir: string;
    gap: number;
}>>>, {
    invert: boolean;
    duration: number;
    style: CSSProperties;
    className: string;
    position: Position;
    visibleToasts: number;
    closeButton: boolean;
    theme: Theme;
    hotkey: string[];
    richColors: boolean;
    expand: boolean;
    gap: number;
    toastOptions: ToastOptions;
    offset: string | number;
    dir: "auto" | "ltr" | "rtl";
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
